
Lesson6_OptoRes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cf4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08006db8  08006db8  00016db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fa0  08006fa0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006fa0  08006fa0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fa0  08006fa0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fa0  08006fa0  00016fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fa4  08006fa4  00016fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  08007018  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08007018  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c73  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001580  00000000  00000000  00028d0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0002a290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  0002a968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012077  00000000  00000000  0002afb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000091b5  00000000  00000000  0003d02f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c258  00000000  00000000  000461e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b243c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002228  00000000  00000000  000b248c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006d9c 	.word	0x08006d9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006d9c 	.word	0x08006d9c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cdrcmple>:
 8000244:	4684      	mov	ip, r0
 8000246:	0010      	movs	r0, r2
 8000248:	4662      	mov	r2, ip
 800024a:	468c      	mov	ip, r1
 800024c:	0019      	movs	r1, r3
 800024e:	4663      	mov	r3, ip
 8000250:	e000      	b.n	8000254 <__aeabi_cdcmpeq>
 8000252:	46c0      	nop			; (mov r8, r8)

08000254 <__aeabi_cdcmpeq>:
 8000254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000256:	f001 fbdf 	bl	8001a18 <__ledf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	d401      	bmi.n	8000262 <__aeabi_cdcmpeq+0xe>
 800025e:	2100      	movs	r1, #0
 8000260:	42c8      	cmn	r0, r1
 8000262:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000264 <__aeabi_dcmpeq>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f001 fb2f 	bl	80018c8 <__eqdf2>
 800026a:	4240      	negs	r0, r0
 800026c:	3001      	adds	r0, #1
 800026e:	bd10      	pop	{r4, pc}

08000270 <__aeabi_dcmplt>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f001 fbd1 	bl	8001a18 <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	db01      	blt.n	800027e <__aeabi_dcmplt+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_dcmple>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f001 fbc7 	bl	8001a18 <__ledf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dd01      	ble.n	8000292 <__aeabi_dcmple+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_dcmpgt>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f001 fb57 	bl	800194c <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	dc01      	bgt.n	80002a6 <__aeabi_dcmpgt+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <__aeabi_dcmpge>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	f001 fb4d 	bl	800194c <__gedf2>
 80002b2:	2800      	cmp	r0, #0
 80002b4:	da01      	bge.n	80002ba <__aeabi_dcmpge+0xe>
 80002b6:	2000      	movs	r0, #0
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	2001      	movs	r0, #1
 80002bc:	bd10      	pop	{r4, pc}
 80002be:	46c0      	nop			; (mov r8, r8)

080002c0 <__aeabi_f2uiz>:
 80002c0:	219e      	movs	r1, #158	; 0x9e
 80002c2:	b510      	push	{r4, lr}
 80002c4:	05c9      	lsls	r1, r1, #23
 80002c6:	1c04      	adds	r4, r0, #0
 80002c8:	f002 fb8c 	bl	80029e4 <__aeabi_fcmpge>
 80002cc:	2800      	cmp	r0, #0
 80002ce:	d103      	bne.n	80002d8 <__aeabi_f2uiz+0x18>
 80002d0:	1c20      	adds	r0, r4, #0
 80002d2:	f000 fc17 	bl	8000b04 <__aeabi_f2iz>
 80002d6:	bd10      	pop	{r4, pc}
 80002d8:	219e      	movs	r1, #158	; 0x9e
 80002da:	1c20      	adds	r0, r4, #0
 80002dc:	05c9      	lsls	r1, r1, #23
 80002de:	f000 fa63 	bl	80007a8 <__aeabi_fsub>
 80002e2:	f000 fc0f 	bl	8000b04 <__aeabi_f2iz>
 80002e6:	2380      	movs	r3, #128	; 0x80
 80002e8:	061b      	lsls	r3, r3, #24
 80002ea:	469c      	mov	ip, r3
 80002ec:	4460      	add	r0, ip
 80002ee:	e7f2      	b.n	80002d6 <__aeabi_f2uiz+0x16>

080002f0 <__aeabi_d2uiz>:
 80002f0:	b570      	push	{r4, r5, r6, lr}
 80002f2:	2200      	movs	r2, #0
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <__aeabi_d2uiz+0x38>)
 80002f6:	0004      	movs	r4, r0
 80002f8:	000d      	movs	r5, r1
 80002fa:	f7ff ffd7 	bl	80002ac <__aeabi_dcmpge>
 80002fe:	2800      	cmp	r0, #0
 8000300:	d104      	bne.n	800030c <__aeabi_d2uiz+0x1c>
 8000302:	0020      	movs	r0, r4
 8000304:	0029      	movs	r1, r5
 8000306:	f002 fa07 	bl	8002718 <__aeabi_d2iz>
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <__aeabi_d2uiz+0x38>)
 800030e:	2200      	movs	r2, #0
 8000310:	0020      	movs	r0, r4
 8000312:	0029      	movs	r1, r5
 8000314:	f001 fe50 	bl	8001fb8 <__aeabi_dsub>
 8000318:	f002 f9fe 	bl	8002718 <__aeabi_d2iz>
 800031c:	2380      	movs	r3, #128	; 0x80
 800031e:	061b      	lsls	r3, r3, #24
 8000320:	469c      	mov	ip, r3
 8000322:	4460      	add	r0, ip
 8000324:	e7f1      	b.n	800030a <__aeabi_d2uiz+0x1a>
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	41e00000 	.word	0x41e00000

0800032c <__aeabi_fdiv>:
 800032c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800032e:	464f      	mov	r7, r9
 8000330:	4646      	mov	r6, r8
 8000332:	46d6      	mov	lr, sl
 8000334:	0245      	lsls	r5, r0, #9
 8000336:	b5c0      	push	{r6, r7, lr}
 8000338:	0047      	lsls	r7, r0, #1
 800033a:	1c0c      	adds	r4, r1, #0
 800033c:	0a6d      	lsrs	r5, r5, #9
 800033e:	0e3f      	lsrs	r7, r7, #24
 8000340:	0fc6      	lsrs	r6, r0, #31
 8000342:	2f00      	cmp	r7, #0
 8000344:	d100      	bne.n	8000348 <__aeabi_fdiv+0x1c>
 8000346:	e070      	b.n	800042a <__aeabi_fdiv+0xfe>
 8000348:	2fff      	cmp	r7, #255	; 0xff
 800034a:	d100      	bne.n	800034e <__aeabi_fdiv+0x22>
 800034c:	e075      	b.n	800043a <__aeabi_fdiv+0x10e>
 800034e:	00eb      	lsls	r3, r5, #3
 8000350:	2580      	movs	r5, #128	; 0x80
 8000352:	04ed      	lsls	r5, r5, #19
 8000354:	431d      	orrs	r5, r3
 8000356:	2300      	movs	r3, #0
 8000358:	4699      	mov	r9, r3
 800035a:	469a      	mov	sl, r3
 800035c:	3f7f      	subs	r7, #127	; 0x7f
 800035e:	0260      	lsls	r0, r4, #9
 8000360:	0a43      	lsrs	r3, r0, #9
 8000362:	4698      	mov	r8, r3
 8000364:	0063      	lsls	r3, r4, #1
 8000366:	0e1b      	lsrs	r3, r3, #24
 8000368:	0fe4      	lsrs	r4, r4, #31
 800036a:	2b00      	cmp	r3, #0
 800036c:	d04e      	beq.n	800040c <__aeabi_fdiv+0xe0>
 800036e:	2bff      	cmp	r3, #255	; 0xff
 8000370:	d046      	beq.n	8000400 <__aeabi_fdiv+0xd4>
 8000372:	4642      	mov	r2, r8
 8000374:	00d0      	lsls	r0, r2, #3
 8000376:	2280      	movs	r2, #128	; 0x80
 8000378:	04d2      	lsls	r2, r2, #19
 800037a:	4302      	orrs	r2, r0
 800037c:	4690      	mov	r8, r2
 800037e:	2200      	movs	r2, #0
 8000380:	3b7f      	subs	r3, #127	; 0x7f
 8000382:	0031      	movs	r1, r6
 8000384:	1aff      	subs	r7, r7, r3
 8000386:	464b      	mov	r3, r9
 8000388:	4061      	eors	r1, r4
 800038a:	b2c9      	uxtb	r1, r1
 800038c:	4313      	orrs	r3, r2
 800038e:	2b0f      	cmp	r3, #15
 8000390:	d900      	bls.n	8000394 <__aeabi_fdiv+0x68>
 8000392:	e0b5      	b.n	8000500 <__aeabi_fdiv+0x1d4>
 8000394:	486e      	ldr	r0, [pc, #440]	; (8000550 <__aeabi_fdiv+0x224>)
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	58c3      	ldr	r3, [r0, r3]
 800039a:	469f      	mov	pc, r3
 800039c:	2300      	movs	r3, #0
 800039e:	4698      	mov	r8, r3
 80003a0:	0026      	movs	r6, r4
 80003a2:	4645      	mov	r5, r8
 80003a4:	4692      	mov	sl, r2
 80003a6:	4653      	mov	r3, sl
 80003a8:	2b02      	cmp	r3, #2
 80003aa:	d100      	bne.n	80003ae <__aeabi_fdiv+0x82>
 80003ac:	e089      	b.n	80004c2 <__aeabi_fdiv+0x196>
 80003ae:	2b03      	cmp	r3, #3
 80003b0:	d100      	bne.n	80003b4 <__aeabi_fdiv+0x88>
 80003b2:	e09e      	b.n	80004f2 <__aeabi_fdiv+0x1c6>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d018      	beq.n	80003ea <__aeabi_fdiv+0xbe>
 80003b8:	003b      	movs	r3, r7
 80003ba:	337f      	adds	r3, #127	; 0x7f
 80003bc:	2b00      	cmp	r3, #0
 80003be:	dd69      	ble.n	8000494 <__aeabi_fdiv+0x168>
 80003c0:	076a      	lsls	r2, r5, #29
 80003c2:	d004      	beq.n	80003ce <__aeabi_fdiv+0xa2>
 80003c4:	220f      	movs	r2, #15
 80003c6:	402a      	ands	r2, r5
 80003c8:	2a04      	cmp	r2, #4
 80003ca:	d000      	beq.n	80003ce <__aeabi_fdiv+0xa2>
 80003cc:	3504      	adds	r5, #4
 80003ce:	012a      	lsls	r2, r5, #4
 80003d0:	d503      	bpl.n	80003da <__aeabi_fdiv+0xae>
 80003d2:	4b60      	ldr	r3, [pc, #384]	; (8000554 <__aeabi_fdiv+0x228>)
 80003d4:	401d      	ands	r5, r3
 80003d6:	003b      	movs	r3, r7
 80003d8:	3380      	adds	r3, #128	; 0x80
 80003da:	2bfe      	cmp	r3, #254	; 0xfe
 80003dc:	dd00      	ble.n	80003e0 <__aeabi_fdiv+0xb4>
 80003de:	e070      	b.n	80004c2 <__aeabi_fdiv+0x196>
 80003e0:	01ad      	lsls	r5, r5, #6
 80003e2:	0a6d      	lsrs	r5, r5, #9
 80003e4:	b2d8      	uxtb	r0, r3
 80003e6:	e002      	b.n	80003ee <__aeabi_fdiv+0xc2>
 80003e8:	000e      	movs	r6, r1
 80003ea:	2000      	movs	r0, #0
 80003ec:	2500      	movs	r5, #0
 80003ee:	05c0      	lsls	r0, r0, #23
 80003f0:	4328      	orrs	r0, r5
 80003f2:	07f6      	lsls	r6, r6, #31
 80003f4:	4330      	orrs	r0, r6
 80003f6:	bce0      	pop	{r5, r6, r7}
 80003f8:	46ba      	mov	sl, r7
 80003fa:	46b1      	mov	r9, r6
 80003fc:	46a8      	mov	r8, r5
 80003fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000400:	4643      	mov	r3, r8
 8000402:	2b00      	cmp	r3, #0
 8000404:	d13f      	bne.n	8000486 <__aeabi_fdiv+0x15a>
 8000406:	2202      	movs	r2, #2
 8000408:	3fff      	subs	r7, #255	; 0xff
 800040a:	e003      	b.n	8000414 <__aeabi_fdiv+0xe8>
 800040c:	4643      	mov	r3, r8
 800040e:	2b00      	cmp	r3, #0
 8000410:	d12d      	bne.n	800046e <__aeabi_fdiv+0x142>
 8000412:	2201      	movs	r2, #1
 8000414:	0031      	movs	r1, r6
 8000416:	464b      	mov	r3, r9
 8000418:	4061      	eors	r1, r4
 800041a:	b2c9      	uxtb	r1, r1
 800041c:	4313      	orrs	r3, r2
 800041e:	2b0f      	cmp	r3, #15
 8000420:	d834      	bhi.n	800048c <__aeabi_fdiv+0x160>
 8000422:	484d      	ldr	r0, [pc, #308]	; (8000558 <__aeabi_fdiv+0x22c>)
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	58c3      	ldr	r3, [r0, r3]
 8000428:	469f      	mov	pc, r3
 800042a:	2d00      	cmp	r5, #0
 800042c:	d113      	bne.n	8000456 <__aeabi_fdiv+0x12a>
 800042e:	2304      	movs	r3, #4
 8000430:	4699      	mov	r9, r3
 8000432:	3b03      	subs	r3, #3
 8000434:	2700      	movs	r7, #0
 8000436:	469a      	mov	sl, r3
 8000438:	e791      	b.n	800035e <__aeabi_fdiv+0x32>
 800043a:	2d00      	cmp	r5, #0
 800043c:	d105      	bne.n	800044a <__aeabi_fdiv+0x11e>
 800043e:	2308      	movs	r3, #8
 8000440:	4699      	mov	r9, r3
 8000442:	3b06      	subs	r3, #6
 8000444:	27ff      	movs	r7, #255	; 0xff
 8000446:	469a      	mov	sl, r3
 8000448:	e789      	b.n	800035e <__aeabi_fdiv+0x32>
 800044a:	230c      	movs	r3, #12
 800044c:	4699      	mov	r9, r3
 800044e:	3b09      	subs	r3, #9
 8000450:	27ff      	movs	r7, #255	; 0xff
 8000452:	469a      	mov	sl, r3
 8000454:	e783      	b.n	800035e <__aeabi_fdiv+0x32>
 8000456:	0028      	movs	r0, r5
 8000458:	f002 face 	bl	80029f8 <__clzsi2>
 800045c:	2776      	movs	r7, #118	; 0x76
 800045e:	1f43      	subs	r3, r0, #5
 8000460:	409d      	lsls	r5, r3
 8000462:	2300      	movs	r3, #0
 8000464:	427f      	negs	r7, r7
 8000466:	4699      	mov	r9, r3
 8000468:	469a      	mov	sl, r3
 800046a:	1a3f      	subs	r7, r7, r0
 800046c:	e777      	b.n	800035e <__aeabi_fdiv+0x32>
 800046e:	4640      	mov	r0, r8
 8000470:	f002 fac2 	bl	80029f8 <__clzsi2>
 8000474:	4642      	mov	r2, r8
 8000476:	1f43      	subs	r3, r0, #5
 8000478:	409a      	lsls	r2, r3
 800047a:	2376      	movs	r3, #118	; 0x76
 800047c:	425b      	negs	r3, r3
 800047e:	4690      	mov	r8, r2
 8000480:	1a1b      	subs	r3, r3, r0
 8000482:	2200      	movs	r2, #0
 8000484:	e77d      	b.n	8000382 <__aeabi_fdiv+0x56>
 8000486:	23ff      	movs	r3, #255	; 0xff
 8000488:	2203      	movs	r2, #3
 800048a:	e77a      	b.n	8000382 <__aeabi_fdiv+0x56>
 800048c:	000e      	movs	r6, r1
 800048e:	20ff      	movs	r0, #255	; 0xff
 8000490:	2500      	movs	r5, #0
 8000492:	e7ac      	b.n	80003ee <__aeabi_fdiv+0xc2>
 8000494:	2001      	movs	r0, #1
 8000496:	1ac0      	subs	r0, r0, r3
 8000498:	281b      	cmp	r0, #27
 800049a:	dca6      	bgt.n	80003ea <__aeabi_fdiv+0xbe>
 800049c:	379e      	adds	r7, #158	; 0x9e
 800049e:	002a      	movs	r2, r5
 80004a0:	40bd      	lsls	r5, r7
 80004a2:	40c2      	lsrs	r2, r0
 80004a4:	1e6b      	subs	r3, r5, #1
 80004a6:	419d      	sbcs	r5, r3
 80004a8:	4315      	orrs	r5, r2
 80004aa:	076b      	lsls	r3, r5, #29
 80004ac:	d004      	beq.n	80004b8 <__aeabi_fdiv+0x18c>
 80004ae:	230f      	movs	r3, #15
 80004b0:	402b      	ands	r3, r5
 80004b2:	2b04      	cmp	r3, #4
 80004b4:	d000      	beq.n	80004b8 <__aeabi_fdiv+0x18c>
 80004b6:	3504      	adds	r5, #4
 80004b8:	016b      	lsls	r3, r5, #5
 80004ba:	d544      	bpl.n	8000546 <__aeabi_fdiv+0x21a>
 80004bc:	2001      	movs	r0, #1
 80004be:	2500      	movs	r5, #0
 80004c0:	e795      	b.n	80003ee <__aeabi_fdiv+0xc2>
 80004c2:	20ff      	movs	r0, #255	; 0xff
 80004c4:	2500      	movs	r5, #0
 80004c6:	e792      	b.n	80003ee <__aeabi_fdiv+0xc2>
 80004c8:	2580      	movs	r5, #128	; 0x80
 80004ca:	2600      	movs	r6, #0
 80004cc:	20ff      	movs	r0, #255	; 0xff
 80004ce:	03ed      	lsls	r5, r5, #15
 80004d0:	e78d      	b.n	80003ee <__aeabi_fdiv+0xc2>
 80004d2:	2300      	movs	r3, #0
 80004d4:	4698      	mov	r8, r3
 80004d6:	2080      	movs	r0, #128	; 0x80
 80004d8:	03c0      	lsls	r0, r0, #15
 80004da:	4205      	tst	r5, r0
 80004dc:	d009      	beq.n	80004f2 <__aeabi_fdiv+0x1c6>
 80004de:	4643      	mov	r3, r8
 80004e0:	4203      	tst	r3, r0
 80004e2:	d106      	bne.n	80004f2 <__aeabi_fdiv+0x1c6>
 80004e4:	4645      	mov	r5, r8
 80004e6:	4305      	orrs	r5, r0
 80004e8:	026d      	lsls	r5, r5, #9
 80004ea:	0026      	movs	r6, r4
 80004ec:	20ff      	movs	r0, #255	; 0xff
 80004ee:	0a6d      	lsrs	r5, r5, #9
 80004f0:	e77d      	b.n	80003ee <__aeabi_fdiv+0xc2>
 80004f2:	2080      	movs	r0, #128	; 0x80
 80004f4:	03c0      	lsls	r0, r0, #15
 80004f6:	4305      	orrs	r5, r0
 80004f8:	026d      	lsls	r5, r5, #9
 80004fa:	20ff      	movs	r0, #255	; 0xff
 80004fc:	0a6d      	lsrs	r5, r5, #9
 80004fe:	e776      	b.n	80003ee <__aeabi_fdiv+0xc2>
 8000500:	4642      	mov	r2, r8
 8000502:	016b      	lsls	r3, r5, #5
 8000504:	0150      	lsls	r0, r2, #5
 8000506:	4283      	cmp	r3, r0
 8000508:	d219      	bcs.n	800053e <__aeabi_fdiv+0x212>
 800050a:	221b      	movs	r2, #27
 800050c:	2500      	movs	r5, #0
 800050e:	3f01      	subs	r7, #1
 8000510:	2601      	movs	r6, #1
 8000512:	001c      	movs	r4, r3
 8000514:	006d      	lsls	r5, r5, #1
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	2c00      	cmp	r4, #0
 800051a:	db01      	blt.n	8000520 <__aeabi_fdiv+0x1f4>
 800051c:	4298      	cmp	r0, r3
 800051e:	d801      	bhi.n	8000524 <__aeabi_fdiv+0x1f8>
 8000520:	1a1b      	subs	r3, r3, r0
 8000522:	4335      	orrs	r5, r6
 8000524:	3a01      	subs	r2, #1
 8000526:	2a00      	cmp	r2, #0
 8000528:	d1f3      	bne.n	8000512 <__aeabi_fdiv+0x1e6>
 800052a:	1e5a      	subs	r2, r3, #1
 800052c:	4193      	sbcs	r3, r2
 800052e:	431d      	orrs	r5, r3
 8000530:	003b      	movs	r3, r7
 8000532:	337f      	adds	r3, #127	; 0x7f
 8000534:	000e      	movs	r6, r1
 8000536:	2b00      	cmp	r3, #0
 8000538:	dd00      	ble.n	800053c <__aeabi_fdiv+0x210>
 800053a:	e741      	b.n	80003c0 <__aeabi_fdiv+0x94>
 800053c:	e7aa      	b.n	8000494 <__aeabi_fdiv+0x168>
 800053e:	221a      	movs	r2, #26
 8000540:	2501      	movs	r5, #1
 8000542:	1a1b      	subs	r3, r3, r0
 8000544:	e7e4      	b.n	8000510 <__aeabi_fdiv+0x1e4>
 8000546:	01ad      	lsls	r5, r5, #6
 8000548:	2000      	movs	r0, #0
 800054a:	0a6d      	lsrs	r5, r5, #9
 800054c:	e74f      	b.n	80003ee <__aeabi_fdiv+0xc2>
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	08006de4 	.word	0x08006de4
 8000554:	f7ffffff 	.word	0xf7ffffff
 8000558:	08006e24 	.word	0x08006e24

0800055c <__aeabi_fmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	464f      	mov	r7, r9
 8000560:	4646      	mov	r6, r8
 8000562:	46d6      	mov	lr, sl
 8000564:	0244      	lsls	r4, r0, #9
 8000566:	0045      	lsls	r5, r0, #1
 8000568:	b5c0      	push	{r6, r7, lr}
 800056a:	0a64      	lsrs	r4, r4, #9
 800056c:	1c0f      	adds	r7, r1, #0
 800056e:	0e2d      	lsrs	r5, r5, #24
 8000570:	0fc6      	lsrs	r6, r0, #31
 8000572:	2d00      	cmp	r5, #0
 8000574:	d100      	bne.n	8000578 <__aeabi_fmul+0x1c>
 8000576:	e08d      	b.n	8000694 <__aeabi_fmul+0x138>
 8000578:	2dff      	cmp	r5, #255	; 0xff
 800057a:	d100      	bne.n	800057e <__aeabi_fmul+0x22>
 800057c:	e092      	b.n	80006a4 <__aeabi_fmul+0x148>
 800057e:	2300      	movs	r3, #0
 8000580:	2080      	movs	r0, #128	; 0x80
 8000582:	4699      	mov	r9, r3
 8000584:	469a      	mov	sl, r3
 8000586:	00e4      	lsls	r4, r4, #3
 8000588:	04c0      	lsls	r0, r0, #19
 800058a:	4304      	orrs	r4, r0
 800058c:	3d7f      	subs	r5, #127	; 0x7f
 800058e:	0278      	lsls	r0, r7, #9
 8000590:	0a43      	lsrs	r3, r0, #9
 8000592:	4698      	mov	r8, r3
 8000594:	007b      	lsls	r3, r7, #1
 8000596:	0e1b      	lsrs	r3, r3, #24
 8000598:	0fff      	lsrs	r7, r7, #31
 800059a:	2b00      	cmp	r3, #0
 800059c:	d100      	bne.n	80005a0 <__aeabi_fmul+0x44>
 800059e:	e070      	b.n	8000682 <__aeabi_fmul+0x126>
 80005a0:	2bff      	cmp	r3, #255	; 0xff
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fmul+0x4a>
 80005a4:	e086      	b.n	80006b4 <__aeabi_fmul+0x158>
 80005a6:	4642      	mov	r2, r8
 80005a8:	00d0      	lsls	r0, r2, #3
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	3b7f      	subs	r3, #127	; 0x7f
 80005ae:	18ed      	adds	r5, r5, r3
 80005b0:	2300      	movs	r3, #0
 80005b2:	04d2      	lsls	r2, r2, #19
 80005b4:	4302      	orrs	r2, r0
 80005b6:	4690      	mov	r8, r2
 80005b8:	469c      	mov	ip, r3
 80005ba:	0031      	movs	r1, r6
 80005bc:	464b      	mov	r3, r9
 80005be:	4079      	eors	r1, r7
 80005c0:	1c68      	adds	r0, r5, #1
 80005c2:	2b0f      	cmp	r3, #15
 80005c4:	d81c      	bhi.n	8000600 <__aeabi_fmul+0xa4>
 80005c6:	4a76      	ldr	r2, [pc, #472]	; (80007a0 <__aeabi_fmul+0x244>)
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	58d3      	ldr	r3, [r2, r3]
 80005cc:	469f      	mov	pc, r3
 80005ce:	0039      	movs	r1, r7
 80005d0:	4644      	mov	r4, r8
 80005d2:	46e2      	mov	sl, ip
 80005d4:	4653      	mov	r3, sl
 80005d6:	2b02      	cmp	r3, #2
 80005d8:	d00f      	beq.n	80005fa <__aeabi_fmul+0x9e>
 80005da:	2b03      	cmp	r3, #3
 80005dc:	d100      	bne.n	80005e0 <__aeabi_fmul+0x84>
 80005de:	e0d7      	b.n	8000790 <__aeabi_fmul+0x234>
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d137      	bne.n	8000654 <__aeabi_fmul+0xf8>
 80005e4:	2000      	movs	r0, #0
 80005e6:	2400      	movs	r4, #0
 80005e8:	05c0      	lsls	r0, r0, #23
 80005ea:	4320      	orrs	r0, r4
 80005ec:	07c9      	lsls	r1, r1, #31
 80005ee:	4308      	orrs	r0, r1
 80005f0:	bce0      	pop	{r5, r6, r7}
 80005f2:	46ba      	mov	sl, r7
 80005f4:	46b1      	mov	r9, r6
 80005f6:	46a8      	mov	r8, r5
 80005f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fa:	20ff      	movs	r0, #255	; 0xff
 80005fc:	2400      	movs	r4, #0
 80005fe:	e7f3      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000600:	0c26      	lsrs	r6, r4, #16
 8000602:	0424      	lsls	r4, r4, #16
 8000604:	0c22      	lsrs	r2, r4, #16
 8000606:	4644      	mov	r4, r8
 8000608:	0424      	lsls	r4, r4, #16
 800060a:	0c24      	lsrs	r4, r4, #16
 800060c:	4643      	mov	r3, r8
 800060e:	0027      	movs	r7, r4
 8000610:	0c1b      	lsrs	r3, r3, #16
 8000612:	4357      	muls	r7, r2
 8000614:	4374      	muls	r4, r6
 8000616:	435a      	muls	r2, r3
 8000618:	435e      	muls	r6, r3
 800061a:	1912      	adds	r2, r2, r4
 800061c:	0c3b      	lsrs	r3, r7, #16
 800061e:	189b      	adds	r3, r3, r2
 8000620:	429c      	cmp	r4, r3
 8000622:	d903      	bls.n	800062c <__aeabi_fmul+0xd0>
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	0252      	lsls	r2, r2, #9
 8000628:	4694      	mov	ip, r2
 800062a:	4466      	add	r6, ip
 800062c:	043f      	lsls	r7, r7, #16
 800062e:	041a      	lsls	r2, r3, #16
 8000630:	0c3f      	lsrs	r7, r7, #16
 8000632:	19d2      	adds	r2, r2, r7
 8000634:	0194      	lsls	r4, r2, #6
 8000636:	1e67      	subs	r7, r4, #1
 8000638:	41bc      	sbcs	r4, r7
 800063a:	0c1b      	lsrs	r3, r3, #16
 800063c:	0e92      	lsrs	r2, r2, #26
 800063e:	199b      	adds	r3, r3, r6
 8000640:	4314      	orrs	r4, r2
 8000642:	019b      	lsls	r3, r3, #6
 8000644:	431c      	orrs	r4, r3
 8000646:	011b      	lsls	r3, r3, #4
 8000648:	d400      	bmi.n	800064c <__aeabi_fmul+0xf0>
 800064a:	e09b      	b.n	8000784 <__aeabi_fmul+0x228>
 800064c:	2301      	movs	r3, #1
 800064e:	0862      	lsrs	r2, r4, #1
 8000650:	401c      	ands	r4, r3
 8000652:	4314      	orrs	r4, r2
 8000654:	0002      	movs	r2, r0
 8000656:	327f      	adds	r2, #127	; 0x7f
 8000658:	2a00      	cmp	r2, #0
 800065a:	dd64      	ble.n	8000726 <__aeabi_fmul+0x1ca>
 800065c:	0763      	lsls	r3, r4, #29
 800065e:	d004      	beq.n	800066a <__aeabi_fmul+0x10e>
 8000660:	230f      	movs	r3, #15
 8000662:	4023      	ands	r3, r4
 8000664:	2b04      	cmp	r3, #4
 8000666:	d000      	beq.n	800066a <__aeabi_fmul+0x10e>
 8000668:	3404      	adds	r4, #4
 800066a:	0123      	lsls	r3, r4, #4
 800066c:	d503      	bpl.n	8000676 <__aeabi_fmul+0x11a>
 800066e:	0002      	movs	r2, r0
 8000670:	4b4c      	ldr	r3, [pc, #304]	; (80007a4 <__aeabi_fmul+0x248>)
 8000672:	3280      	adds	r2, #128	; 0x80
 8000674:	401c      	ands	r4, r3
 8000676:	2afe      	cmp	r2, #254	; 0xfe
 8000678:	dcbf      	bgt.n	80005fa <__aeabi_fmul+0x9e>
 800067a:	01a4      	lsls	r4, r4, #6
 800067c:	0a64      	lsrs	r4, r4, #9
 800067e:	b2d0      	uxtb	r0, r2
 8000680:	e7b2      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000682:	4643      	mov	r3, r8
 8000684:	2b00      	cmp	r3, #0
 8000686:	d13d      	bne.n	8000704 <__aeabi_fmul+0x1a8>
 8000688:	464a      	mov	r2, r9
 800068a:	3301      	adds	r3, #1
 800068c:	431a      	orrs	r2, r3
 800068e:	4691      	mov	r9, r2
 8000690:	469c      	mov	ip, r3
 8000692:	e792      	b.n	80005ba <__aeabi_fmul+0x5e>
 8000694:	2c00      	cmp	r4, #0
 8000696:	d129      	bne.n	80006ec <__aeabi_fmul+0x190>
 8000698:	2304      	movs	r3, #4
 800069a:	4699      	mov	r9, r3
 800069c:	3b03      	subs	r3, #3
 800069e:	2500      	movs	r5, #0
 80006a0:	469a      	mov	sl, r3
 80006a2:	e774      	b.n	800058e <__aeabi_fmul+0x32>
 80006a4:	2c00      	cmp	r4, #0
 80006a6:	d11b      	bne.n	80006e0 <__aeabi_fmul+0x184>
 80006a8:	2308      	movs	r3, #8
 80006aa:	4699      	mov	r9, r3
 80006ac:	3b06      	subs	r3, #6
 80006ae:	25ff      	movs	r5, #255	; 0xff
 80006b0:	469a      	mov	sl, r3
 80006b2:	e76c      	b.n	800058e <__aeabi_fmul+0x32>
 80006b4:	4643      	mov	r3, r8
 80006b6:	35ff      	adds	r5, #255	; 0xff
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d10b      	bne.n	80006d4 <__aeabi_fmul+0x178>
 80006bc:	2302      	movs	r3, #2
 80006be:	464a      	mov	r2, r9
 80006c0:	431a      	orrs	r2, r3
 80006c2:	4691      	mov	r9, r2
 80006c4:	469c      	mov	ip, r3
 80006c6:	e778      	b.n	80005ba <__aeabi_fmul+0x5e>
 80006c8:	4653      	mov	r3, sl
 80006ca:	0031      	movs	r1, r6
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	d000      	beq.n	80006d2 <__aeabi_fmul+0x176>
 80006d0:	e783      	b.n	80005da <__aeabi_fmul+0x7e>
 80006d2:	e792      	b.n	80005fa <__aeabi_fmul+0x9e>
 80006d4:	2303      	movs	r3, #3
 80006d6:	464a      	mov	r2, r9
 80006d8:	431a      	orrs	r2, r3
 80006da:	4691      	mov	r9, r2
 80006dc:	469c      	mov	ip, r3
 80006de:	e76c      	b.n	80005ba <__aeabi_fmul+0x5e>
 80006e0:	230c      	movs	r3, #12
 80006e2:	4699      	mov	r9, r3
 80006e4:	3b09      	subs	r3, #9
 80006e6:	25ff      	movs	r5, #255	; 0xff
 80006e8:	469a      	mov	sl, r3
 80006ea:	e750      	b.n	800058e <__aeabi_fmul+0x32>
 80006ec:	0020      	movs	r0, r4
 80006ee:	f002 f983 	bl	80029f8 <__clzsi2>
 80006f2:	2576      	movs	r5, #118	; 0x76
 80006f4:	1f43      	subs	r3, r0, #5
 80006f6:	409c      	lsls	r4, r3
 80006f8:	2300      	movs	r3, #0
 80006fa:	426d      	negs	r5, r5
 80006fc:	4699      	mov	r9, r3
 80006fe:	469a      	mov	sl, r3
 8000700:	1a2d      	subs	r5, r5, r0
 8000702:	e744      	b.n	800058e <__aeabi_fmul+0x32>
 8000704:	4640      	mov	r0, r8
 8000706:	f002 f977 	bl	80029f8 <__clzsi2>
 800070a:	4642      	mov	r2, r8
 800070c:	1f43      	subs	r3, r0, #5
 800070e:	409a      	lsls	r2, r3
 8000710:	2300      	movs	r3, #0
 8000712:	1a2d      	subs	r5, r5, r0
 8000714:	4690      	mov	r8, r2
 8000716:	469c      	mov	ip, r3
 8000718:	3d76      	subs	r5, #118	; 0x76
 800071a:	e74e      	b.n	80005ba <__aeabi_fmul+0x5e>
 800071c:	2480      	movs	r4, #128	; 0x80
 800071e:	2100      	movs	r1, #0
 8000720:	20ff      	movs	r0, #255	; 0xff
 8000722:	03e4      	lsls	r4, r4, #15
 8000724:	e760      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000726:	2301      	movs	r3, #1
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	2b1b      	cmp	r3, #27
 800072c:	dd00      	ble.n	8000730 <__aeabi_fmul+0x1d4>
 800072e:	e759      	b.n	80005e4 <__aeabi_fmul+0x88>
 8000730:	0022      	movs	r2, r4
 8000732:	309e      	adds	r0, #158	; 0x9e
 8000734:	40da      	lsrs	r2, r3
 8000736:	4084      	lsls	r4, r0
 8000738:	0013      	movs	r3, r2
 800073a:	1e62      	subs	r2, r4, #1
 800073c:	4194      	sbcs	r4, r2
 800073e:	431c      	orrs	r4, r3
 8000740:	0763      	lsls	r3, r4, #29
 8000742:	d004      	beq.n	800074e <__aeabi_fmul+0x1f2>
 8000744:	230f      	movs	r3, #15
 8000746:	4023      	ands	r3, r4
 8000748:	2b04      	cmp	r3, #4
 800074a:	d000      	beq.n	800074e <__aeabi_fmul+0x1f2>
 800074c:	3404      	adds	r4, #4
 800074e:	0163      	lsls	r3, r4, #5
 8000750:	d51a      	bpl.n	8000788 <__aeabi_fmul+0x22c>
 8000752:	2001      	movs	r0, #1
 8000754:	2400      	movs	r4, #0
 8000756:	e747      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000758:	2080      	movs	r0, #128	; 0x80
 800075a:	03c0      	lsls	r0, r0, #15
 800075c:	4204      	tst	r4, r0
 800075e:	d009      	beq.n	8000774 <__aeabi_fmul+0x218>
 8000760:	4643      	mov	r3, r8
 8000762:	4203      	tst	r3, r0
 8000764:	d106      	bne.n	8000774 <__aeabi_fmul+0x218>
 8000766:	4644      	mov	r4, r8
 8000768:	4304      	orrs	r4, r0
 800076a:	0264      	lsls	r4, r4, #9
 800076c:	0039      	movs	r1, r7
 800076e:	20ff      	movs	r0, #255	; 0xff
 8000770:	0a64      	lsrs	r4, r4, #9
 8000772:	e739      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000774:	2080      	movs	r0, #128	; 0x80
 8000776:	03c0      	lsls	r0, r0, #15
 8000778:	4304      	orrs	r4, r0
 800077a:	0264      	lsls	r4, r4, #9
 800077c:	0031      	movs	r1, r6
 800077e:	20ff      	movs	r0, #255	; 0xff
 8000780:	0a64      	lsrs	r4, r4, #9
 8000782:	e731      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000784:	0028      	movs	r0, r5
 8000786:	e765      	b.n	8000654 <__aeabi_fmul+0xf8>
 8000788:	01a4      	lsls	r4, r4, #6
 800078a:	2000      	movs	r0, #0
 800078c:	0a64      	lsrs	r4, r4, #9
 800078e:	e72b      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000790:	2080      	movs	r0, #128	; 0x80
 8000792:	03c0      	lsls	r0, r0, #15
 8000794:	4304      	orrs	r4, r0
 8000796:	0264      	lsls	r4, r4, #9
 8000798:	20ff      	movs	r0, #255	; 0xff
 800079a:	0a64      	lsrs	r4, r4, #9
 800079c:	e724      	b.n	80005e8 <__aeabi_fmul+0x8c>
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	08006e64 	.word	0x08006e64
 80007a4:	f7ffffff 	.word	0xf7ffffff

080007a8 <__aeabi_fsub>:
 80007a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007aa:	46ce      	mov	lr, r9
 80007ac:	4647      	mov	r7, r8
 80007ae:	0243      	lsls	r3, r0, #9
 80007b0:	0a5b      	lsrs	r3, r3, #9
 80007b2:	024e      	lsls	r6, r1, #9
 80007b4:	00da      	lsls	r2, r3, #3
 80007b6:	4694      	mov	ip, r2
 80007b8:	0a72      	lsrs	r2, r6, #9
 80007ba:	4691      	mov	r9, r2
 80007bc:	0045      	lsls	r5, r0, #1
 80007be:	004a      	lsls	r2, r1, #1
 80007c0:	b580      	push	{r7, lr}
 80007c2:	0e2d      	lsrs	r5, r5, #24
 80007c4:	001f      	movs	r7, r3
 80007c6:	0fc4      	lsrs	r4, r0, #31
 80007c8:	0e12      	lsrs	r2, r2, #24
 80007ca:	0fc9      	lsrs	r1, r1, #31
 80007cc:	09b6      	lsrs	r6, r6, #6
 80007ce:	2aff      	cmp	r2, #255	; 0xff
 80007d0:	d05b      	beq.n	800088a <__aeabi_fsub+0xe2>
 80007d2:	2001      	movs	r0, #1
 80007d4:	4041      	eors	r1, r0
 80007d6:	428c      	cmp	r4, r1
 80007d8:	d039      	beq.n	800084e <__aeabi_fsub+0xa6>
 80007da:	1aa8      	subs	r0, r5, r2
 80007dc:	2800      	cmp	r0, #0
 80007de:	dd5a      	ble.n	8000896 <__aeabi_fsub+0xee>
 80007e0:	2a00      	cmp	r2, #0
 80007e2:	d06a      	beq.n	80008ba <__aeabi_fsub+0x112>
 80007e4:	2dff      	cmp	r5, #255	; 0xff
 80007e6:	d100      	bne.n	80007ea <__aeabi_fsub+0x42>
 80007e8:	e0d9      	b.n	800099e <__aeabi_fsub+0x1f6>
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	04d2      	lsls	r2, r2, #19
 80007ee:	4316      	orrs	r6, r2
 80007f0:	281b      	cmp	r0, #27
 80007f2:	dc00      	bgt.n	80007f6 <__aeabi_fsub+0x4e>
 80007f4:	e0e9      	b.n	80009ca <__aeabi_fsub+0x222>
 80007f6:	2001      	movs	r0, #1
 80007f8:	4663      	mov	r3, ip
 80007fa:	1a18      	subs	r0, r3, r0
 80007fc:	0143      	lsls	r3, r0, #5
 80007fe:	d400      	bmi.n	8000802 <__aeabi_fsub+0x5a>
 8000800:	e0b4      	b.n	800096c <__aeabi_fsub+0x1c4>
 8000802:	0180      	lsls	r0, r0, #6
 8000804:	0987      	lsrs	r7, r0, #6
 8000806:	0038      	movs	r0, r7
 8000808:	f002 f8f6 	bl	80029f8 <__clzsi2>
 800080c:	3805      	subs	r0, #5
 800080e:	4087      	lsls	r7, r0
 8000810:	4285      	cmp	r5, r0
 8000812:	dc00      	bgt.n	8000816 <__aeabi_fsub+0x6e>
 8000814:	e0cc      	b.n	80009b0 <__aeabi_fsub+0x208>
 8000816:	1a2d      	subs	r5, r5, r0
 8000818:	48b5      	ldr	r0, [pc, #724]	; (8000af0 <__aeabi_fsub+0x348>)
 800081a:	4038      	ands	r0, r7
 800081c:	0743      	lsls	r3, r0, #29
 800081e:	d004      	beq.n	800082a <__aeabi_fsub+0x82>
 8000820:	230f      	movs	r3, #15
 8000822:	4003      	ands	r3, r0
 8000824:	2b04      	cmp	r3, #4
 8000826:	d000      	beq.n	800082a <__aeabi_fsub+0x82>
 8000828:	3004      	adds	r0, #4
 800082a:	0143      	lsls	r3, r0, #5
 800082c:	d400      	bmi.n	8000830 <__aeabi_fsub+0x88>
 800082e:	e0a0      	b.n	8000972 <__aeabi_fsub+0x1ca>
 8000830:	1c6a      	adds	r2, r5, #1
 8000832:	2dfe      	cmp	r5, #254	; 0xfe
 8000834:	d100      	bne.n	8000838 <__aeabi_fsub+0x90>
 8000836:	e08d      	b.n	8000954 <__aeabi_fsub+0x1ac>
 8000838:	0180      	lsls	r0, r0, #6
 800083a:	0a47      	lsrs	r7, r0, #9
 800083c:	b2d2      	uxtb	r2, r2
 800083e:	05d0      	lsls	r0, r2, #23
 8000840:	4338      	orrs	r0, r7
 8000842:	07e4      	lsls	r4, r4, #31
 8000844:	4320      	orrs	r0, r4
 8000846:	bcc0      	pop	{r6, r7}
 8000848:	46b9      	mov	r9, r7
 800084a:	46b0      	mov	r8, r6
 800084c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800084e:	1aa8      	subs	r0, r5, r2
 8000850:	4680      	mov	r8, r0
 8000852:	2800      	cmp	r0, #0
 8000854:	dd45      	ble.n	80008e2 <__aeabi_fsub+0x13a>
 8000856:	2a00      	cmp	r2, #0
 8000858:	d070      	beq.n	800093c <__aeabi_fsub+0x194>
 800085a:	2dff      	cmp	r5, #255	; 0xff
 800085c:	d100      	bne.n	8000860 <__aeabi_fsub+0xb8>
 800085e:	e09e      	b.n	800099e <__aeabi_fsub+0x1f6>
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	04db      	lsls	r3, r3, #19
 8000864:	431e      	orrs	r6, r3
 8000866:	4643      	mov	r3, r8
 8000868:	2b1b      	cmp	r3, #27
 800086a:	dc00      	bgt.n	800086e <__aeabi_fsub+0xc6>
 800086c:	e0d2      	b.n	8000a14 <__aeabi_fsub+0x26c>
 800086e:	2001      	movs	r0, #1
 8000870:	4460      	add	r0, ip
 8000872:	0143      	lsls	r3, r0, #5
 8000874:	d57a      	bpl.n	800096c <__aeabi_fsub+0x1c4>
 8000876:	3501      	adds	r5, #1
 8000878:	2dff      	cmp	r5, #255	; 0xff
 800087a:	d06b      	beq.n	8000954 <__aeabi_fsub+0x1ac>
 800087c:	2301      	movs	r3, #1
 800087e:	4a9d      	ldr	r2, [pc, #628]	; (8000af4 <__aeabi_fsub+0x34c>)
 8000880:	4003      	ands	r3, r0
 8000882:	0840      	lsrs	r0, r0, #1
 8000884:	4010      	ands	r0, r2
 8000886:	4318      	orrs	r0, r3
 8000888:	e7c8      	b.n	800081c <__aeabi_fsub+0x74>
 800088a:	2e00      	cmp	r6, #0
 800088c:	d020      	beq.n	80008d0 <__aeabi_fsub+0x128>
 800088e:	428c      	cmp	r4, r1
 8000890:	d023      	beq.n	80008da <__aeabi_fsub+0x132>
 8000892:	0028      	movs	r0, r5
 8000894:	38ff      	subs	r0, #255	; 0xff
 8000896:	2800      	cmp	r0, #0
 8000898:	d039      	beq.n	800090e <__aeabi_fsub+0x166>
 800089a:	1b57      	subs	r7, r2, r5
 800089c:	2d00      	cmp	r5, #0
 800089e:	d000      	beq.n	80008a2 <__aeabi_fsub+0xfa>
 80008a0:	e09d      	b.n	80009de <__aeabi_fsub+0x236>
 80008a2:	4663      	mov	r3, ip
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d100      	bne.n	80008aa <__aeabi_fsub+0x102>
 80008a8:	e0db      	b.n	8000a62 <__aeabi_fsub+0x2ba>
 80008aa:	1e7b      	subs	r3, r7, #1
 80008ac:	2f01      	cmp	r7, #1
 80008ae:	d100      	bne.n	80008b2 <__aeabi_fsub+0x10a>
 80008b0:	e10d      	b.n	8000ace <__aeabi_fsub+0x326>
 80008b2:	2fff      	cmp	r7, #255	; 0xff
 80008b4:	d071      	beq.n	800099a <__aeabi_fsub+0x1f2>
 80008b6:	001f      	movs	r7, r3
 80008b8:	e098      	b.n	80009ec <__aeabi_fsub+0x244>
 80008ba:	2e00      	cmp	r6, #0
 80008bc:	d100      	bne.n	80008c0 <__aeabi_fsub+0x118>
 80008be:	e0a7      	b.n	8000a10 <__aeabi_fsub+0x268>
 80008c0:	1e42      	subs	r2, r0, #1
 80008c2:	2801      	cmp	r0, #1
 80008c4:	d100      	bne.n	80008c8 <__aeabi_fsub+0x120>
 80008c6:	e0e6      	b.n	8000a96 <__aeabi_fsub+0x2ee>
 80008c8:	28ff      	cmp	r0, #255	; 0xff
 80008ca:	d068      	beq.n	800099e <__aeabi_fsub+0x1f6>
 80008cc:	0010      	movs	r0, r2
 80008ce:	e78f      	b.n	80007f0 <__aeabi_fsub+0x48>
 80008d0:	2001      	movs	r0, #1
 80008d2:	4041      	eors	r1, r0
 80008d4:	42a1      	cmp	r1, r4
 80008d6:	d000      	beq.n	80008da <__aeabi_fsub+0x132>
 80008d8:	e77f      	b.n	80007da <__aeabi_fsub+0x32>
 80008da:	20ff      	movs	r0, #255	; 0xff
 80008dc:	4240      	negs	r0, r0
 80008de:	4680      	mov	r8, r0
 80008e0:	44a8      	add	r8, r5
 80008e2:	4640      	mov	r0, r8
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d038      	beq.n	800095a <__aeabi_fsub+0x1b2>
 80008e8:	1b51      	subs	r1, r2, r5
 80008ea:	2d00      	cmp	r5, #0
 80008ec:	d100      	bne.n	80008f0 <__aeabi_fsub+0x148>
 80008ee:	e0ae      	b.n	8000a4e <__aeabi_fsub+0x2a6>
 80008f0:	2aff      	cmp	r2, #255	; 0xff
 80008f2:	d100      	bne.n	80008f6 <__aeabi_fsub+0x14e>
 80008f4:	e0df      	b.n	8000ab6 <__aeabi_fsub+0x30e>
 80008f6:	2380      	movs	r3, #128	; 0x80
 80008f8:	4660      	mov	r0, ip
 80008fa:	04db      	lsls	r3, r3, #19
 80008fc:	4318      	orrs	r0, r3
 80008fe:	4684      	mov	ip, r0
 8000900:	291b      	cmp	r1, #27
 8000902:	dc00      	bgt.n	8000906 <__aeabi_fsub+0x15e>
 8000904:	e0d9      	b.n	8000aba <__aeabi_fsub+0x312>
 8000906:	2001      	movs	r0, #1
 8000908:	0015      	movs	r5, r2
 800090a:	1980      	adds	r0, r0, r6
 800090c:	e7b1      	b.n	8000872 <__aeabi_fsub+0xca>
 800090e:	20fe      	movs	r0, #254	; 0xfe
 8000910:	1c6a      	adds	r2, r5, #1
 8000912:	4210      	tst	r0, r2
 8000914:	d171      	bne.n	80009fa <__aeabi_fsub+0x252>
 8000916:	2d00      	cmp	r5, #0
 8000918:	d000      	beq.n	800091c <__aeabi_fsub+0x174>
 800091a:	e0a6      	b.n	8000a6a <__aeabi_fsub+0x2c2>
 800091c:	4663      	mov	r3, ip
 800091e:	2b00      	cmp	r3, #0
 8000920:	d100      	bne.n	8000924 <__aeabi_fsub+0x17c>
 8000922:	e0d9      	b.n	8000ad8 <__aeabi_fsub+0x330>
 8000924:	2200      	movs	r2, #0
 8000926:	2e00      	cmp	r6, #0
 8000928:	d100      	bne.n	800092c <__aeabi_fsub+0x184>
 800092a:	e788      	b.n	800083e <__aeabi_fsub+0x96>
 800092c:	1b98      	subs	r0, r3, r6
 800092e:	0143      	lsls	r3, r0, #5
 8000930:	d400      	bmi.n	8000934 <__aeabi_fsub+0x18c>
 8000932:	e0e1      	b.n	8000af8 <__aeabi_fsub+0x350>
 8000934:	4663      	mov	r3, ip
 8000936:	000c      	movs	r4, r1
 8000938:	1af0      	subs	r0, r6, r3
 800093a:	e76f      	b.n	800081c <__aeabi_fsub+0x74>
 800093c:	2e00      	cmp	r6, #0
 800093e:	d100      	bne.n	8000942 <__aeabi_fsub+0x19a>
 8000940:	e0b7      	b.n	8000ab2 <__aeabi_fsub+0x30a>
 8000942:	0002      	movs	r2, r0
 8000944:	3a01      	subs	r2, #1
 8000946:	2801      	cmp	r0, #1
 8000948:	d100      	bne.n	800094c <__aeabi_fsub+0x1a4>
 800094a:	e09c      	b.n	8000a86 <__aeabi_fsub+0x2de>
 800094c:	28ff      	cmp	r0, #255	; 0xff
 800094e:	d026      	beq.n	800099e <__aeabi_fsub+0x1f6>
 8000950:	4690      	mov	r8, r2
 8000952:	e788      	b.n	8000866 <__aeabi_fsub+0xbe>
 8000954:	22ff      	movs	r2, #255	; 0xff
 8000956:	2700      	movs	r7, #0
 8000958:	e771      	b.n	800083e <__aeabi_fsub+0x96>
 800095a:	20fe      	movs	r0, #254	; 0xfe
 800095c:	1c6a      	adds	r2, r5, #1
 800095e:	4210      	tst	r0, r2
 8000960:	d064      	beq.n	8000a2c <__aeabi_fsub+0x284>
 8000962:	2aff      	cmp	r2, #255	; 0xff
 8000964:	d0f6      	beq.n	8000954 <__aeabi_fsub+0x1ac>
 8000966:	0015      	movs	r5, r2
 8000968:	4466      	add	r6, ip
 800096a:	0870      	lsrs	r0, r6, #1
 800096c:	0743      	lsls	r3, r0, #29
 800096e:	d000      	beq.n	8000972 <__aeabi_fsub+0x1ca>
 8000970:	e756      	b.n	8000820 <__aeabi_fsub+0x78>
 8000972:	08c3      	lsrs	r3, r0, #3
 8000974:	2dff      	cmp	r5, #255	; 0xff
 8000976:	d012      	beq.n	800099e <__aeabi_fsub+0x1f6>
 8000978:	025b      	lsls	r3, r3, #9
 800097a:	0a5f      	lsrs	r7, r3, #9
 800097c:	b2ea      	uxtb	r2, r5
 800097e:	e75e      	b.n	800083e <__aeabi_fsub+0x96>
 8000980:	4662      	mov	r2, ip
 8000982:	2a00      	cmp	r2, #0
 8000984:	d100      	bne.n	8000988 <__aeabi_fsub+0x1e0>
 8000986:	e096      	b.n	8000ab6 <__aeabi_fsub+0x30e>
 8000988:	2e00      	cmp	r6, #0
 800098a:	d008      	beq.n	800099e <__aeabi_fsub+0x1f6>
 800098c:	2280      	movs	r2, #128	; 0x80
 800098e:	03d2      	lsls	r2, r2, #15
 8000990:	4213      	tst	r3, r2
 8000992:	d004      	beq.n	800099e <__aeabi_fsub+0x1f6>
 8000994:	4648      	mov	r0, r9
 8000996:	4210      	tst	r0, r2
 8000998:	d101      	bne.n	800099e <__aeabi_fsub+0x1f6>
 800099a:	000c      	movs	r4, r1
 800099c:	464b      	mov	r3, r9
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d0d8      	beq.n	8000954 <__aeabi_fsub+0x1ac>
 80009a2:	2780      	movs	r7, #128	; 0x80
 80009a4:	03ff      	lsls	r7, r7, #15
 80009a6:	431f      	orrs	r7, r3
 80009a8:	027f      	lsls	r7, r7, #9
 80009aa:	22ff      	movs	r2, #255	; 0xff
 80009ac:	0a7f      	lsrs	r7, r7, #9
 80009ae:	e746      	b.n	800083e <__aeabi_fsub+0x96>
 80009b0:	2320      	movs	r3, #32
 80009b2:	003a      	movs	r2, r7
 80009b4:	1b45      	subs	r5, r0, r5
 80009b6:	0038      	movs	r0, r7
 80009b8:	3501      	adds	r5, #1
 80009ba:	40ea      	lsrs	r2, r5
 80009bc:	1b5d      	subs	r5, r3, r5
 80009be:	40a8      	lsls	r0, r5
 80009c0:	1e43      	subs	r3, r0, #1
 80009c2:	4198      	sbcs	r0, r3
 80009c4:	2500      	movs	r5, #0
 80009c6:	4310      	orrs	r0, r2
 80009c8:	e728      	b.n	800081c <__aeabi_fsub+0x74>
 80009ca:	2320      	movs	r3, #32
 80009cc:	1a1b      	subs	r3, r3, r0
 80009ce:	0032      	movs	r2, r6
 80009d0:	409e      	lsls	r6, r3
 80009d2:	40c2      	lsrs	r2, r0
 80009d4:	0030      	movs	r0, r6
 80009d6:	1e43      	subs	r3, r0, #1
 80009d8:	4198      	sbcs	r0, r3
 80009da:	4310      	orrs	r0, r2
 80009dc:	e70c      	b.n	80007f8 <__aeabi_fsub+0x50>
 80009de:	2aff      	cmp	r2, #255	; 0xff
 80009e0:	d0db      	beq.n	800099a <__aeabi_fsub+0x1f2>
 80009e2:	2380      	movs	r3, #128	; 0x80
 80009e4:	4660      	mov	r0, ip
 80009e6:	04db      	lsls	r3, r3, #19
 80009e8:	4318      	orrs	r0, r3
 80009ea:	4684      	mov	ip, r0
 80009ec:	2f1b      	cmp	r7, #27
 80009ee:	dd56      	ble.n	8000a9e <__aeabi_fsub+0x2f6>
 80009f0:	2001      	movs	r0, #1
 80009f2:	000c      	movs	r4, r1
 80009f4:	0015      	movs	r5, r2
 80009f6:	1a30      	subs	r0, r6, r0
 80009f8:	e700      	b.n	80007fc <__aeabi_fsub+0x54>
 80009fa:	4663      	mov	r3, ip
 80009fc:	1b9f      	subs	r7, r3, r6
 80009fe:	017b      	lsls	r3, r7, #5
 8000a00:	d43d      	bmi.n	8000a7e <__aeabi_fsub+0x2d6>
 8000a02:	2f00      	cmp	r7, #0
 8000a04:	d000      	beq.n	8000a08 <__aeabi_fsub+0x260>
 8000a06:	e6fe      	b.n	8000806 <__aeabi_fsub+0x5e>
 8000a08:	2400      	movs	r4, #0
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2700      	movs	r7, #0
 8000a0e:	e716      	b.n	800083e <__aeabi_fsub+0x96>
 8000a10:	0005      	movs	r5, r0
 8000a12:	e7af      	b.n	8000974 <__aeabi_fsub+0x1cc>
 8000a14:	0032      	movs	r2, r6
 8000a16:	4643      	mov	r3, r8
 8000a18:	4641      	mov	r1, r8
 8000a1a:	40da      	lsrs	r2, r3
 8000a1c:	2320      	movs	r3, #32
 8000a1e:	1a5b      	subs	r3, r3, r1
 8000a20:	409e      	lsls	r6, r3
 8000a22:	0030      	movs	r0, r6
 8000a24:	1e43      	subs	r3, r0, #1
 8000a26:	4198      	sbcs	r0, r3
 8000a28:	4310      	orrs	r0, r2
 8000a2a:	e721      	b.n	8000870 <__aeabi_fsub+0xc8>
 8000a2c:	2d00      	cmp	r5, #0
 8000a2e:	d1a7      	bne.n	8000980 <__aeabi_fsub+0x1d8>
 8000a30:	4663      	mov	r3, ip
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d059      	beq.n	8000aea <__aeabi_fsub+0x342>
 8000a36:	2200      	movs	r2, #0
 8000a38:	2e00      	cmp	r6, #0
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_fsub+0x296>
 8000a3c:	e6ff      	b.n	800083e <__aeabi_fsub+0x96>
 8000a3e:	0030      	movs	r0, r6
 8000a40:	4460      	add	r0, ip
 8000a42:	0143      	lsls	r3, r0, #5
 8000a44:	d592      	bpl.n	800096c <__aeabi_fsub+0x1c4>
 8000a46:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <__aeabi_fsub+0x348>)
 8000a48:	3501      	adds	r5, #1
 8000a4a:	4018      	ands	r0, r3
 8000a4c:	e78e      	b.n	800096c <__aeabi_fsub+0x1c4>
 8000a4e:	4663      	mov	r3, ip
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d047      	beq.n	8000ae4 <__aeabi_fsub+0x33c>
 8000a54:	1e4b      	subs	r3, r1, #1
 8000a56:	2901      	cmp	r1, #1
 8000a58:	d015      	beq.n	8000a86 <__aeabi_fsub+0x2de>
 8000a5a:	29ff      	cmp	r1, #255	; 0xff
 8000a5c:	d02b      	beq.n	8000ab6 <__aeabi_fsub+0x30e>
 8000a5e:	0019      	movs	r1, r3
 8000a60:	e74e      	b.n	8000900 <__aeabi_fsub+0x158>
 8000a62:	000c      	movs	r4, r1
 8000a64:	464b      	mov	r3, r9
 8000a66:	003d      	movs	r5, r7
 8000a68:	e784      	b.n	8000974 <__aeabi_fsub+0x1cc>
 8000a6a:	4662      	mov	r2, ip
 8000a6c:	2a00      	cmp	r2, #0
 8000a6e:	d18b      	bne.n	8000988 <__aeabi_fsub+0x1e0>
 8000a70:	2e00      	cmp	r6, #0
 8000a72:	d192      	bne.n	800099a <__aeabi_fsub+0x1f2>
 8000a74:	2780      	movs	r7, #128	; 0x80
 8000a76:	2400      	movs	r4, #0
 8000a78:	22ff      	movs	r2, #255	; 0xff
 8000a7a:	03ff      	lsls	r7, r7, #15
 8000a7c:	e6df      	b.n	800083e <__aeabi_fsub+0x96>
 8000a7e:	4663      	mov	r3, ip
 8000a80:	000c      	movs	r4, r1
 8000a82:	1af7      	subs	r7, r6, r3
 8000a84:	e6bf      	b.n	8000806 <__aeabi_fsub+0x5e>
 8000a86:	0030      	movs	r0, r6
 8000a88:	4460      	add	r0, ip
 8000a8a:	2501      	movs	r5, #1
 8000a8c:	0143      	lsls	r3, r0, #5
 8000a8e:	d400      	bmi.n	8000a92 <__aeabi_fsub+0x2ea>
 8000a90:	e76c      	b.n	800096c <__aeabi_fsub+0x1c4>
 8000a92:	2502      	movs	r5, #2
 8000a94:	e6f2      	b.n	800087c <__aeabi_fsub+0xd4>
 8000a96:	4663      	mov	r3, ip
 8000a98:	2501      	movs	r5, #1
 8000a9a:	1b98      	subs	r0, r3, r6
 8000a9c:	e6ae      	b.n	80007fc <__aeabi_fsub+0x54>
 8000a9e:	2320      	movs	r3, #32
 8000aa0:	4664      	mov	r4, ip
 8000aa2:	4660      	mov	r0, ip
 8000aa4:	40fc      	lsrs	r4, r7
 8000aa6:	1bdf      	subs	r7, r3, r7
 8000aa8:	40b8      	lsls	r0, r7
 8000aaa:	1e43      	subs	r3, r0, #1
 8000aac:	4198      	sbcs	r0, r3
 8000aae:	4320      	orrs	r0, r4
 8000ab0:	e79f      	b.n	80009f2 <__aeabi_fsub+0x24a>
 8000ab2:	0005      	movs	r5, r0
 8000ab4:	e75e      	b.n	8000974 <__aeabi_fsub+0x1cc>
 8000ab6:	464b      	mov	r3, r9
 8000ab8:	e771      	b.n	800099e <__aeabi_fsub+0x1f6>
 8000aba:	2320      	movs	r3, #32
 8000abc:	4665      	mov	r5, ip
 8000abe:	4660      	mov	r0, ip
 8000ac0:	40cd      	lsrs	r5, r1
 8000ac2:	1a59      	subs	r1, r3, r1
 8000ac4:	4088      	lsls	r0, r1
 8000ac6:	1e43      	subs	r3, r0, #1
 8000ac8:	4198      	sbcs	r0, r3
 8000aca:	4328      	orrs	r0, r5
 8000acc:	e71c      	b.n	8000908 <__aeabi_fsub+0x160>
 8000ace:	4663      	mov	r3, ip
 8000ad0:	000c      	movs	r4, r1
 8000ad2:	2501      	movs	r5, #1
 8000ad4:	1af0      	subs	r0, r6, r3
 8000ad6:	e691      	b.n	80007fc <__aeabi_fsub+0x54>
 8000ad8:	2e00      	cmp	r6, #0
 8000ada:	d095      	beq.n	8000a08 <__aeabi_fsub+0x260>
 8000adc:	000c      	movs	r4, r1
 8000ade:	464f      	mov	r7, r9
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	e6ac      	b.n	800083e <__aeabi_fsub+0x96>
 8000ae4:	464b      	mov	r3, r9
 8000ae6:	000d      	movs	r5, r1
 8000ae8:	e744      	b.n	8000974 <__aeabi_fsub+0x1cc>
 8000aea:	464f      	mov	r7, r9
 8000aec:	2200      	movs	r2, #0
 8000aee:	e6a6      	b.n	800083e <__aeabi_fsub+0x96>
 8000af0:	fbffffff 	.word	0xfbffffff
 8000af4:	7dffffff 	.word	0x7dffffff
 8000af8:	2800      	cmp	r0, #0
 8000afa:	d000      	beq.n	8000afe <__aeabi_fsub+0x356>
 8000afc:	e736      	b.n	800096c <__aeabi_fsub+0x1c4>
 8000afe:	2400      	movs	r4, #0
 8000b00:	2700      	movs	r7, #0
 8000b02:	e69c      	b.n	800083e <__aeabi_fsub+0x96>

08000b04 <__aeabi_f2iz>:
 8000b04:	0241      	lsls	r1, r0, #9
 8000b06:	0042      	lsls	r2, r0, #1
 8000b08:	0fc3      	lsrs	r3, r0, #31
 8000b0a:	0a49      	lsrs	r1, r1, #9
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	0e12      	lsrs	r2, r2, #24
 8000b10:	2a7e      	cmp	r2, #126	; 0x7e
 8000b12:	dd03      	ble.n	8000b1c <__aeabi_f2iz+0x18>
 8000b14:	2a9d      	cmp	r2, #157	; 0x9d
 8000b16:	dd02      	ble.n	8000b1e <__aeabi_f2iz+0x1a>
 8000b18:	4a09      	ldr	r2, [pc, #36]	; (8000b40 <__aeabi_f2iz+0x3c>)
 8000b1a:	1898      	adds	r0, r3, r2
 8000b1c:	4770      	bx	lr
 8000b1e:	2080      	movs	r0, #128	; 0x80
 8000b20:	0400      	lsls	r0, r0, #16
 8000b22:	4301      	orrs	r1, r0
 8000b24:	2a95      	cmp	r2, #149	; 0x95
 8000b26:	dc07      	bgt.n	8000b38 <__aeabi_f2iz+0x34>
 8000b28:	2096      	movs	r0, #150	; 0x96
 8000b2a:	1a82      	subs	r2, r0, r2
 8000b2c:	40d1      	lsrs	r1, r2
 8000b2e:	4248      	negs	r0, r1
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1f3      	bne.n	8000b1c <__aeabi_f2iz+0x18>
 8000b34:	0008      	movs	r0, r1
 8000b36:	e7f1      	b.n	8000b1c <__aeabi_f2iz+0x18>
 8000b38:	3a96      	subs	r2, #150	; 0x96
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	e7f7      	b.n	8000b2e <__aeabi_f2iz+0x2a>
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	7fffffff 	.word	0x7fffffff

08000b44 <__aeabi_i2f>:
 8000b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b46:	2800      	cmp	r0, #0
 8000b48:	d013      	beq.n	8000b72 <__aeabi_i2f+0x2e>
 8000b4a:	17c3      	asrs	r3, r0, #31
 8000b4c:	18c6      	adds	r6, r0, r3
 8000b4e:	405e      	eors	r6, r3
 8000b50:	0fc4      	lsrs	r4, r0, #31
 8000b52:	0030      	movs	r0, r6
 8000b54:	f001 ff50 	bl	80029f8 <__clzsi2>
 8000b58:	239e      	movs	r3, #158	; 0x9e
 8000b5a:	0005      	movs	r5, r0
 8000b5c:	1a1b      	subs	r3, r3, r0
 8000b5e:	2b96      	cmp	r3, #150	; 0x96
 8000b60:	dc0f      	bgt.n	8000b82 <__aeabi_i2f+0x3e>
 8000b62:	2808      	cmp	r0, #8
 8000b64:	dd01      	ble.n	8000b6a <__aeabi_i2f+0x26>
 8000b66:	3d08      	subs	r5, #8
 8000b68:	40ae      	lsls	r6, r5
 8000b6a:	0276      	lsls	r6, r6, #9
 8000b6c:	0a76      	lsrs	r6, r6, #9
 8000b6e:	b2d8      	uxtb	r0, r3
 8000b70:	e002      	b.n	8000b78 <__aeabi_i2f+0x34>
 8000b72:	2400      	movs	r4, #0
 8000b74:	2000      	movs	r0, #0
 8000b76:	2600      	movs	r6, #0
 8000b78:	05c0      	lsls	r0, r0, #23
 8000b7a:	4330      	orrs	r0, r6
 8000b7c:	07e4      	lsls	r4, r4, #31
 8000b7e:	4320      	orrs	r0, r4
 8000b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b82:	2b99      	cmp	r3, #153	; 0x99
 8000b84:	dd0c      	ble.n	8000ba0 <__aeabi_i2f+0x5c>
 8000b86:	2205      	movs	r2, #5
 8000b88:	0031      	movs	r1, r6
 8000b8a:	1a12      	subs	r2, r2, r0
 8000b8c:	40d1      	lsrs	r1, r2
 8000b8e:	000a      	movs	r2, r1
 8000b90:	0001      	movs	r1, r0
 8000b92:	0030      	movs	r0, r6
 8000b94:	311b      	adds	r1, #27
 8000b96:	4088      	lsls	r0, r1
 8000b98:	1e41      	subs	r1, r0, #1
 8000b9a:	4188      	sbcs	r0, r1
 8000b9c:	4302      	orrs	r2, r0
 8000b9e:	0016      	movs	r6, r2
 8000ba0:	2d05      	cmp	r5, #5
 8000ba2:	dc12      	bgt.n	8000bca <__aeabi_i2f+0x86>
 8000ba4:	0031      	movs	r1, r6
 8000ba6:	4f0d      	ldr	r7, [pc, #52]	; (8000bdc <__aeabi_i2f+0x98>)
 8000ba8:	4039      	ands	r1, r7
 8000baa:	0772      	lsls	r2, r6, #29
 8000bac:	d009      	beq.n	8000bc2 <__aeabi_i2f+0x7e>
 8000bae:	200f      	movs	r0, #15
 8000bb0:	4030      	ands	r0, r6
 8000bb2:	2804      	cmp	r0, #4
 8000bb4:	d005      	beq.n	8000bc2 <__aeabi_i2f+0x7e>
 8000bb6:	3104      	adds	r1, #4
 8000bb8:	014a      	lsls	r2, r1, #5
 8000bba:	d502      	bpl.n	8000bc2 <__aeabi_i2f+0x7e>
 8000bbc:	239f      	movs	r3, #159	; 0x9f
 8000bbe:	4039      	ands	r1, r7
 8000bc0:	1b5b      	subs	r3, r3, r5
 8000bc2:	0189      	lsls	r1, r1, #6
 8000bc4:	0a4e      	lsrs	r6, r1, #9
 8000bc6:	b2d8      	uxtb	r0, r3
 8000bc8:	e7d6      	b.n	8000b78 <__aeabi_i2f+0x34>
 8000bca:	1f6a      	subs	r2, r5, #5
 8000bcc:	4096      	lsls	r6, r2
 8000bce:	0031      	movs	r1, r6
 8000bd0:	4f02      	ldr	r7, [pc, #8]	; (8000bdc <__aeabi_i2f+0x98>)
 8000bd2:	4039      	ands	r1, r7
 8000bd4:	0772      	lsls	r2, r6, #29
 8000bd6:	d0f4      	beq.n	8000bc2 <__aeabi_i2f+0x7e>
 8000bd8:	e7e9      	b.n	8000bae <__aeabi_i2f+0x6a>
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	fbffffff 	.word	0xfbffffff

08000be0 <__aeabi_ui2f>:
 8000be0:	b570      	push	{r4, r5, r6, lr}
 8000be2:	1e05      	subs	r5, r0, #0
 8000be4:	d00e      	beq.n	8000c04 <__aeabi_ui2f+0x24>
 8000be6:	f001 ff07 	bl	80029f8 <__clzsi2>
 8000bea:	239e      	movs	r3, #158	; 0x9e
 8000bec:	0004      	movs	r4, r0
 8000bee:	1a1b      	subs	r3, r3, r0
 8000bf0:	2b96      	cmp	r3, #150	; 0x96
 8000bf2:	dc0c      	bgt.n	8000c0e <__aeabi_ui2f+0x2e>
 8000bf4:	2808      	cmp	r0, #8
 8000bf6:	dd01      	ble.n	8000bfc <__aeabi_ui2f+0x1c>
 8000bf8:	3c08      	subs	r4, #8
 8000bfa:	40a5      	lsls	r5, r4
 8000bfc:	026d      	lsls	r5, r5, #9
 8000bfe:	0a6d      	lsrs	r5, r5, #9
 8000c00:	b2d8      	uxtb	r0, r3
 8000c02:	e001      	b.n	8000c08 <__aeabi_ui2f+0x28>
 8000c04:	2000      	movs	r0, #0
 8000c06:	2500      	movs	r5, #0
 8000c08:	05c0      	lsls	r0, r0, #23
 8000c0a:	4328      	orrs	r0, r5
 8000c0c:	bd70      	pop	{r4, r5, r6, pc}
 8000c0e:	2b99      	cmp	r3, #153	; 0x99
 8000c10:	dd09      	ble.n	8000c26 <__aeabi_ui2f+0x46>
 8000c12:	0002      	movs	r2, r0
 8000c14:	0029      	movs	r1, r5
 8000c16:	321b      	adds	r2, #27
 8000c18:	4091      	lsls	r1, r2
 8000c1a:	1e4a      	subs	r2, r1, #1
 8000c1c:	4191      	sbcs	r1, r2
 8000c1e:	2205      	movs	r2, #5
 8000c20:	1a12      	subs	r2, r2, r0
 8000c22:	40d5      	lsrs	r5, r2
 8000c24:	430d      	orrs	r5, r1
 8000c26:	2c05      	cmp	r4, #5
 8000c28:	dc12      	bgt.n	8000c50 <__aeabi_ui2f+0x70>
 8000c2a:	0029      	movs	r1, r5
 8000c2c:	4e0c      	ldr	r6, [pc, #48]	; (8000c60 <__aeabi_ui2f+0x80>)
 8000c2e:	4031      	ands	r1, r6
 8000c30:	076a      	lsls	r2, r5, #29
 8000c32:	d009      	beq.n	8000c48 <__aeabi_ui2f+0x68>
 8000c34:	200f      	movs	r0, #15
 8000c36:	4028      	ands	r0, r5
 8000c38:	2804      	cmp	r0, #4
 8000c3a:	d005      	beq.n	8000c48 <__aeabi_ui2f+0x68>
 8000c3c:	3104      	adds	r1, #4
 8000c3e:	014a      	lsls	r2, r1, #5
 8000c40:	d502      	bpl.n	8000c48 <__aeabi_ui2f+0x68>
 8000c42:	239f      	movs	r3, #159	; 0x9f
 8000c44:	4031      	ands	r1, r6
 8000c46:	1b1b      	subs	r3, r3, r4
 8000c48:	0189      	lsls	r1, r1, #6
 8000c4a:	0a4d      	lsrs	r5, r1, #9
 8000c4c:	b2d8      	uxtb	r0, r3
 8000c4e:	e7db      	b.n	8000c08 <__aeabi_ui2f+0x28>
 8000c50:	1f62      	subs	r2, r4, #5
 8000c52:	4095      	lsls	r5, r2
 8000c54:	0029      	movs	r1, r5
 8000c56:	4e02      	ldr	r6, [pc, #8]	; (8000c60 <__aeabi_ui2f+0x80>)
 8000c58:	4031      	ands	r1, r6
 8000c5a:	076a      	lsls	r2, r5, #29
 8000c5c:	d0f4      	beq.n	8000c48 <__aeabi_ui2f+0x68>
 8000c5e:	e7e9      	b.n	8000c34 <__aeabi_ui2f+0x54>
 8000c60:	fbffffff 	.word	0xfbffffff

08000c64 <__aeabi_dadd>:
 8000c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c66:	464f      	mov	r7, r9
 8000c68:	4646      	mov	r6, r8
 8000c6a:	46d6      	mov	lr, sl
 8000c6c:	000d      	movs	r5, r1
 8000c6e:	0004      	movs	r4, r0
 8000c70:	b5c0      	push	{r6, r7, lr}
 8000c72:	001f      	movs	r7, r3
 8000c74:	0011      	movs	r1, r2
 8000c76:	0328      	lsls	r0, r5, #12
 8000c78:	0f62      	lsrs	r2, r4, #29
 8000c7a:	0a40      	lsrs	r0, r0, #9
 8000c7c:	4310      	orrs	r0, r2
 8000c7e:	007a      	lsls	r2, r7, #1
 8000c80:	0d52      	lsrs	r2, r2, #21
 8000c82:	00e3      	lsls	r3, r4, #3
 8000c84:	033c      	lsls	r4, r7, #12
 8000c86:	4691      	mov	r9, r2
 8000c88:	0a64      	lsrs	r4, r4, #9
 8000c8a:	0ffa      	lsrs	r2, r7, #31
 8000c8c:	0f4f      	lsrs	r7, r1, #29
 8000c8e:	006e      	lsls	r6, r5, #1
 8000c90:	4327      	orrs	r7, r4
 8000c92:	4692      	mov	sl, r2
 8000c94:	46b8      	mov	r8, r7
 8000c96:	0d76      	lsrs	r6, r6, #21
 8000c98:	0fed      	lsrs	r5, r5, #31
 8000c9a:	00c9      	lsls	r1, r1, #3
 8000c9c:	4295      	cmp	r5, r2
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_dadd+0x3e>
 8000ca0:	e099      	b.n	8000dd6 <__aeabi_dadd+0x172>
 8000ca2:	464c      	mov	r4, r9
 8000ca4:	1b34      	subs	r4, r6, r4
 8000ca6:	46a4      	mov	ip, r4
 8000ca8:	2c00      	cmp	r4, #0
 8000caa:	dc00      	bgt.n	8000cae <__aeabi_dadd+0x4a>
 8000cac:	e07c      	b.n	8000da8 <__aeabi_dadd+0x144>
 8000cae:	464a      	mov	r2, r9
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dadd+0x52>
 8000cb4:	e0b8      	b.n	8000e28 <__aeabi_dadd+0x1c4>
 8000cb6:	4ac5      	ldr	r2, [pc, #788]	; (8000fcc <__aeabi_dadd+0x368>)
 8000cb8:	4296      	cmp	r6, r2
 8000cba:	d100      	bne.n	8000cbe <__aeabi_dadd+0x5a>
 8000cbc:	e11c      	b.n	8000ef8 <__aeabi_dadd+0x294>
 8000cbe:	2280      	movs	r2, #128	; 0x80
 8000cc0:	003c      	movs	r4, r7
 8000cc2:	0412      	lsls	r2, r2, #16
 8000cc4:	4314      	orrs	r4, r2
 8000cc6:	46a0      	mov	r8, r4
 8000cc8:	4662      	mov	r2, ip
 8000cca:	2a38      	cmp	r2, #56	; 0x38
 8000ccc:	dd00      	ble.n	8000cd0 <__aeabi_dadd+0x6c>
 8000cce:	e161      	b.n	8000f94 <__aeabi_dadd+0x330>
 8000cd0:	2a1f      	cmp	r2, #31
 8000cd2:	dd00      	ble.n	8000cd6 <__aeabi_dadd+0x72>
 8000cd4:	e1cc      	b.n	8001070 <__aeabi_dadd+0x40c>
 8000cd6:	4664      	mov	r4, ip
 8000cd8:	2220      	movs	r2, #32
 8000cda:	1b12      	subs	r2, r2, r4
 8000cdc:	4644      	mov	r4, r8
 8000cde:	4094      	lsls	r4, r2
 8000ce0:	000f      	movs	r7, r1
 8000ce2:	46a1      	mov	r9, r4
 8000ce4:	4664      	mov	r4, ip
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	40e7      	lsrs	r7, r4
 8000cea:	464c      	mov	r4, r9
 8000cec:	1e4a      	subs	r2, r1, #1
 8000cee:	4191      	sbcs	r1, r2
 8000cf0:	433c      	orrs	r4, r7
 8000cf2:	4642      	mov	r2, r8
 8000cf4:	4321      	orrs	r1, r4
 8000cf6:	4664      	mov	r4, ip
 8000cf8:	40e2      	lsrs	r2, r4
 8000cfa:	1a80      	subs	r0, r0, r2
 8000cfc:	1a5c      	subs	r4, r3, r1
 8000cfe:	42a3      	cmp	r3, r4
 8000d00:	419b      	sbcs	r3, r3
 8000d02:	425f      	negs	r7, r3
 8000d04:	1bc7      	subs	r7, r0, r7
 8000d06:	023b      	lsls	r3, r7, #8
 8000d08:	d400      	bmi.n	8000d0c <__aeabi_dadd+0xa8>
 8000d0a:	e0d0      	b.n	8000eae <__aeabi_dadd+0x24a>
 8000d0c:	027f      	lsls	r7, r7, #9
 8000d0e:	0a7f      	lsrs	r7, r7, #9
 8000d10:	2f00      	cmp	r7, #0
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dadd+0xb2>
 8000d14:	e0ff      	b.n	8000f16 <__aeabi_dadd+0x2b2>
 8000d16:	0038      	movs	r0, r7
 8000d18:	f001 fe6e 	bl	80029f8 <__clzsi2>
 8000d1c:	0001      	movs	r1, r0
 8000d1e:	3908      	subs	r1, #8
 8000d20:	2320      	movs	r3, #32
 8000d22:	0022      	movs	r2, r4
 8000d24:	1a5b      	subs	r3, r3, r1
 8000d26:	408f      	lsls	r7, r1
 8000d28:	40da      	lsrs	r2, r3
 8000d2a:	408c      	lsls	r4, r1
 8000d2c:	4317      	orrs	r7, r2
 8000d2e:	42b1      	cmp	r1, r6
 8000d30:	da00      	bge.n	8000d34 <__aeabi_dadd+0xd0>
 8000d32:	e0ff      	b.n	8000f34 <__aeabi_dadd+0x2d0>
 8000d34:	1b89      	subs	r1, r1, r6
 8000d36:	1c4b      	adds	r3, r1, #1
 8000d38:	2b1f      	cmp	r3, #31
 8000d3a:	dd00      	ble.n	8000d3e <__aeabi_dadd+0xda>
 8000d3c:	e0a8      	b.n	8000e90 <__aeabi_dadd+0x22c>
 8000d3e:	2220      	movs	r2, #32
 8000d40:	0039      	movs	r1, r7
 8000d42:	1ad2      	subs	r2, r2, r3
 8000d44:	0020      	movs	r0, r4
 8000d46:	4094      	lsls	r4, r2
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	40d8      	lsrs	r0, r3
 8000d4c:	1e62      	subs	r2, r4, #1
 8000d4e:	4194      	sbcs	r4, r2
 8000d50:	40df      	lsrs	r7, r3
 8000d52:	2600      	movs	r6, #0
 8000d54:	4301      	orrs	r1, r0
 8000d56:	430c      	orrs	r4, r1
 8000d58:	0763      	lsls	r3, r4, #29
 8000d5a:	d009      	beq.n	8000d70 <__aeabi_dadd+0x10c>
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	4023      	ands	r3, r4
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	d005      	beq.n	8000d70 <__aeabi_dadd+0x10c>
 8000d64:	1d23      	adds	r3, r4, #4
 8000d66:	42a3      	cmp	r3, r4
 8000d68:	41a4      	sbcs	r4, r4
 8000d6a:	4264      	negs	r4, r4
 8000d6c:	193f      	adds	r7, r7, r4
 8000d6e:	001c      	movs	r4, r3
 8000d70:	023b      	lsls	r3, r7, #8
 8000d72:	d400      	bmi.n	8000d76 <__aeabi_dadd+0x112>
 8000d74:	e09e      	b.n	8000eb4 <__aeabi_dadd+0x250>
 8000d76:	4b95      	ldr	r3, [pc, #596]	; (8000fcc <__aeabi_dadd+0x368>)
 8000d78:	3601      	adds	r6, #1
 8000d7a:	429e      	cmp	r6, r3
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_dadd+0x11c>
 8000d7e:	e0b7      	b.n	8000ef0 <__aeabi_dadd+0x28c>
 8000d80:	4a93      	ldr	r2, [pc, #588]	; (8000fd0 <__aeabi_dadd+0x36c>)
 8000d82:	08e4      	lsrs	r4, r4, #3
 8000d84:	4017      	ands	r7, r2
 8000d86:	077b      	lsls	r3, r7, #29
 8000d88:	0571      	lsls	r1, r6, #21
 8000d8a:	027f      	lsls	r7, r7, #9
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	0b3f      	lsrs	r7, r7, #12
 8000d90:	0d4a      	lsrs	r2, r1, #21
 8000d92:	0512      	lsls	r2, r2, #20
 8000d94:	433a      	orrs	r2, r7
 8000d96:	07ed      	lsls	r5, r5, #31
 8000d98:	432a      	orrs	r2, r5
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	0011      	movs	r1, r2
 8000d9e:	bce0      	pop	{r5, r6, r7}
 8000da0:	46ba      	mov	sl, r7
 8000da2:	46b1      	mov	r9, r6
 8000da4:	46a8      	mov	r8, r5
 8000da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da8:	2c00      	cmp	r4, #0
 8000daa:	d04b      	beq.n	8000e44 <__aeabi_dadd+0x1e0>
 8000dac:	464c      	mov	r4, r9
 8000dae:	1ba4      	subs	r4, r4, r6
 8000db0:	46a4      	mov	ip, r4
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d000      	beq.n	8000db8 <__aeabi_dadd+0x154>
 8000db6:	e123      	b.n	8001000 <__aeabi_dadd+0x39c>
 8000db8:	0004      	movs	r4, r0
 8000dba:	431c      	orrs	r4, r3
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_dadd+0x15c>
 8000dbe:	e1af      	b.n	8001120 <__aeabi_dadd+0x4bc>
 8000dc0:	4662      	mov	r2, ip
 8000dc2:	1e54      	subs	r4, r2, #1
 8000dc4:	2a01      	cmp	r2, #1
 8000dc6:	d100      	bne.n	8000dca <__aeabi_dadd+0x166>
 8000dc8:	e215      	b.n	80011f6 <__aeabi_dadd+0x592>
 8000dca:	4d80      	ldr	r5, [pc, #512]	; (8000fcc <__aeabi_dadd+0x368>)
 8000dcc:	45ac      	cmp	ip, r5
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_dadd+0x16e>
 8000dd0:	e1c8      	b.n	8001164 <__aeabi_dadd+0x500>
 8000dd2:	46a4      	mov	ip, r4
 8000dd4:	e11b      	b.n	800100e <__aeabi_dadd+0x3aa>
 8000dd6:	464a      	mov	r2, r9
 8000dd8:	1ab2      	subs	r2, r6, r2
 8000dda:	4694      	mov	ip, r2
 8000ddc:	2a00      	cmp	r2, #0
 8000dde:	dc00      	bgt.n	8000de2 <__aeabi_dadd+0x17e>
 8000de0:	e0ac      	b.n	8000f3c <__aeabi_dadd+0x2d8>
 8000de2:	464a      	mov	r2, r9
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	d043      	beq.n	8000e70 <__aeabi_dadd+0x20c>
 8000de8:	4a78      	ldr	r2, [pc, #480]	; (8000fcc <__aeabi_dadd+0x368>)
 8000dea:	4296      	cmp	r6, r2
 8000dec:	d100      	bne.n	8000df0 <__aeabi_dadd+0x18c>
 8000dee:	e1af      	b.n	8001150 <__aeabi_dadd+0x4ec>
 8000df0:	2280      	movs	r2, #128	; 0x80
 8000df2:	003c      	movs	r4, r7
 8000df4:	0412      	lsls	r2, r2, #16
 8000df6:	4314      	orrs	r4, r2
 8000df8:	46a0      	mov	r8, r4
 8000dfa:	4662      	mov	r2, ip
 8000dfc:	2a38      	cmp	r2, #56	; 0x38
 8000dfe:	dc67      	bgt.n	8000ed0 <__aeabi_dadd+0x26c>
 8000e00:	2a1f      	cmp	r2, #31
 8000e02:	dc00      	bgt.n	8000e06 <__aeabi_dadd+0x1a2>
 8000e04:	e15f      	b.n	80010c6 <__aeabi_dadd+0x462>
 8000e06:	4647      	mov	r7, r8
 8000e08:	3a20      	subs	r2, #32
 8000e0a:	40d7      	lsrs	r7, r2
 8000e0c:	4662      	mov	r2, ip
 8000e0e:	2a20      	cmp	r2, #32
 8000e10:	d005      	beq.n	8000e1e <__aeabi_dadd+0x1ba>
 8000e12:	4664      	mov	r4, ip
 8000e14:	2240      	movs	r2, #64	; 0x40
 8000e16:	1b12      	subs	r2, r2, r4
 8000e18:	4644      	mov	r4, r8
 8000e1a:	4094      	lsls	r4, r2
 8000e1c:	4321      	orrs	r1, r4
 8000e1e:	1e4a      	subs	r2, r1, #1
 8000e20:	4191      	sbcs	r1, r2
 8000e22:	000c      	movs	r4, r1
 8000e24:	433c      	orrs	r4, r7
 8000e26:	e057      	b.n	8000ed8 <__aeabi_dadd+0x274>
 8000e28:	003a      	movs	r2, r7
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_dadd+0x1cc>
 8000e2e:	e105      	b.n	800103c <__aeabi_dadd+0x3d8>
 8000e30:	0022      	movs	r2, r4
 8000e32:	3a01      	subs	r2, #1
 8000e34:	2c01      	cmp	r4, #1
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dadd+0x1d6>
 8000e38:	e182      	b.n	8001140 <__aeabi_dadd+0x4dc>
 8000e3a:	4c64      	ldr	r4, [pc, #400]	; (8000fcc <__aeabi_dadd+0x368>)
 8000e3c:	45a4      	cmp	ip, r4
 8000e3e:	d05b      	beq.n	8000ef8 <__aeabi_dadd+0x294>
 8000e40:	4694      	mov	ip, r2
 8000e42:	e741      	b.n	8000cc8 <__aeabi_dadd+0x64>
 8000e44:	4c63      	ldr	r4, [pc, #396]	; (8000fd4 <__aeabi_dadd+0x370>)
 8000e46:	1c77      	adds	r7, r6, #1
 8000e48:	4227      	tst	r7, r4
 8000e4a:	d000      	beq.n	8000e4e <__aeabi_dadd+0x1ea>
 8000e4c:	e0c4      	b.n	8000fd8 <__aeabi_dadd+0x374>
 8000e4e:	0004      	movs	r4, r0
 8000e50:	431c      	orrs	r4, r3
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d000      	beq.n	8000e58 <__aeabi_dadd+0x1f4>
 8000e56:	e169      	b.n	800112c <__aeabi_dadd+0x4c8>
 8000e58:	2c00      	cmp	r4, #0
 8000e5a:	d100      	bne.n	8000e5e <__aeabi_dadd+0x1fa>
 8000e5c:	e1bf      	b.n	80011de <__aeabi_dadd+0x57a>
 8000e5e:	4644      	mov	r4, r8
 8000e60:	430c      	orrs	r4, r1
 8000e62:	d000      	beq.n	8000e66 <__aeabi_dadd+0x202>
 8000e64:	e1d0      	b.n	8001208 <__aeabi_dadd+0x5a4>
 8000e66:	0742      	lsls	r2, r0, #29
 8000e68:	08db      	lsrs	r3, r3, #3
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	08c0      	lsrs	r0, r0, #3
 8000e6e:	e029      	b.n	8000ec4 <__aeabi_dadd+0x260>
 8000e70:	003a      	movs	r2, r7
 8000e72:	430a      	orrs	r2, r1
 8000e74:	d100      	bne.n	8000e78 <__aeabi_dadd+0x214>
 8000e76:	e170      	b.n	800115a <__aeabi_dadd+0x4f6>
 8000e78:	4662      	mov	r2, ip
 8000e7a:	4664      	mov	r4, ip
 8000e7c:	3a01      	subs	r2, #1
 8000e7e:	2c01      	cmp	r4, #1
 8000e80:	d100      	bne.n	8000e84 <__aeabi_dadd+0x220>
 8000e82:	e0e0      	b.n	8001046 <__aeabi_dadd+0x3e2>
 8000e84:	4c51      	ldr	r4, [pc, #324]	; (8000fcc <__aeabi_dadd+0x368>)
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d100      	bne.n	8000e8c <__aeabi_dadd+0x228>
 8000e8a:	e161      	b.n	8001150 <__aeabi_dadd+0x4ec>
 8000e8c:	4694      	mov	ip, r2
 8000e8e:	e7b4      	b.n	8000dfa <__aeabi_dadd+0x196>
 8000e90:	003a      	movs	r2, r7
 8000e92:	391f      	subs	r1, #31
 8000e94:	40ca      	lsrs	r2, r1
 8000e96:	0011      	movs	r1, r2
 8000e98:	2b20      	cmp	r3, #32
 8000e9a:	d003      	beq.n	8000ea4 <__aeabi_dadd+0x240>
 8000e9c:	2240      	movs	r2, #64	; 0x40
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	409f      	lsls	r7, r3
 8000ea2:	433c      	orrs	r4, r7
 8000ea4:	1e63      	subs	r3, r4, #1
 8000ea6:	419c      	sbcs	r4, r3
 8000ea8:	2700      	movs	r7, #0
 8000eaa:	2600      	movs	r6, #0
 8000eac:	430c      	orrs	r4, r1
 8000eae:	0763      	lsls	r3, r4, #29
 8000eb0:	d000      	beq.n	8000eb4 <__aeabi_dadd+0x250>
 8000eb2:	e753      	b.n	8000d5c <__aeabi_dadd+0xf8>
 8000eb4:	46b4      	mov	ip, r6
 8000eb6:	08e4      	lsrs	r4, r4, #3
 8000eb8:	077b      	lsls	r3, r7, #29
 8000eba:	4323      	orrs	r3, r4
 8000ebc:	08f8      	lsrs	r0, r7, #3
 8000ebe:	4a43      	ldr	r2, [pc, #268]	; (8000fcc <__aeabi_dadd+0x368>)
 8000ec0:	4594      	cmp	ip, r2
 8000ec2:	d01d      	beq.n	8000f00 <__aeabi_dadd+0x29c>
 8000ec4:	4662      	mov	r2, ip
 8000ec6:	0307      	lsls	r7, r0, #12
 8000ec8:	0552      	lsls	r2, r2, #21
 8000eca:	0b3f      	lsrs	r7, r7, #12
 8000ecc:	0d52      	lsrs	r2, r2, #21
 8000ece:	e760      	b.n	8000d92 <__aeabi_dadd+0x12e>
 8000ed0:	4644      	mov	r4, r8
 8000ed2:	430c      	orrs	r4, r1
 8000ed4:	1e62      	subs	r2, r4, #1
 8000ed6:	4194      	sbcs	r4, r2
 8000ed8:	18e4      	adds	r4, r4, r3
 8000eda:	429c      	cmp	r4, r3
 8000edc:	419b      	sbcs	r3, r3
 8000ede:	425f      	negs	r7, r3
 8000ee0:	183f      	adds	r7, r7, r0
 8000ee2:	023b      	lsls	r3, r7, #8
 8000ee4:	d5e3      	bpl.n	8000eae <__aeabi_dadd+0x24a>
 8000ee6:	4b39      	ldr	r3, [pc, #228]	; (8000fcc <__aeabi_dadd+0x368>)
 8000ee8:	3601      	adds	r6, #1
 8000eea:	429e      	cmp	r6, r3
 8000eec:	d000      	beq.n	8000ef0 <__aeabi_dadd+0x28c>
 8000eee:	e0b5      	b.n	800105c <__aeabi_dadd+0x3f8>
 8000ef0:	0032      	movs	r2, r6
 8000ef2:	2700      	movs	r7, #0
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	e74c      	b.n	8000d92 <__aeabi_dadd+0x12e>
 8000ef8:	0742      	lsls	r2, r0, #29
 8000efa:	08db      	lsrs	r3, r3, #3
 8000efc:	4313      	orrs	r3, r2
 8000efe:	08c0      	lsrs	r0, r0, #3
 8000f00:	001a      	movs	r2, r3
 8000f02:	4302      	orrs	r2, r0
 8000f04:	d100      	bne.n	8000f08 <__aeabi_dadd+0x2a4>
 8000f06:	e1e1      	b.n	80012cc <__aeabi_dadd+0x668>
 8000f08:	2780      	movs	r7, #128	; 0x80
 8000f0a:	033f      	lsls	r7, r7, #12
 8000f0c:	4307      	orrs	r7, r0
 8000f0e:	033f      	lsls	r7, r7, #12
 8000f10:	4a2e      	ldr	r2, [pc, #184]	; (8000fcc <__aeabi_dadd+0x368>)
 8000f12:	0b3f      	lsrs	r7, r7, #12
 8000f14:	e73d      	b.n	8000d92 <__aeabi_dadd+0x12e>
 8000f16:	0020      	movs	r0, r4
 8000f18:	f001 fd6e 	bl	80029f8 <__clzsi2>
 8000f1c:	0001      	movs	r1, r0
 8000f1e:	3118      	adds	r1, #24
 8000f20:	291f      	cmp	r1, #31
 8000f22:	dc00      	bgt.n	8000f26 <__aeabi_dadd+0x2c2>
 8000f24:	e6fc      	b.n	8000d20 <__aeabi_dadd+0xbc>
 8000f26:	3808      	subs	r0, #8
 8000f28:	4084      	lsls	r4, r0
 8000f2a:	0027      	movs	r7, r4
 8000f2c:	2400      	movs	r4, #0
 8000f2e:	42b1      	cmp	r1, r6
 8000f30:	db00      	blt.n	8000f34 <__aeabi_dadd+0x2d0>
 8000f32:	e6ff      	b.n	8000d34 <__aeabi_dadd+0xd0>
 8000f34:	4a26      	ldr	r2, [pc, #152]	; (8000fd0 <__aeabi_dadd+0x36c>)
 8000f36:	1a76      	subs	r6, r6, r1
 8000f38:	4017      	ands	r7, r2
 8000f3a:	e70d      	b.n	8000d58 <__aeabi_dadd+0xf4>
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	d02f      	beq.n	8000fa0 <__aeabi_dadd+0x33c>
 8000f40:	464a      	mov	r2, r9
 8000f42:	1b92      	subs	r2, r2, r6
 8000f44:	4694      	mov	ip, r2
 8000f46:	2e00      	cmp	r6, #0
 8000f48:	d100      	bne.n	8000f4c <__aeabi_dadd+0x2e8>
 8000f4a:	e0ad      	b.n	80010a8 <__aeabi_dadd+0x444>
 8000f4c:	4a1f      	ldr	r2, [pc, #124]	; (8000fcc <__aeabi_dadd+0x368>)
 8000f4e:	4591      	cmp	r9, r2
 8000f50:	d100      	bne.n	8000f54 <__aeabi_dadd+0x2f0>
 8000f52:	e10f      	b.n	8001174 <__aeabi_dadd+0x510>
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	0412      	lsls	r2, r2, #16
 8000f58:	4310      	orrs	r0, r2
 8000f5a:	4662      	mov	r2, ip
 8000f5c:	2a38      	cmp	r2, #56	; 0x38
 8000f5e:	dd00      	ble.n	8000f62 <__aeabi_dadd+0x2fe>
 8000f60:	e10f      	b.n	8001182 <__aeabi_dadd+0x51e>
 8000f62:	2a1f      	cmp	r2, #31
 8000f64:	dd00      	ble.n	8000f68 <__aeabi_dadd+0x304>
 8000f66:	e180      	b.n	800126a <__aeabi_dadd+0x606>
 8000f68:	4664      	mov	r4, ip
 8000f6a:	2220      	movs	r2, #32
 8000f6c:	001e      	movs	r6, r3
 8000f6e:	1b12      	subs	r2, r2, r4
 8000f70:	4667      	mov	r7, ip
 8000f72:	0004      	movs	r4, r0
 8000f74:	4093      	lsls	r3, r2
 8000f76:	4094      	lsls	r4, r2
 8000f78:	40fe      	lsrs	r6, r7
 8000f7a:	1e5a      	subs	r2, r3, #1
 8000f7c:	4193      	sbcs	r3, r2
 8000f7e:	40f8      	lsrs	r0, r7
 8000f80:	4334      	orrs	r4, r6
 8000f82:	431c      	orrs	r4, r3
 8000f84:	4480      	add	r8, r0
 8000f86:	1864      	adds	r4, r4, r1
 8000f88:	428c      	cmp	r4, r1
 8000f8a:	41bf      	sbcs	r7, r7
 8000f8c:	427f      	negs	r7, r7
 8000f8e:	464e      	mov	r6, r9
 8000f90:	4447      	add	r7, r8
 8000f92:	e7a6      	b.n	8000ee2 <__aeabi_dadd+0x27e>
 8000f94:	4642      	mov	r2, r8
 8000f96:	430a      	orrs	r2, r1
 8000f98:	0011      	movs	r1, r2
 8000f9a:	1e4a      	subs	r2, r1, #1
 8000f9c:	4191      	sbcs	r1, r2
 8000f9e:	e6ad      	b.n	8000cfc <__aeabi_dadd+0x98>
 8000fa0:	4c0c      	ldr	r4, [pc, #48]	; (8000fd4 <__aeabi_dadd+0x370>)
 8000fa2:	1c72      	adds	r2, r6, #1
 8000fa4:	4222      	tst	r2, r4
 8000fa6:	d000      	beq.n	8000faa <__aeabi_dadd+0x346>
 8000fa8:	e0a1      	b.n	80010ee <__aeabi_dadd+0x48a>
 8000faa:	0002      	movs	r2, r0
 8000fac:	431a      	orrs	r2, r3
 8000fae:	2e00      	cmp	r6, #0
 8000fb0:	d000      	beq.n	8000fb4 <__aeabi_dadd+0x350>
 8000fb2:	e0fa      	b.n	80011aa <__aeabi_dadd+0x546>
 8000fb4:	2a00      	cmp	r2, #0
 8000fb6:	d100      	bne.n	8000fba <__aeabi_dadd+0x356>
 8000fb8:	e145      	b.n	8001246 <__aeabi_dadd+0x5e2>
 8000fba:	003a      	movs	r2, r7
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	d000      	beq.n	8000fc2 <__aeabi_dadd+0x35e>
 8000fc0:	e146      	b.n	8001250 <__aeabi_dadd+0x5ec>
 8000fc2:	0742      	lsls	r2, r0, #29
 8000fc4:	08db      	lsrs	r3, r3, #3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	08c0      	lsrs	r0, r0, #3
 8000fca:	e77b      	b.n	8000ec4 <__aeabi_dadd+0x260>
 8000fcc:	000007ff 	.word	0x000007ff
 8000fd0:	ff7fffff 	.word	0xff7fffff
 8000fd4:	000007fe 	.word	0x000007fe
 8000fd8:	4647      	mov	r7, r8
 8000fda:	1a5c      	subs	r4, r3, r1
 8000fdc:	1bc2      	subs	r2, r0, r7
 8000fde:	42a3      	cmp	r3, r4
 8000fe0:	41bf      	sbcs	r7, r7
 8000fe2:	427f      	negs	r7, r7
 8000fe4:	46b9      	mov	r9, r7
 8000fe6:	0017      	movs	r7, r2
 8000fe8:	464a      	mov	r2, r9
 8000fea:	1abf      	subs	r7, r7, r2
 8000fec:	023a      	lsls	r2, r7, #8
 8000fee:	d500      	bpl.n	8000ff2 <__aeabi_dadd+0x38e>
 8000ff0:	e08d      	b.n	800110e <__aeabi_dadd+0x4aa>
 8000ff2:	0023      	movs	r3, r4
 8000ff4:	433b      	orrs	r3, r7
 8000ff6:	d000      	beq.n	8000ffa <__aeabi_dadd+0x396>
 8000ff8:	e68a      	b.n	8000d10 <__aeabi_dadd+0xac>
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	2500      	movs	r5, #0
 8000ffe:	e761      	b.n	8000ec4 <__aeabi_dadd+0x260>
 8001000:	4cb4      	ldr	r4, [pc, #720]	; (80012d4 <__aeabi_dadd+0x670>)
 8001002:	45a1      	cmp	r9, r4
 8001004:	d100      	bne.n	8001008 <__aeabi_dadd+0x3a4>
 8001006:	e0ad      	b.n	8001164 <__aeabi_dadd+0x500>
 8001008:	2480      	movs	r4, #128	; 0x80
 800100a:	0424      	lsls	r4, r4, #16
 800100c:	4320      	orrs	r0, r4
 800100e:	4664      	mov	r4, ip
 8001010:	2c38      	cmp	r4, #56	; 0x38
 8001012:	dc3d      	bgt.n	8001090 <__aeabi_dadd+0x42c>
 8001014:	4662      	mov	r2, ip
 8001016:	2c1f      	cmp	r4, #31
 8001018:	dd00      	ble.n	800101c <__aeabi_dadd+0x3b8>
 800101a:	e0b7      	b.n	800118c <__aeabi_dadd+0x528>
 800101c:	2520      	movs	r5, #32
 800101e:	001e      	movs	r6, r3
 8001020:	1b2d      	subs	r5, r5, r4
 8001022:	0004      	movs	r4, r0
 8001024:	40ab      	lsls	r3, r5
 8001026:	40ac      	lsls	r4, r5
 8001028:	40d6      	lsrs	r6, r2
 800102a:	40d0      	lsrs	r0, r2
 800102c:	4642      	mov	r2, r8
 800102e:	1e5d      	subs	r5, r3, #1
 8001030:	41ab      	sbcs	r3, r5
 8001032:	4334      	orrs	r4, r6
 8001034:	1a12      	subs	r2, r2, r0
 8001036:	4690      	mov	r8, r2
 8001038:	4323      	orrs	r3, r4
 800103a:	e02c      	b.n	8001096 <__aeabi_dadd+0x432>
 800103c:	0742      	lsls	r2, r0, #29
 800103e:	08db      	lsrs	r3, r3, #3
 8001040:	4313      	orrs	r3, r2
 8001042:	08c0      	lsrs	r0, r0, #3
 8001044:	e73b      	b.n	8000ebe <__aeabi_dadd+0x25a>
 8001046:	185c      	adds	r4, r3, r1
 8001048:	429c      	cmp	r4, r3
 800104a:	419b      	sbcs	r3, r3
 800104c:	4440      	add	r0, r8
 800104e:	425b      	negs	r3, r3
 8001050:	18c7      	adds	r7, r0, r3
 8001052:	2601      	movs	r6, #1
 8001054:	023b      	lsls	r3, r7, #8
 8001056:	d400      	bmi.n	800105a <__aeabi_dadd+0x3f6>
 8001058:	e729      	b.n	8000eae <__aeabi_dadd+0x24a>
 800105a:	2602      	movs	r6, #2
 800105c:	4a9e      	ldr	r2, [pc, #632]	; (80012d8 <__aeabi_dadd+0x674>)
 800105e:	0863      	lsrs	r3, r4, #1
 8001060:	4017      	ands	r7, r2
 8001062:	2201      	movs	r2, #1
 8001064:	4014      	ands	r4, r2
 8001066:	431c      	orrs	r4, r3
 8001068:	07fb      	lsls	r3, r7, #31
 800106a:	431c      	orrs	r4, r3
 800106c:	087f      	lsrs	r7, r7, #1
 800106e:	e673      	b.n	8000d58 <__aeabi_dadd+0xf4>
 8001070:	4644      	mov	r4, r8
 8001072:	3a20      	subs	r2, #32
 8001074:	40d4      	lsrs	r4, r2
 8001076:	4662      	mov	r2, ip
 8001078:	2a20      	cmp	r2, #32
 800107a:	d005      	beq.n	8001088 <__aeabi_dadd+0x424>
 800107c:	4667      	mov	r7, ip
 800107e:	2240      	movs	r2, #64	; 0x40
 8001080:	1bd2      	subs	r2, r2, r7
 8001082:	4647      	mov	r7, r8
 8001084:	4097      	lsls	r7, r2
 8001086:	4339      	orrs	r1, r7
 8001088:	1e4a      	subs	r2, r1, #1
 800108a:	4191      	sbcs	r1, r2
 800108c:	4321      	orrs	r1, r4
 800108e:	e635      	b.n	8000cfc <__aeabi_dadd+0x98>
 8001090:	4303      	orrs	r3, r0
 8001092:	1e58      	subs	r0, r3, #1
 8001094:	4183      	sbcs	r3, r0
 8001096:	1acc      	subs	r4, r1, r3
 8001098:	42a1      	cmp	r1, r4
 800109a:	41bf      	sbcs	r7, r7
 800109c:	4643      	mov	r3, r8
 800109e:	427f      	negs	r7, r7
 80010a0:	4655      	mov	r5, sl
 80010a2:	464e      	mov	r6, r9
 80010a4:	1bdf      	subs	r7, r3, r7
 80010a6:	e62e      	b.n	8000d06 <__aeabi_dadd+0xa2>
 80010a8:	0002      	movs	r2, r0
 80010aa:	431a      	orrs	r2, r3
 80010ac:	d100      	bne.n	80010b0 <__aeabi_dadd+0x44c>
 80010ae:	e0bd      	b.n	800122c <__aeabi_dadd+0x5c8>
 80010b0:	4662      	mov	r2, ip
 80010b2:	4664      	mov	r4, ip
 80010b4:	3a01      	subs	r2, #1
 80010b6:	2c01      	cmp	r4, #1
 80010b8:	d100      	bne.n	80010bc <__aeabi_dadd+0x458>
 80010ba:	e0e5      	b.n	8001288 <__aeabi_dadd+0x624>
 80010bc:	4c85      	ldr	r4, [pc, #532]	; (80012d4 <__aeabi_dadd+0x670>)
 80010be:	45a4      	cmp	ip, r4
 80010c0:	d058      	beq.n	8001174 <__aeabi_dadd+0x510>
 80010c2:	4694      	mov	ip, r2
 80010c4:	e749      	b.n	8000f5a <__aeabi_dadd+0x2f6>
 80010c6:	4664      	mov	r4, ip
 80010c8:	2220      	movs	r2, #32
 80010ca:	1b12      	subs	r2, r2, r4
 80010cc:	4644      	mov	r4, r8
 80010ce:	4094      	lsls	r4, r2
 80010d0:	000f      	movs	r7, r1
 80010d2:	46a1      	mov	r9, r4
 80010d4:	4664      	mov	r4, ip
 80010d6:	4091      	lsls	r1, r2
 80010d8:	40e7      	lsrs	r7, r4
 80010da:	464c      	mov	r4, r9
 80010dc:	1e4a      	subs	r2, r1, #1
 80010de:	4191      	sbcs	r1, r2
 80010e0:	433c      	orrs	r4, r7
 80010e2:	4642      	mov	r2, r8
 80010e4:	430c      	orrs	r4, r1
 80010e6:	4661      	mov	r1, ip
 80010e8:	40ca      	lsrs	r2, r1
 80010ea:	1880      	adds	r0, r0, r2
 80010ec:	e6f4      	b.n	8000ed8 <__aeabi_dadd+0x274>
 80010ee:	4c79      	ldr	r4, [pc, #484]	; (80012d4 <__aeabi_dadd+0x670>)
 80010f0:	42a2      	cmp	r2, r4
 80010f2:	d100      	bne.n	80010f6 <__aeabi_dadd+0x492>
 80010f4:	e6fd      	b.n	8000ef2 <__aeabi_dadd+0x28e>
 80010f6:	1859      	adds	r1, r3, r1
 80010f8:	4299      	cmp	r1, r3
 80010fa:	419b      	sbcs	r3, r3
 80010fc:	4440      	add	r0, r8
 80010fe:	425f      	negs	r7, r3
 8001100:	19c7      	adds	r7, r0, r7
 8001102:	07fc      	lsls	r4, r7, #31
 8001104:	0849      	lsrs	r1, r1, #1
 8001106:	0016      	movs	r6, r2
 8001108:	430c      	orrs	r4, r1
 800110a:	087f      	lsrs	r7, r7, #1
 800110c:	e6cf      	b.n	8000eae <__aeabi_dadd+0x24a>
 800110e:	1acc      	subs	r4, r1, r3
 8001110:	42a1      	cmp	r1, r4
 8001112:	41bf      	sbcs	r7, r7
 8001114:	4643      	mov	r3, r8
 8001116:	427f      	negs	r7, r7
 8001118:	1a18      	subs	r0, r3, r0
 800111a:	4655      	mov	r5, sl
 800111c:	1bc7      	subs	r7, r0, r7
 800111e:	e5f7      	b.n	8000d10 <__aeabi_dadd+0xac>
 8001120:	08c9      	lsrs	r1, r1, #3
 8001122:	077b      	lsls	r3, r7, #29
 8001124:	4655      	mov	r5, sl
 8001126:	430b      	orrs	r3, r1
 8001128:	08f8      	lsrs	r0, r7, #3
 800112a:	e6c8      	b.n	8000ebe <__aeabi_dadd+0x25a>
 800112c:	2c00      	cmp	r4, #0
 800112e:	d000      	beq.n	8001132 <__aeabi_dadd+0x4ce>
 8001130:	e081      	b.n	8001236 <__aeabi_dadd+0x5d2>
 8001132:	4643      	mov	r3, r8
 8001134:	430b      	orrs	r3, r1
 8001136:	d115      	bne.n	8001164 <__aeabi_dadd+0x500>
 8001138:	2080      	movs	r0, #128	; 0x80
 800113a:	2500      	movs	r5, #0
 800113c:	0300      	lsls	r0, r0, #12
 800113e:	e6e3      	b.n	8000f08 <__aeabi_dadd+0x2a4>
 8001140:	1a5c      	subs	r4, r3, r1
 8001142:	42a3      	cmp	r3, r4
 8001144:	419b      	sbcs	r3, r3
 8001146:	1bc7      	subs	r7, r0, r7
 8001148:	425b      	negs	r3, r3
 800114a:	2601      	movs	r6, #1
 800114c:	1aff      	subs	r7, r7, r3
 800114e:	e5da      	b.n	8000d06 <__aeabi_dadd+0xa2>
 8001150:	0742      	lsls	r2, r0, #29
 8001152:	08db      	lsrs	r3, r3, #3
 8001154:	4313      	orrs	r3, r2
 8001156:	08c0      	lsrs	r0, r0, #3
 8001158:	e6d2      	b.n	8000f00 <__aeabi_dadd+0x29c>
 800115a:	0742      	lsls	r2, r0, #29
 800115c:	08db      	lsrs	r3, r3, #3
 800115e:	4313      	orrs	r3, r2
 8001160:	08c0      	lsrs	r0, r0, #3
 8001162:	e6ac      	b.n	8000ebe <__aeabi_dadd+0x25a>
 8001164:	4643      	mov	r3, r8
 8001166:	4642      	mov	r2, r8
 8001168:	08c9      	lsrs	r1, r1, #3
 800116a:	075b      	lsls	r3, r3, #29
 800116c:	4655      	mov	r5, sl
 800116e:	430b      	orrs	r3, r1
 8001170:	08d0      	lsrs	r0, r2, #3
 8001172:	e6c5      	b.n	8000f00 <__aeabi_dadd+0x29c>
 8001174:	4643      	mov	r3, r8
 8001176:	4642      	mov	r2, r8
 8001178:	075b      	lsls	r3, r3, #29
 800117a:	08c9      	lsrs	r1, r1, #3
 800117c:	430b      	orrs	r3, r1
 800117e:	08d0      	lsrs	r0, r2, #3
 8001180:	e6be      	b.n	8000f00 <__aeabi_dadd+0x29c>
 8001182:	4303      	orrs	r3, r0
 8001184:	001c      	movs	r4, r3
 8001186:	1e63      	subs	r3, r4, #1
 8001188:	419c      	sbcs	r4, r3
 800118a:	e6fc      	b.n	8000f86 <__aeabi_dadd+0x322>
 800118c:	0002      	movs	r2, r0
 800118e:	3c20      	subs	r4, #32
 8001190:	40e2      	lsrs	r2, r4
 8001192:	0014      	movs	r4, r2
 8001194:	4662      	mov	r2, ip
 8001196:	2a20      	cmp	r2, #32
 8001198:	d003      	beq.n	80011a2 <__aeabi_dadd+0x53e>
 800119a:	2540      	movs	r5, #64	; 0x40
 800119c:	1aad      	subs	r5, r5, r2
 800119e:	40a8      	lsls	r0, r5
 80011a0:	4303      	orrs	r3, r0
 80011a2:	1e58      	subs	r0, r3, #1
 80011a4:	4183      	sbcs	r3, r0
 80011a6:	4323      	orrs	r3, r4
 80011a8:	e775      	b.n	8001096 <__aeabi_dadd+0x432>
 80011aa:	2a00      	cmp	r2, #0
 80011ac:	d0e2      	beq.n	8001174 <__aeabi_dadd+0x510>
 80011ae:	003a      	movs	r2, r7
 80011b0:	430a      	orrs	r2, r1
 80011b2:	d0cd      	beq.n	8001150 <__aeabi_dadd+0x4ec>
 80011b4:	0742      	lsls	r2, r0, #29
 80011b6:	08db      	lsrs	r3, r3, #3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	08c0      	lsrs	r0, r0, #3
 80011be:	0312      	lsls	r2, r2, #12
 80011c0:	4210      	tst	r0, r2
 80011c2:	d006      	beq.n	80011d2 <__aeabi_dadd+0x56e>
 80011c4:	08fc      	lsrs	r4, r7, #3
 80011c6:	4214      	tst	r4, r2
 80011c8:	d103      	bne.n	80011d2 <__aeabi_dadd+0x56e>
 80011ca:	0020      	movs	r0, r4
 80011cc:	08cb      	lsrs	r3, r1, #3
 80011ce:	077a      	lsls	r2, r7, #29
 80011d0:	4313      	orrs	r3, r2
 80011d2:	0f5a      	lsrs	r2, r3, #29
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	0752      	lsls	r2, r2, #29
 80011d8:	08db      	lsrs	r3, r3, #3
 80011da:	4313      	orrs	r3, r2
 80011dc:	e690      	b.n	8000f00 <__aeabi_dadd+0x29c>
 80011de:	4643      	mov	r3, r8
 80011e0:	430b      	orrs	r3, r1
 80011e2:	d100      	bne.n	80011e6 <__aeabi_dadd+0x582>
 80011e4:	e709      	b.n	8000ffa <__aeabi_dadd+0x396>
 80011e6:	4643      	mov	r3, r8
 80011e8:	4642      	mov	r2, r8
 80011ea:	08c9      	lsrs	r1, r1, #3
 80011ec:	075b      	lsls	r3, r3, #29
 80011ee:	4655      	mov	r5, sl
 80011f0:	430b      	orrs	r3, r1
 80011f2:	08d0      	lsrs	r0, r2, #3
 80011f4:	e666      	b.n	8000ec4 <__aeabi_dadd+0x260>
 80011f6:	1acc      	subs	r4, r1, r3
 80011f8:	42a1      	cmp	r1, r4
 80011fa:	4189      	sbcs	r1, r1
 80011fc:	1a3f      	subs	r7, r7, r0
 80011fe:	4249      	negs	r1, r1
 8001200:	4655      	mov	r5, sl
 8001202:	2601      	movs	r6, #1
 8001204:	1a7f      	subs	r7, r7, r1
 8001206:	e57e      	b.n	8000d06 <__aeabi_dadd+0xa2>
 8001208:	4642      	mov	r2, r8
 800120a:	1a5c      	subs	r4, r3, r1
 800120c:	1a87      	subs	r7, r0, r2
 800120e:	42a3      	cmp	r3, r4
 8001210:	4192      	sbcs	r2, r2
 8001212:	4252      	negs	r2, r2
 8001214:	1abf      	subs	r7, r7, r2
 8001216:	023a      	lsls	r2, r7, #8
 8001218:	d53d      	bpl.n	8001296 <__aeabi_dadd+0x632>
 800121a:	1acc      	subs	r4, r1, r3
 800121c:	42a1      	cmp	r1, r4
 800121e:	4189      	sbcs	r1, r1
 8001220:	4643      	mov	r3, r8
 8001222:	4249      	negs	r1, r1
 8001224:	1a1f      	subs	r7, r3, r0
 8001226:	4655      	mov	r5, sl
 8001228:	1a7f      	subs	r7, r7, r1
 800122a:	e595      	b.n	8000d58 <__aeabi_dadd+0xf4>
 800122c:	077b      	lsls	r3, r7, #29
 800122e:	08c9      	lsrs	r1, r1, #3
 8001230:	430b      	orrs	r3, r1
 8001232:	08f8      	lsrs	r0, r7, #3
 8001234:	e643      	b.n	8000ebe <__aeabi_dadd+0x25a>
 8001236:	4644      	mov	r4, r8
 8001238:	08db      	lsrs	r3, r3, #3
 800123a:	430c      	orrs	r4, r1
 800123c:	d130      	bne.n	80012a0 <__aeabi_dadd+0x63c>
 800123e:	0742      	lsls	r2, r0, #29
 8001240:	4313      	orrs	r3, r2
 8001242:	08c0      	lsrs	r0, r0, #3
 8001244:	e65c      	b.n	8000f00 <__aeabi_dadd+0x29c>
 8001246:	077b      	lsls	r3, r7, #29
 8001248:	08c9      	lsrs	r1, r1, #3
 800124a:	430b      	orrs	r3, r1
 800124c:	08f8      	lsrs	r0, r7, #3
 800124e:	e639      	b.n	8000ec4 <__aeabi_dadd+0x260>
 8001250:	185c      	adds	r4, r3, r1
 8001252:	429c      	cmp	r4, r3
 8001254:	419b      	sbcs	r3, r3
 8001256:	4440      	add	r0, r8
 8001258:	425b      	negs	r3, r3
 800125a:	18c7      	adds	r7, r0, r3
 800125c:	023b      	lsls	r3, r7, #8
 800125e:	d400      	bmi.n	8001262 <__aeabi_dadd+0x5fe>
 8001260:	e625      	b.n	8000eae <__aeabi_dadd+0x24a>
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <__aeabi_dadd+0x674>)
 8001264:	2601      	movs	r6, #1
 8001266:	401f      	ands	r7, r3
 8001268:	e621      	b.n	8000eae <__aeabi_dadd+0x24a>
 800126a:	0004      	movs	r4, r0
 800126c:	3a20      	subs	r2, #32
 800126e:	40d4      	lsrs	r4, r2
 8001270:	4662      	mov	r2, ip
 8001272:	2a20      	cmp	r2, #32
 8001274:	d004      	beq.n	8001280 <__aeabi_dadd+0x61c>
 8001276:	2240      	movs	r2, #64	; 0x40
 8001278:	4666      	mov	r6, ip
 800127a:	1b92      	subs	r2, r2, r6
 800127c:	4090      	lsls	r0, r2
 800127e:	4303      	orrs	r3, r0
 8001280:	1e5a      	subs	r2, r3, #1
 8001282:	4193      	sbcs	r3, r2
 8001284:	431c      	orrs	r4, r3
 8001286:	e67e      	b.n	8000f86 <__aeabi_dadd+0x322>
 8001288:	185c      	adds	r4, r3, r1
 800128a:	428c      	cmp	r4, r1
 800128c:	4189      	sbcs	r1, r1
 800128e:	4440      	add	r0, r8
 8001290:	4249      	negs	r1, r1
 8001292:	1847      	adds	r7, r0, r1
 8001294:	e6dd      	b.n	8001052 <__aeabi_dadd+0x3ee>
 8001296:	0023      	movs	r3, r4
 8001298:	433b      	orrs	r3, r7
 800129a:	d100      	bne.n	800129e <__aeabi_dadd+0x63a>
 800129c:	e6ad      	b.n	8000ffa <__aeabi_dadd+0x396>
 800129e:	e606      	b.n	8000eae <__aeabi_dadd+0x24a>
 80012a0:	0744      	lsls	r4, r0, #29
 80012a2:	4323      	orrs	r3, r4
 80012a4:	2480      	movs	r4, #128	; 0x80
 80012a6:	08c0      	lsrs	r0, r0, #3
 80012a8:	0324      	lsls	r4, r4, #12
 80012aa:	4220      	tst	r0, r4
 80012ac:	d008      	beq.n	80012c0 <__aeabi_dadd+0x65c>
 80012ae:	4642      	mov	r2, r8
 80012b0:	08d6      	lsrs	r6, r2, #3
 80012b2:	4226      	tst	r6, r4
 80012b4:	d104      	bne.n	80012c0 <__aeabi_dadd+0x65c>
 80012b6:	4655      	mov	r5, sl
 80012b8:	0030      	movs	r0, r6
 80012ba:	08cb      	lsrs	r3, r1, #3
 80012bc:	0751      	lsls	r1, r2, #29
 80012be:	430b      	orrs	r3, r1
 80012c0:	0f5a      	lsrs	r2, r3, #29
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	08db      	lsrs	r3, r3, #3
 80012c6:	0752      	lsls	r2, r2, #29
 80012c8:	4313      	orrs	r3, r2
 80012ca:	e619      	b.n	8000f00 <__aeabi_dadd+0x29c>
 80012cc:	2300      	movs	r3, #0
 80012ce:	4a01      	ldr	r2, [pc, #4]	; (80012d4 <__aeabi_dadd+0x670>)
 80012d0:	001f      	movs	r7, r3
 80012d2:	e55e      	b.n	8000d92 <__aeabi_dadd+0x12e>
 80012d4:	000007ff 	.word	0x000007ff
 80012d8:	ff7fffff 	.word	0xff7fffff

080012dc <__aeabi_ddiv>:
 80012dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012de:	4657      	mov	r7, sl
 80012e0:	464e      	mov	r6, r9
 80012e2:	4645      	mov	r5, r8
 80012e4:	46de      	mov	lr, fp
 80012e6:	b5e0      	push	{r5, r6, r7, lr}
 80012e8:	4681      	mov	r9, r0
 80012ea:	0005      	movs	r5, r0
 80012ec:	030c      	lsls	r4, r1, #12
 80012ee:	0048      	lsls	r0, r1, #1
 80012f0:	4692      	mov	sl, r2
 80012f2:	001f      	movs	r7, r3
 80012f4:	b085      	sub	sp, #20
 80012f6:	0b24      	lsrs	r4, r4, #12
 80012f8:	0d40      	lsrs	r0, r0, #21
 80012fa:	0fce      	lsrs	r6, r1, #31
 80012fc:	2800      	cmp	r0, #0
 80012fe:	d100      	bne.n	8001302 <__aeabi_ddiv+0x26>
 8001300:	e156      	b.n	80015b0 <__aeabi_ddiv+0x2d4>
 8001302:	4bd4      	ldr	r3, [pc, #848]	; (8001654 <__aeabi_ddiv+0x378>)
 8001304:	4298      	cmp	r0, r3
 8001306:	d100      	bne.n	800130a <__aeabi_ddiv+0x2e>
 8001308:	e172      	b.n	80015f0 <__aeabi_ddiv+0x314>
 800130a:	0f6b      	lsrs	r3, r5, #29
 800130c:	00e4      	lsls	r4, r4, #3
 800130e:	431c      	orrs	r4, r3
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	041b      	lsls	r3, r3, #16
 8001314:	4323      	orrs	r3, r4
 8001316:	4698      	mov	r8, r3
 8001318:	4bcf      	ldr	r3, [pc, #828]	; (8001658 <__aeabi_ddiv+0x37c>)
 800131a:	00ed      	lsls	r5, r5, #3
 800131c:	469b      	mov	fp, r3
 800131e:	2300      	movs	r3, #0
 8001320:	4699      	mov	r9, r3
 8001322:	4483      	add	fp, r0
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	033c      	lsls	r4, r7, #12
 8001328:	007b      	lsls	r3, r7, #1
 800132a:	4650      	mov	r0, sl
 800132c:	0b24      	lsrs	r4, r4, #12
 800132e:	0d5b      	lsrs	r3, r3, #21
 8001330:	0fff      	lsrs	r7, r7, #31
 8001332:	2b00      	cmp	r3, #0
 8001334:	d100      	bne.n	8001338 <__aeabi_ddiv+0x5c>
 8001336:	e11f      	b.n	8001578 <__aeabi_ddiv+0x29c>
 8001338:	4ac6      	ldr	r2, [pc, #792]	; (8001654 <__aeabi_ddiv+0x378>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d100      	bne.n	8001340 <__aeabi_ddiv+0x64>
 800133e:	e162      	b.n	8001606 <__aeabi_ddiv+0x32a>
 8001340:	49c5      	ldr	r1, [pc, #788]	; (8001658 <__aeabi_ddiv+0x37c>)
 8001342:	0f42      	lsrs	r2, r0, #29
 8001344:	468c      	mov	ip, r1
 8001346:	00e4      	lsls	r4, r4, #3
 8001348:	4659      	mov	r1, fp
 800134a:	4314      	orrs	r4, r2
 800134c:	2280      	movs	r2, #128	; 0x80
 800134e:	4463      	add	r3, ip
 8001350:	0412      	lsls	r2, r2, #16
 8001352:	1acb      	subs	r3, r1, r3
 8001354:	4314      	orrs	r4, r2
 8001356:	469b      	mov	fp, r3
 8001358:	00c2      	lsls	r2, r0, #3
 800135a:	2000      	movs	r0, #0
 800135c:	0033      	movs	r3, r6
 800135e:	407b      	eors	r3, r7
 8001360:	469a      	mov	sl, r3
 8001362:	464b      	mov	r3, r9
 8001364:	2b0f      	cmp	r3, #15
 8001366:	d827      	bhi.n	80013b8 <__aeabi_ddiv+0xdc>
 8001368:	49bc      	ldr	r1, [pc, #752]	; (800165c <__aeabi_ddiv+0x380>)
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	58cb      	ldr	r3, [r1, r3]
 800136e:	469f      	mov	pc, r3
 8001370:	46b2      	mov	sl, r6
 8001372:	9b00      	ldr	r3, [sp, #0]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d016      	beq.n	80013a6 <__aeabi_ddiv+0xca>
 8001378:	2b03      	cmp	r3, #3
 800137a:	d100      	bne.n	800137e <__aeabi_ddiv+0xa2>
 800137c:	e28e      	b.n	800189c <__aeabi_ddiv+0x5c0>
 800137e:	2b01      	cmp	r3, #1
 8001380:	d000      	beq.n	8001384 <__aeabi_ddiv+0xa8>
 8001382:	e0d9      	b.n	8001538 <__aeabi_ddiv+0x25c>
 8001384:	2300      	movs	r3, #0
 8001386:	2400      	movs	r4, #0
 8001388:	2500      	movs	r5, #0
 800138a:	4652      	mov	r2, sl
 800138c:	051b      	lsls	r3, r3, #20
 800138e:	4323      	orrs	r3, r4
 8001390:	07d2      	lsls	r2, r2, #31
 8001392:	4313      	orrs	r3, r2
 8001394:	0028      	movs	r0, r5
 8001396:	0019      	movs	r1, r3
 8001398:	b005      	add	sp, #20
 800139a:	bcf0      	pop	{r4, r5, r6, r7}
 800139c:	46bb      	mov	fp, r7
 800139e:	46b2      	mov	sl, r6
 80013a0:	46a9      	mov	r9, r5
 80013a2:	46a0      	mov	r8, r4
 80013a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a6:	2400      	movs	r4, #0
 80013a8:	2500      	movs	r5, #0
 80013aa:	4baa      	ldr	r3, [pc, #680]	; (8001654 <__aeabi_ddiv+0x378>)
 80013ac:	e7ed      	b.n	800138a <__aeabi_ddiv+0xae>
 80013ae:	46ba      	mov	sl, r7
 80013b0:	46a0      	mov	r8, r4
 80013b2:	0015      	movs	r5, r2
 80013b4:	9000      	str	r0, [sp, #0]
 80013b6:	e7dc      	b.n	8001372 <__aeabi_ddiv+0x96>
 80013b8:	4544      	cmp	r4, r8
 80013ba:	d200      	bcs.n	80013be <__aeabi_ddiv+0xe2>
 80013bc:	e1c7      	b.n	800174e <__aeabi_ddiv+0x472>
 80013be:	d100      	bne.n	80013c2 <__aeabi_ddiv+0xe6>
 80013c0:	e1c2      	b.n	8001748 <__aeabi_ddiv+0x46c>
 80013c2:	2301      	movs	r3, #1
 80013c4:	425b      	negs	r3, r3
 80013c6:	469c      	mov	ip, r3
 80013c8:	002e      	movs	r6, r5
 80013ca:	4640      	mov	r0, r8
 80013cc:	2500      	movs	r5, #0
 80013ce:	44e3      	add	fp, ip
 80013d0:	0223      	lsls	r3, r4, #8
 80013d2:	0e14      	lsrs	r4, r2, #24
 80013d4:	431c      	orrs	r4, r3
 80013d6:	0c1b      	lsrs	r3, r3, #16
 80013d8:	4699      	mov	r9, r3
 80013da:	0423      	lsls	r3, r4, #16
 80013dc:	0c1f      	lsrs	r7, r3, #16
 80013de:	0212      	lsls	r2, r2, #8
 80013e0:	4649      	mov	r1, r9
 80013e2:	9200      	str	r2, [sp, #0]
 80013e4:	9701      	str	r7, [sp, #4]
 80013e6:	f7fe ff27 	bl	8000238 <__aeabi_uidivmod>
 80013ea:	0002      	movs	r2, r0
 80013ec:	437a      	muls	r2, r7
 80013ee:	040b      	lsls	r3, r1, #16
 80013f0:	0c31      	lsrs	r1, r6, #16
 80013f2:	4680      	mov	r8, r0
 80013f4:	4319      	orrs	r1, r3
 80013f6:	428a      	cmp	r2, r1
 80013f8:	d907      	bls.n	800140a <__aeabi_ddiv+0x12e>
 80013fa:	2301      	movs	r3, #1
 80013fc:	425b      	negs	r3, r3
 80013fe:	469c      	mov	ip, r3
 8001400:	1909      	adds	r1, r1, r4
 8001402:	44e0      	add	r8, ip
 8001404:	428c      	cmp	r4, r1
 8001406:	d800      	bhi.n	800140a <__aeabi_ddiv+0x12e>
 8001408:	e207      	b.n	800181a <__aeabi_ddiv+0x53e>
 800140a:	1a88      	subs	r0, r1, r2
 800140c:	4649      	mov	r1, r9
 800140e:	f7fe ff13 	bl	8000238 <__aeabi_uidivmod>
 8001412:	0409      	lsls	r1, r1, #16
 8001414:	468c      	mov	ip, r1
 8001416:	0431      	lsls	r1, r6, #16
 8001418:	4666      	mov	r6, ip
 800141a:	9a01      	ldr	r2, [sp, #4]
 800141c:	0c09      	lsrs	r1, r1, #16
 800141e:	4342      	muls	r2, r0
 8001420:	0003      	movs	r3, r0
 8001422:	4331      	orrs	r1, r6
 8001424:	428a      	cmp	r2, r1
 8001426:	d904      	bls.n	8001432 <__aeabi_ddiv+0x156>
 8001428:	1909      	adds	r1, r1, r4
 800142a:	3b01      	subs	r3, #1
 800142c:	428c      	cmp	r4, r1
 800142e:	d800      	bhi.n	8001432 <__aeabi_ddiv+0x156>
 8001430:	e1ed      	b.n	800180e <__aeabi_ddiv+0x532>
 8001432:	1a88      	subs	r0, r1, r2
 8001434:	4642      	mov	r2, r8
 8001436:	0412      	lsls	r2, r2, #16
 8001438:	431a      	orrs	r2, r3
 800143a:	4690      	mov	r8, r2
 800143c:	4641      	mov	r1, r8
 800143e:	9b00      	ldr	r3, [sp, #0]
 8001440:	040e      	lsls	r6, r1, #16
 8001442:	0c1b      	lsrs	r3, r3, #16
 8001444:	001f      	movs	r7, r3
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	9b00      	ldr	r3, [sp, #0]
 800144a:	0c36      	lsrs	r6, r6, #16
 800144c:	041b      	lsls	r3, r3, #16
 800144e:	0c19      	lsrs	r1, r3, #16
 8001450:	000b      	movs	r3, r1
 8001452:	4373      	muls	r3, r6
 8001454:	0c12      	lsrs	r2, r2, #16
 8001456:	437e      	muls	r6, r7
 8001458:	9103      	str	r1, [sp, #12]
 800145a:	4351      	muls	r1, r2
 800145c:	437a      	muls	r2, r7
 800145e:	0c1f      	lsrs	r7, r3, #16
 8001460:	46bc      	mov	ip, r7
 8001462:	1876      	adds	r6, r6, r1
 8001464:	4466      	add	r6, ip
 8001466:	42b1      	cmp	r1, r6
 8001468:	d903      	bls.n	8001472 <__aeabi_ddiv+0x196>
 800146a:	2180      	movs	r1, #128	; 0x80
 800146c:	0249      	lsls	r1, r1, #9
 800146e:	468c      	mov	ip, r1
 8001470:	4462      	add	r2, ip
 8001472:	0c31      	lsrs	r1, r6, #16
 8001474:	188a      	adds	r2, r1, r2
 8001476:	0431      	lsls	r1, r6, #16
 8001478:	041e      	lsls	r6, r3, #16
 800147a:	0c36      	lsrs	r6, r6, #16
 800147c:	198e      	adds	r6, r1, r6
 800147e:	4290      	cmp	r0, r2
 8001480:	d302      	bcc.n	8001488 <__aeabi_ddiv+0x1ac>
 8001482:	d112      	bne.n	80014aa <__aeabi_ddiv+0x1ce>
 8001484:	42b5      	cmp	r5, r6
 8001486:	d210      	bcs.n	80014aa <__aeabi_ddiv+0x1ce>
 8001488:	4643      	mov	r3, r8
 800148a:	1e59      	subs	r1, r3, #1
 800148c:	9b00      	ldr	r3, [sp, #0]
 800148e:	469c      	mov	ip, r3
 8001490:	4465      	add	r5, ip
 8001492:	001f      	movs	r7, r3
 8001494:	429d      	cmp	r5, r3
 8001496:	419b      	sbcs	r3, r3
 8001498:	425b      	negs	r3, r3
 800149a:	191b      	adds	r3, r3, r4
 800149c:	18c0      	adds	r0, r0, r3
 800149e:	4284      	cmp	r4, r0
 80014a0:	d200      	bcs.n	80014a4 <__aeabi_ddiv+0x1c8>
 80014a2:	e1a0      	b.n	80017e6 <__aeabi_ddiv+0x50a>
 80014a4:	d100      	bne.n	80014a8 <__aeabi_ddiv+0x1cc>
 80014a6:	e19b      	b.n	80017e0 <__aeabi_ddiv+0x504>
 80014a8:	4688      	mov	r8, r1
 80014aa:	1bae      	subs	r6, r5, r6
 80014ac:	42b5      	cmp	r5, r6
 80014ae:	41ad      	sbcs	r5, r5
 80014b0:	1a80      	subs	r0, r0, r2
 80014b2:	426d      	negs	r5, r5
 80014b4:	1b40      	subs	r0, r0, r5
 80014b6:	4284      	cmp	r4, r0
 80014b8:	d100      	bne.n	80014bc <__aeabi_ddiv+0x1e0>
 80014ba:	e1d5      	b.n	8001868 <__aeabi_ddiv+0x58c>
 80014bc:	4649      	mov	r1, r9
 80014be:	f7fe febb 	bl	8000238 <__aeabi_uidivmod>
 80014c2:	9a01      	ldr	r2, [sp, #4]
 80014c4:	040b      	lsls	r3, r1, #16
 80014c6:	4342      	muls	r2, r0
 80014c8:	0c31      	lsrs	r1, r6, #16
 80014ca:	0005      	movs	r5, r0
 80014cc:	4319      	orrs	r1, r3
 80014ce:	428a      	cmp	r2, r1
 80014d0:	d900      	bls.n	80014d4 <__aeabi_ddiv+0x1f8>
 80014d2:	e16c      	b.n	80017ae <__aeabi_ddiv+0x4d2>
 80014d4:	1a88      	subs	r0, r1, r2
 80014d6:	4649      	mov	r1, r9
 80014d8:	f7fe feae 	bl	8000238 <__aeabi_uidivmod>
 80014dc:	9a01      	ldr	r2, [sp, #4]
 80014de:	0436      	lsls	r6, r6, #16
 80014e0:	4342      	muls	r2, r0
 80014e2:	0409      	lsls	r1, r1, #16
 80014e4:	0c36      	lsrs	r6, r6, #16
 80014e6:	0003      	movs	r3, r0
 80014e8:	430e      	orrs	r6, r1
 80014ea:	42b2      	cmp	r2, r6
 80014ec:	d900      	bls.n	80014f0 <__aeabi_ddiv+0x214>
 80014ee:	e153      	b.n	8001798 <__aeabi_ddiv+0x4bc>
 80014f0:	9803      	ldr	r0, [sp, #12]
 80014f2:	1ab6      	subs	r6, r6, r2
 80014f4:	0002      	movs	r2, r0
 80014f6:	042d      	lsls	r5, r5, #16
 80014f8:	431d      	orrs	r5, r3
 80014fa:	9f02      	ldr	r7, [sp, #8]
 80014fc:	042b      	lsls	r3, r5, #16
 80014fe:	0c1b      	lsrs	r3, r3, #16
 8001500:	435a      	muls	r2, r3
 8001502:	437b      	muls	r3, r7
 8001504:	469c      	mov	ip, r3
 8001506:	0c29      	lsrs	r1, r5, #16
 8001508:	4348      	muls	r0, r1
 800150a:	0c13      	lsrs	r3, r2, #16
 800150c:	4484      	add	ip, r0
 800150e:	4463      	add	r3, ip
 8001510:	4379      	muls	r1, r7
 8001512:	4298      	cmp	r0, r3
 8001514:	d903      	bls.n	800151e <__aeabi_ddiv+0x242>
 8001516:	2080      	movs	r0, #128	; 0x80
 8001518:	0240      	lsls	r0, r0, #9
 800151a:	4684      	mov	ip, r0
 800151c:	4461      	add	r1, ip
 800151e:	0c18      	lsrs	r0, r3, #16
 8001520:	0412      	lsls	r2, r2, #16
 8001522:	041b      	lsls	r3, r3, #16
 8001524:	0c12      	lsrs	r2, r2, #16
 8001526:	1841      	adds	r1, r0, r1
 8001528:	189b      	adds	r3, r3, r2
 800152a:	428e      	cmp	r6, r1
 800152c:	d200      	bcs.n	8001530 <__aeabi_ddiv+0x254>
 800152e:	e0ff      	b.n	8001730 <__aeabi_ddiv+0x454>
 8001530:	d100      	bne.n	8001534 <__aeabi_ddiv+0x258>
 8001532:	e0fa      	b.n	800172a <__aeabi_ddiv+0x44e>
 8001534:	2301      	movs	r3, #1
 8001536:	431d      	orrs	r5, r3
 8001538:	4a49      	ldr	r2, [pc, #292]	; (8001660 <__aeabi_ddiv+0x384>)
 800153a:	445a      	add	r2, fp
 800153c:	2a00      	cmp	r2, #0
 800153e:	dc00      	bgt.n	8001542 <__aeabi_ddiv+0x266>
 8001540:	e0aa      	b.n	8001698 <__aeabi_ddiv+0x3bc>
 8001542:	076b      	lsls	r3, r5, #29
 8001544:	d000      	beq.n	8001548 <__aeabi_ddiv+0x26c>
 8001546:	e13d      	b.n	80017c4 <__aeabi_ddiv+0x4e8>
 8001548:	08ed      	lsrs	r5, r5, #3
 800154a:	4643      	mov	r3, r8
 800154c:	01db      	lsls	r3, r3, #7
 800154e:	d506      	bpl.n	800155e <__aeabi_ddiv+0x282>
 8001550:	4642      	mov	r2, r8
 8001552:	4b44      	ldr	r3, [pc, #272]	; (8001664 <__aeabi_ddiv+0x388>)
 8001554:	401a      	ands	r2, r3
 8001556:	4690      	mov	r8, r2
 8001558:	2280      	movs	r2, #128	; 0x80
 800155a:	00d2      	lsls	r2, r2, #3
 800155c:	445a      	add	r2, fp
 800155e:	4b42      	ldr	r3, [pc, #264]	; (8001668 <__aeabi_ddiv+0x38c>)
 8001560:	429a      	cmp	r2, r3
 8001562:	dd00      	ble.n	8001566 <__aeabi_ddiv+0x28a>
 8001564:	e71f      	b.n	80013a6 <__aeabi_ddiv+0xca>
 8001566:	4643      	mov	r3, r8
 8001568:	075b      	lsls	r3, r3, #29
 800156a:	431d      	orrs	r5, r3
 800156c:	4643      	mov	r3, r8
 800156e:	0552      	lsls	r2, r2, #21
 8001570:	025c      	lsls	r4, r3, #9
 8001572:	0b24      	lsrs	r4, r4, #12
 8001574:	0d53      	lsrs	r3, r2, #21
 8001576:	e708      	b.n	800138a <__aeabi_ddiv+0xae>
 8001578:	4652      	mov	r2, sl
 800157a:	4322      	orrs	r2, r4
 800157c:	d100      	bne.n	8001580 <__aeabi_ddiv+0x2a4>
 800157e:	e07b      	b.n	8001678 <__aeabi_ddiv+0x39c>
 8001580:	2c00      	cmp	r4, #0
 8001582:	d100      	bne.n	8001586 <__aeabi_ddiv+0x2aa>
 8001584:	e0fa      	b.n	800177c <__aeabi_ddiv+0x4a0>
 8001586:	0020      	movs	r0, r4
 8001588:	f001 fa36 	bl	80029f8 <__clzsi2>
 800158c:	0002      	movs	r2, r0
 800158e:	3a0b      	subs	r2, #11
 8001590:	231d      	movs	r3, #29
 8001592:	0001      	movs	r1, r0
 8001594:	1a9b      	subs	r3, r3, r2
 8001596:	4652      	mov	r2, sl
 8001598:	3908      	subs	r1, #8
 800159a:	40da      	lsrs	r2, r3
 800159c:	408c      	lsls	r4, r1
 800159e:	4314      	orrs	r4, r2
 80015a0:	4652      	mov	r2, sl
 80015a2:	408a      	lsls	r2, r1
 80015a4:	4b31      	ldr	r3, [pc, #196]	; (800166c <__aeabi_ddiv+0x390>)
 80015a6:	4458      	add	r0, fp
 80015a8:	469b      	mov	fp, r3
 80015aa:	4483      	add	fp, r0
 80015ac:	2000      	movs	r0, #0
 80015ae:	e6d5      	b.n	800135c <__aeabi_ddiv+0x80>
 80015b0:	464b      	mov	r3, r9
 80015b2:	4323      	orrs	r3, r4
 80015b4:	4698      	mov	r8, r3
 80015b6:	d044      	beq.n	8001642 <__aeabi_ddiv+0x366>
 80015b8:	2c00      	cmp	r4, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_ddiv+0x2e2>
 80015bc:	e0ce      	b.n	800175c <__aeabi_ddiv+0x480>
 80015be:	0020      	movs	r0, r4
 80015c0:	f001 fa1a 	bl	80029f8 <__clzsi2>
 80015c4:	0001      	movs	r1, r0
 80015c6:	0002      	movs	r2, r0
 80015c8:	390b      	subs	r1, #11
 80015ca:	231d      	movs	r3, #29
 80015cc:	1a5b      	subs	r3, r3, r1
 80015ce:	4649      	mov	r1, r9
 80015d0:	0010      	movs	r0, r2
 80015d2:	40d9      	lsrs	r1, r3
 80015d4:	3808      	subs	r0, #8
 80015d6:	4084      	lsls	r4, r0
 80015d8:	000b      	movs	r3, r1
 80015da:	464d      	mov	r5, r9
 80015dc:	4323      	orrs	r3, r4
 80015de:	4698      	mov	r8, r3
 80015e0:	4085      	lsls	r5, r0
 80015e2:	4823      	ldr	r0, [pc, #140]	; (8001670 <__aeabi_ddiv+0x394>)
 80015e4:	1a83      	subs	r3, r0, r2
 80015e6:	469b      	mov	fp, r3
 80015e8:	2300      	movs	r3, #0
 80015ea:	4699      	mov	r9, r3
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	e69a      	b.n	8001326 <__aeabi_ddiv+0x4a>
 80015f0:	464b      	mov	r3, r9
 80015f2:	4323      	orrs	r3, r4
 80015f4:	4698      	mov	r8, r3
 80015f6:	d11d      	bne.n	8001634 <__aeabi_ddiv+0x358>
 80015f8:	2308      	movs	r3, #8
 80015fa:	4699      	mov	r9, r3
 80015fc:	3b06      	subs	r3, #6
 80015fe:	2500      	movs	r5, #0
 8001600:	4683      	mov	fp, r0
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	e68f      	b.n	8001326 <__aeabi_ddiv+0x4a>
 8001606:	4652      	mov	r2, sl
 8001608:	4322      	orrs	r2, r4
 800160a:	d109      	bne.n	8001620 <__aeabi_ddiv+0x344>
 800160c:	2302      	movs	r3, #2
 800160e:	4649      	mov	r1, r9
 8001610:	4319      	orrs	r1, r3
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <__aeabi_ddiv+0x398>)
 8001614:	4689      	mov	r9, r1
 8001616:	469c      	mov	ip, r3
 8001618:	2400      	movs	r4, #0
 800161a:	2002      	movs	r0, #2
 800161c:	44e3      	add	fp, ip
 800161e:	e69d      	b.n	800135c <__aeabi_ddiv+0x80>
 8001620:	2303      	movs	r3, #3
 8001622:	464a      	mov	r2, r9
 8001624:	431a      	orrs	r2, r3
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <__aeabi_ddiv+0x398>)
 8001628:	4691      	mov	r9, r2
 800162a:	469c      	mov	ip, r3
 800162c:	4652      	mov	r2, sl
 800162e:	2003      	movs	r0, #3
 8001630:	44e3      	add	fp, ip
 8001632:	e693      	b.n	800135c <__aeabi_ddiv+0x80>
 8001634:	230c      	movs	r3, #12
 8001636:	4699      	mov	r9, r3
 8001638:	3b09      	subs	r3, #9
 800163a:	46a0      	mov	r8, r4
 800163c:	4683      	mov	fp, r0
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	e671      	b.n	8001326 <__aeabi_ddiv+0x4a>
 8001642:	2304      	movs	r3, #4
 8001644:	4699      	mov	r9, r3
 8001646:	2300      	movs	r3, #0
 8001648:	469b      	mov	fp, r3
 800164a:	3301      	adds	r3, #1
 800164c:	2500      	movs	r5, #0
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	e669      	b.n	8001326 <__aeabi_ddiv+0x4a>
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	000007ff 	.word	0x000007ff
 8001658:	fffffc01 	.word	0xfffffc01
 800165c:	08006ea4 	.word	0x08006ea4
 8001660:	000003ff 	.word	0x000003ff
 8001664:	feffffff 	.word	0xfeffffff
 8001668:	000007fe 	.word	0x000007fe
 800166c:	000003f3 	.word	0x000003f3
 8001670:	fffffc0d 	.word	0xfffffc0d
 8001674:	fffff801 	.word	0xfffff801
 8001678:	4649      	mov	r1, r9
 800167a:	2301      	movs	r3, #1
 800167c:	4319      	orrs	r1, r3
 800167e:	4689      	mov	r9, r1
 8001680:	2400      	movs	r4, #0
 8001682:	2001      	movs	r0, #1
 8001684:	e66a      	b.n	800135c <__aeabi_ddiv+0x80>
 8001686:	2300      	movs	r3, #0
 8001688:	2480      	movs	r4, #128	; 0x80
 800168a:	469a      	mov	sl, r3
 800168c:	2500      	movs	r5, #0
 800168e:	4b8a      	ldr	r3, [pc, #552]	; (80018b8 <__aeabi_ddiv+0x5dc>)
 8001690:	0324      	lsls	r4, r4, #12
 8001692:	e67a      	b.n	800138a <__aeabi_ddiv+0xae>
 8001694:	2501      	movs	r5, #1
 8001696:	426d      	negs	r5, r5
 8001698:	2301      	movs	r3, #1
 800169a:	1a9b      	subs	r3, r3, r2
 800169c:	2b38      	cmp	r3, #56	; 0x38
 800169e:	dd00      	ble.n	80016a2 <__aeabi_ddiv+0x3c6>
 80016a0:	e670      	b.n	8001384 <__aeabi_ddiv+0xa8>
 80016a2:	2b1f      	cmp	r3, #31
 80016a4:	dc00      	bgt.n	80016a8 <__aeabi_ddiv+0x3cc>
 80016a6:	e0bf      	b.n	8001828 <__aeabi_ddiv+0x54c>
 80016a8:	211f      	movs	r1, #31
 80016aa:	4249      	negs	r1, r1
 80016ac:	1a8a      	subs	r2, r1, r2
 80016ae:	4641      	mov	r1, r8
 80016b0:	40d1      	lsrs	r1, r2
 80016b2:	000a      	movs	r2, r1
 80016b4:	2b20      	cmp	r3, #32
 80016b6:	d004      	beq.n	80016c2 <__aeabi_ddiv+0x3e6>
 80016b8:	4641      	mov	r1, r8
 80016ba:	4b80      	ldr	r3, [pc, #512]	; (80018bc <__aeabi_ddiv+0x5e0>)
 80016bc:	445b      	add	r3, fp
 80016be:	4099      	lsls	r1, r3
 80016c0:	430d      	orrs	r5, r1
 80016c2:	1e6b      	subs	r3, r5, #1
 80016c4:	419d      	sbcs	r5, r3
 80016c6:	2307      	movs	r3, #7
 80016c8:	432a      	orrs	r2, r5
 80016ca:	001d      	movs	r5, r3
 80016cc:	2400      	movs	r4, #0
 80016ce:	4015      	ands	r5, r2
 80016d0:	4213      	tst	r3, r2
 80016d2:	d100      	bne.n	80016d6 <__aeabi_ddiv+0x3fa>
 80016d4:	e0d4      	b.n	8001880 <__aeabi_ddiv+0x5a4>
 80016d6:	210f      	movs	r1, #15
 80016d8:	2300      	movs	r3, #0
 80016da:	4011      	ands	r1, r2
 80016dc:	2904      	cmp	r1, #4
 80016de:	d100      	bne.n	80016e2 <__aeabi_ddiv+0x406>
 80016e0:	e0cb      	b.n	800187a <__aeabi_ddiv+0x59e>
 80016e2:	1d11      	adds	r1, r2, #4
 80016e4:	4291      	cmp	r1, r2
 80016e6:	4192      	sbcs	r2, r2
 80016e8:	4252      	negs	r2, r2
 80016ea:	189b      	adds	r3, r3, r2
 80016ec:	000a      	movs	r2, r1
 80016ee:	0219      	lsls	r1, r3, #8
 80016f0:	d400      	bmi.n	80016f4 <__aeabi_ddiv+0x418>
 80016f2:	e0c2      	b.n	800187a <__aeabi_ddiv+0x59e>
 80016f4:	2301      	movs	r3, #1
 80016f6:	2400      	movs	r4, #0
 80016f8:	2500      	movs	r5, #0
 80016fa:	e646      	b.n	800138a <__aeabi_ddiv+0xae>
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	4641      	mov	r1, r8
 8001700:	031b      	lsls	r3, r3, #12
 8001702:	4219      	tst	r1, r3
 8001704:	d008      	beq.n	8001718 <__aeabi_ddiv+0x43c>
 8001706:	421c      	tst	r4, r3
 8001708:	d106      	bne.n	8001718 <__aeabi_ddiv+0x43c>
 800170a:	431c      	orrs	r4, r3
 800170c:	0324      	lsls	r4, r4, #12
 800170e:	46ba      	mov	sl, r7
 8001710:	0015      	movs	r5, r2
 8001712:	4b69      	ldr	r3, [pc, #420]	; (80018b8 <__aeabi_ddiv+0x5dc>)
 8001714:	0b24      	lsrs	r4, r4, #12
 8001716:	e638      	b.n	800138a <__aeabi_ddiv+0xae>
 8001718:	2480      	movs	r4, #128	; 0x80
 800171a:	4643      	mov	r3, r8
 800171c:	0324      	lsls	r4, r4, #12
 800171e:	431c      	orrs	r4, r3
 8001720:	0324      	lsls	r4, r4, #12
 8001722:	46b2      	mov	sl, r6
 8001724:	4b64      	ldr	r3, [pc, #400]	; (80018b8 <__aeabi_ddiv+0x5dc>)
 8001726:	0b24      	lsrs	r4, r4, #12
 8001728:	e62f      	b.n	800138a <__aeabi_ddiv+0xae>
 800172a:	2b00      	cmp	r3, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_ddiv+0x454>
 800172e:	e703      	b.n	8001538 <__aeabi_ddiv+0x25c>
 8001730:	19a6      	adds	r6, r4, r6
 8001732:	1e68      	subs	r0, r5, #1
 8001734:	42a6      	cmp	r6, r4
 8001736:	d200      	bcs.n	800173a <__aeabi_ddiv+0x45e>
 8001738:	e08d      	b.n	8001856 <__aeabi_ddiv+0x57a>
 800173a:	428e      	cmp	r6, r1
 800173c:	d200      	bcs.n	8001740 <__aeabi_ddiv+0x464>
 800173e:	e0a3      	b.n	8001888 <__aeabi_ddiv+0x5ac>
 8001740:	d100      	bne.n	8001744 <__aeabi_ddiv+0x468>
 8001742:	e0b3      	b.n	80018ac <__aeabi_ddiv+0x5d0>
 8001744:	0005      	movs	r5, r0
 8001746:	e6f5      	b.n	8001534 <__aeabi_ddiv+0x258>
 8001748:	42aa      	cmp	r2, r5
 800174a:	d900      	bls.n	800174e <__aeabi_ddiv+0x472>
 800174c:	e639      	b.n	80013c2 <__aeabi_ddiv+0xe6>
 800174e:	4643      	mov	r3, r8
 8001750:	07de      	lsls	r6, r3, #31
 8001752:	0858      	lsrs	r0, r3, #1
 8001754:	086b      	lsrs	r3, r5, #1
 8001756:	431e      	orrs	r6, r3
 8001758:	07ed      	lsls	r5, r5, #31
 800175a:	e639      	b.n	80013d0 <__aeabi_ddiv+0xf4>
 800175c:	4648      	mov	r0, r9
 800175e:	f001 f94b 	bl	80029f8 <__clzsi2>
 8001762:	0001      	movs	r1, r0
 8001764:	0002      	movs	r2, r0
 8001766:	3115      	adds	r1, #21
 8001768:	3220      	adds	r2, #32
 800176a:	291c      	cmp	r1, #28
 800176c:	dc00      	bgt.n	8001770 <__aeabi_ddiv+0x494>
 800176e:	e72c      	b.n	80015ca <__aeabi_ddiv+0x2ee>
 8001770:	464b      	mov	r3, r9
 8001772:	3808      	subs	r0, #8
 8001774:	4083      	lsls	r3, r0
 8001776:	2500      	movs	r5, #0
 8001778:	4698      	mov	r8, r3
 800177a:	e732      	b.n	80015e2 <__aeabi_ddiv+0x306>
 800177c:	f001 f93c 	bl	80029f8 <__clzsi2>
 8001780:	0003      	movs	r3, r0
 8001782:	001a      	movs	r2, r3
 8001784:	3215      	adds	r2, #21
 8001786:	3020      	adds	r0, #32
 8001788:	2a1c      	cmp	r2, #28
 800178a:	dc00      	bgt.n	800178e <__aeabi_ddiv+0x4b2>
 800178c:	e700      	b.n	8001590 <__aeabi_ddiv+0x2b4>
 800178e:	4654      	mov	r4, sl
 8001790:	3b08      	subs	r3, #8
 8001792:	2200      	movs	r2, #0
 8001794:	409c      	lsls	r4, r3
 8001796:	e705      	b.n	80015a4 <__aeabi_ddiv+0x2c8>
 8001798:	1936      	adds	r6, r6, r4
 800179a:	3b01      	subs	r3, #1
 800179c:	42b4      	cmp	r4, r6
 800179e:	d900      	bls.n	80017a2 <__aeabi_ddiv+0x4c6>
 80017a0:	e6a6      	b.n	80014f0 <__aeabi_ddiv+0x214>
 80017a2:	42b2      	cmp	r2, r6
 80017a4:	d800      	bhi.n	80017a8 <__aeabi_ddiv+0x4cc>
 80017a6:	e6a3      	b.n	80014f0 <__aeabi_ddiv+0x214>
 80017a8:	1e83      	subs	r3, r0, #2
 80017aa:	1936      	adds	r6, r6, r4
 80017ac:	e6a0      	b.n	80014f0 <__aeabi_ddiv+0x214>
 80017ae:	1909      	adds	r1, r1, r4
 80017b0:	3d01      	subs	r5, #1
 80017b2:	428c      	cmp	r4, r1
 80017b4:	d900      	bls.n	80017b8 <__aeabi_ddiv+0x4dc>
 80017b6:	e68d      	b.n	80014d4 <__aeabi_ddiv+0x1f8>
 80017b8:	428a      	cmp	r2, r1
 80017ba:	d800      	bhi.n	80017be <__aeabi_ddiv+0x4e2>
 80017bc:	e68a      	b.n	80014d4 <__aeabi_ddiv+0x1f8>
 80017be:	1e85      	subs	r5, r0, #2
 80017c0:	1909      	adds	r1, r1, r4
 80017c2:	e687      	b.n	80014d4 <__aeabi_ddiv+0x1f8>
 80017c4:	230f      	movs	r3, #15
 80017c6:	402b      	ands	r3, r5
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d100      	bne.n	80017ce <__aeabi_ddiv+0x4f2>
 80017cc:	e6bc      	b.n	8001548 <__aeabi_ddiv+0x26c>
 80017ce:	2305      	movs	r3, #5
 80017d0:	425b      	negs	r3, r3
 80017d2:	42ab      	cmp	r3, r5
 80017d4:	419b      	sbcs	r3, r3
 80017d6:	3504      	adds	r5, #4
 80017d8:	425b      	negs	r3, r3
 80017da:	08ed      	lsrs	r5, r5, #3
 80017dc:	4498      	add	r8, r3
 80017de:	e6b4      	b.n	800154a <__aeabi_ddiv+0x26e>
 80017e0:	42af      	cmp	r7, r5
 80017e2:	d900      	bls.n	80017e6 <__aeabi_ddiv+0x50a>
 80017e4:	e660      	b.n	80014a8 <__aeabi_ddiv+0x1cc>
 80017e6:	4282      	cmp	r2, r0
 80017e8:	d804      	bhi.n	80017f4 <__aeabi_ddiv+0x518>
 80017ea:	d000      	beq.n	80017ee <__aeabi_ddiv+0x512>
 80017ec:	e65c      	b.n	80014a8 <__aeabi_ddiv+0x1cc>
 80017ee:	42ae      	cmp	r6, r5
 80017f0:	d800      	bhi.n	80017f4 <__aeabi_ddiv+0x518>
 80017f2:	e659      	b.n	80014a8 <__aeabi_ddiv+0x1cc>
 80017f4:	2302      	movs	r3, #2
 80017f6:	425b      	negs	r3, r3
 80017f8:	469c      	mov	ip, r3
 80017fa:	9b00      	ldr	r3, [sp, #0]
 80017fc:	44e0      	add	r8, ip
 80017fe:	469c      	mov	ip, r3
 8001800:	4465      	add	r5, ip
 8001802:	429d      	cmp	r5, r3
 8001804:	419b      	sbcs	r3, r3
 8001806:	425b      	negs	r3, r3
 8001808:	191b      	adds	r3, r3, r4
 800180a:	18c0      	adds	r0, r0, r3
 800180c:	e64d      	b.n	80014aa <__aeabi_ddiv+0x1ce>
 800180e:	428a      	cmp	r2, r1
 8001810:	d800      	bhi.n	8001814 <__aeabi_ddiv+0x538>
 8001812:	e60e      	b.n	8001432 <__aeabi_ddiv+0x156>
 8001814:	1e83      	subs	r3, r0, #2
 8001816:	1909      	adds	r1, r1, r4
 8001818:	e60b      	b.n	8001432 <__aeabi_ddiv+0x156>
 800181a:	428a      	cmp	r2, r1
 800181c:	d800      	bhi.n	8001820 <__aeabi_ddiv+0x544>
 800181e:	e5f4      	b.n	800140a <__aeabi_ddiv+0x12e>
 8001820:	1e83      	subs	r3, r0, #2
 8001822:	4698      	mov	r8, r3
 8001824:	1909      	adds	r1, r1, r4
 8001826:	e5f0      	b.n	800140a <__aeabi_ddiv+0x12e>
 8001828:	4925      	ldr	r1, [pc, #148]	; (80018c0 <__aeabi_ddiv+0x5e4>)
 800182a:	0028      	movs	r0, r5
 800182c:	4459      	add	r1, fp
 800182e:	408d      	lsls	r5, r1
 8001830:	4642      	mov	r2, r8
 8001832:	408a      	lsls	r2, r1
 8001834:	1e69      	subs	r1, r5, #1
 8001836:	418d      	sbcs	r5, r1
 8001838:	4641      	mov	r1, r8
 800183a:	40d8      	lsrs	r0, r3
 800183c:	40d9      	lsrs	r1, r3
 800183e:	4302      	orrs	r2, r0
 8001840:	432a      	orrs	r2, r5
 8001842:	000b      	movs	r3, r1
 8001844:	0751      	lsls	r1, r2, #29
 8001846:	d100      	bne.n	800184a <__aeabi_ddiv+0x56e>
 8001848:	e751      	b.n	80016ee <__aeabi_ddiv+0x412>
 800184a:	210f      	movs	r1, #15
 800184c:	4011      	ands	r1, r2
 800184e:	2904      	cmp	r1, #4
 8001850:	d000      	beq.n	8001854 <__aeabi_ddiv+0x578>
 8001852:	e746      	b.n	80016e2 <__aeabi_ddiv+0x406>
 8001854:	e74b      	b.n	80016ee <__aeabi_ddiv+0x412>
 8001856:	0005      	movs	r5, r0
 8001858:	428e      	cmp	r6, r1
 800185a:	d000      	beq.n	800185e <__aeabi_ddiv+0x582>
 800185c:	e66a      	b.n	8001534 <__aeabi_ddiv+0x258>
 800185e:	9a00      	ldr	r2, [sp, #0]
 8001860:	4293      	cmp	r3, r2
 8001862:	d000      	beq.n	8001866 <__aeabi_ddiv+0x58a>
 8001864:	e666      	b.n	8001534 <__aeabi_ddiv+0x258>
 8001866:	e667      	b.n	8001538 <__aeabi_ddiv+0x25c>
 8001868:	4a16      	ldr	r2, [pc, #88]	; (80018c4 <__aeabi_ddiv+0x5e8>)
 800186a:	445a      	add	r2, fp
 800186c:	2a00      	cmp	r2, #0
 800186e:	dc00      	bgt.n	8001872 <__aeabi_ddiv+0x596>
 8001870:	e710      	b.n	8001694 <__aeabi_ddiv+0x3b8>
 8001872:	2301      	movs	r3, #1
 8001874:	2500      	movs	r5, #0
 8001876:	4498      	add	r8, r3
 8001878:	e667      	b.n	800154a <__aeabi_ddiv+0x26e>
 800187a:	075d      	lsls	r5, r3, #29
 800187c:	025b      	lsls	r3, r3, #9
 800187e:	0b1c      	lsrs	r4, r3, #12
 8001880:	08d2      	lsrs	r2, r2, #3
 8001882:	2300      	movs	r3, #0
 8001884:	4315      	orrs	r5, r2
 8001886:	e580      	b.n	800138a <__aeabi_ddiv+0xae>
 8001888:	9800      	ldr	r0, [sp, #0]
 800188a:	3d02      	subs	r5, #2
 800188c:	0042      	lsls	r2, r0, #1
 800188e:	4282      	cmp	r2, r0
 8001890:	41bf      	sbcs	r7, r7
 8001892:	427f      	negs	r7, r7
 8001894:	193c      	adds	r4, r7, r4
 8001896:	1936      	adds	r6, r6, r4
 8001898:	9200      	str	r2, [sp, #0]
 800189a:	e7dd      	b.n	8001858 <__aeabi_ddiv+0x57c>
 800189c:	2480      	movs	r4, #128	; 0x80
 800189e:	4643      	mov	r3, r8
 80018a0:	0324      	lsls	r4, r4, #12
 80018a2:	431c      	orrs	r4, r3
 80018a4:	0324      	lsls	r4, r4, #12
 80018a6:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <__aeabi_ddiv+0x5dc>)
 80018a8:	0b24      	lsrs	r4, r4, #12
 80018aa:	e56e      	b.n	800138a <__aeabi_ddiv+0xae>
 80018ac:	9a00      	ldr	r2, [sp, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d3ea      	bcc.n	8001888 <__aeabi_ddiv+0x5ac>
 80018b2:	0005      	movs	r5, r0
 80018b4:	e7d3      	b.n	800185e <__aeabi_ddiv+0x582>
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	000007ff 	.word	0x000007ff
 80018bc:	0000043e 	.word	0x0000043e
 80018c0:	0000041e 	.word	0x0000041e
 80018c4:	000003ff 	.word	0x000003ff

080018c8 <__eqdf2>:
 80018c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ca:	464e      	mov	r6, r9
 80018cc:	4645      	mov	r5, r8
 80018ce:	46de      	mov	lr, fp
 80018d0:	4657      	mov	r7, sl
 80018d2:	4690      	mov	r8, r2
 80018d4:	b5e0      	push	{r5, r6, r7, lr}
 80018d6:	0017      	movs	r7, r2
 80018d8:	031a      	lsls	r2, r3, #12
 80018da:	0b12      	lsrs	r2, r2, #12
 80018dc:	0005      	movs	r5, r0
 80018de:	4684      	mov	ip, r0
 80018e0:	4819      	ldr	r0, [pc, #100]	; (8001948 <__eqdf2+0x80>)
 80018e2:	030e      	lsls	r6, r1, #12
 80018e4:	004c      	lsls	r4, r1, #1
 80018e6:	4691      	mov	r9, r2
 80018e8:	005a      	lsls	r2, r3, #1
 80018ea:	0fdb      	lsrs	r3, r3, #31
 80018ec:	469b      	mov	fp, r3
 80018ee:	0b36      	lsrs	r6, r6, #12
 80018f0:	0d64      	lsrs	r4, r4, #21
 80018f2:	0fc9      	lsrs	r1, r1, #31
 80018f4:	0d52      	lsrs	r2, r2, #21
 80018f6:	4284      	cmp	r4, r0
 80018f8:	d019      	beq.n	800192e <__eqdf2+0x66>
 80018fa:	4282      	cmp	r2, r0
 80018fc:	d010      	beq.n	8001920 <__eqdf2+0x58>
 80018fe:	2001      	movs	r0, #1
 8001900:	4294      	cmp	r4, r2
 8001902:	d10e      	bne.n	8001922 <__eqdf2+0x5a>
 8001904:	454e      	cmp	r6, r9
 8001906:	d10c      	bne.n	8001922 <__eqdf2+0x5a>
 8001908:	2001      	movs	r0, #1
 800190a:	45c4      	cmp	ip, r8
 800190c:	d109      	bne.n	8001922 <__eqdf2+0x5a>
 800190e:	4559      	cmp	r1, fp
 8001910:	d017      	beq.n	8001942 <__eqdf2+0x7a>
 8001912:	2c00      	cmp	r4, #0
 8001914:	d105      	bne.n	8001922 <__eqdf2+0x5a>
 8001916:	0030      	movs	r0, r6
 8001918:	4328      	orrs	r0, r5
 800191a:	1e43      	subs	r3, r0, #1
 800191c:	4198      	sbcs	r0, r3
 800191e:	e000      	b.n	8001922 <__eqdf2+0x5a>
 8001920:	2001      	movs	r0, #1
 8001922:	bcf0      	pop	{r4, r5, r6, r7}
 8001924:	46bb      	mov	fp, r7
 8001926:	46b2      	mov	sl, r6
 8001928:	46a9      	mov	r9, r5
 800192a:	46a0      	mov	r8, r4
 800192c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800192e:	0033      	movs	r3, r6
 8001930:	2001      	movs	r0, #1
 8001932:	432b      	orrs	r3, r5
 8001934:	d1f5      	bne.n	8001922 <__eqdf2+0x5a>
 8001936:	42a2      	cmp	r2, r4
 8001938:	d1f3      	bne.n	8001922 <__eqdf2+0x5a>
 800193a:	464b      	mov	r3, r9
 800193c:	433b      	orrs	r3, r7
 800193e:	d1f0      	bne.n	8001922 <__eqdf2+0x5a>
 8001940:	e7e2      	b.n	8001908 <__eqdf2+0x40>
 8001942:	2000      	movs	r0, #0
 8001944:	e7ed      	b.n	8001922 <__eqdf2+0x5a>
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	000007ff 	.word	0x000007ff

0800194c <__gedf2>:
 800194c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194e:	4647      	mov	r7, r8
 8001950:	46ce      	mov	lr, r9
 8001952:	0004      	movs	r4, r0
 8001954:	0018      	movs	r0, r3
 8001956:	0016      	movs	r6, r2
 8001958:	031b      	lsls	r3, r3, #12
 800195a:	0b1b      	lsrs	r3, r3, #12
 800195c:	4d2d      	ldr	r5, [pc, #180]	; (8001a14 <__gedf2+0xc8>)
 800195e:	004a      	lsls	r2, r1, #1
 8001960:	4699      	mov	r9, r3
 8001962:	b580      	push	{r7, lr}
 8001964:	0043      	lsls	r3, r0, #1
 8001966:	030f      	lsls	r7, r1, #12
 8001968:	46a4      	mov	ip, r4
 800196a:	46b0      	mov	r8, r6
 800196c:	0b3f      	lsrs	r7, r7, #12
 800196e:	0d52      	lsrs	r2, r2, #21
 8001970:	0fc9      	lsrs	r1, r1, #31
 8001972:	0d5b      	lsrs	r3, r3, #21
 8001974:	0fc0      	lsrs	r0, r0, #31
 8001976:	42aa      	cmp	r2, r5
 8001978:	d021      	beq.n	80019be <__gedf2+0x72>
 800197a:	42ab      	cmp	r3, r5
 800197c:	d013      	beq.n	80019a6 <__gedf2+0x5a>
 800197e:	2a00      	cmp	r2, #0
 8001980:	d122      	bne.n	80019c8 <__gedf2+0x7c>
 8001982:	433c      	orrs	r4, r7
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <__gedf2+0x42>
 8001988:	464d      	mov	r5, r9
 800198a:	432e      	orrs	r6, r5
 800198c:	d022      	beq.n	80019d4 <__gedf2+0x88>
 800198e:	2c00      	cmp	r4, #0
 8001990:	d010      	beq.n	80019b4 <__gedf2+0x68>
 8001992:	4281      	cmp	r1, r0
 8001994:	d022      	beq.n	80019dc <__gedf2+0x90>
 8001996:	2002      	movs	r0, #2
 8001998:	3901      	subs	r1, #1
 800199a:	4008      	ands	r0, r1
 800199c:	3801      	subs	r0, #1
 800199e:	bcc0      	pop	{r6, r7}
 80019a0:	46b9      	mov	r9, r7
 80019a2:	46b0      	mov	r8, r6
 80019a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a6:	464d      	mov	r5, r9
 80019a8:	432e      	orrs	r6, r5
 80019aa:	d129      	bne.n	8001a00 <__gedf2+0xb4>
 80019ac:	2a00      	cmp	r2, #0
 80019ae:	d1f0      	bne.n	8001992 <__gedf2+0x46>
 80019b0:	433c      	orrs	r4, r7
 80019b2:	d1ee      	bne.n	8001992 <__gedf2+0x46>
 80019b4:	2800      	cmp	r0, #0
 80019b6:	d1f2      	bne.n	800199e <__gedf2+0x52>
 80019b8:	2001      	movs	r0, #1
 80019ba:	4240      	negs	r0, r0
 80019bc:	e7ef      	b.n	800199e <__gedf2+0x52>
 80019be:	003d      	movs	r5, r7
 80019c0:	4325      	orrs	r5, r4
 80019c2:	d11d      	bne.n	8001a00 <__gedf2+0xb4>
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d0ee      	beq.n	80019a6 <__gedf2+0x5a>
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1e2      	bne.n	8001992 <__gedf2+0x46>
 80019cc:	464c      	mov	r4, r9
 80019ce:	4326      	orrs	r6, r4
 80019d0:	d1df      	bne.n	8001992 <__gedf2+0x46>
 80019d2:	e7e0      	b.n	8001996 <__gedf2+0x4a>
 80019d4:	2000      	movs	r0, #0
 80019d6:	2c00      	cmp	r4, #0
 80019d8:	d0e1      	beq.n	800199e <__gedf2+0x52>
 80019da:	e7dc      	b.n	8001996 <__gedf2+0x4a>
 80019dc:	429a      	cmp	r2, r3
 80019de:	dc0a      	bgt.n	80019f6 <__gedf2+0xaa>
 80019e0:	dbe8      	blt.n	80019b4 <__gedf2+0x68>
 80019e2:	454f      	cmp	r7, r9
 80019e4:	d8d7      	bhi.n	8001996 <__gedf2+0x4a>
 80019e6:	d00e      	beq.n	8001a06 <__gedf2+0xba>
 80019e8:	2000      	movs	r0, #0
 80019ea:	454f      	cmp	r7, r9
 80019ec:	d2d7      	bcs.n	800199e <__gedf2+0x52>
 80019ee:	2900      	cmp	r1, #0
 80019f0:	d0e2      	beq.n	80019b8 <__gedf2+0x6c>
 80019f2:	0008      	movs	r0, r1
 80019f4:	e7d3      	b.n	800199e <__gedf2+0x52>
 80019f6:	4243      	negs	r3, r0
 80019f8:	4158      	adcs	r0, r3
 80019fa:	0040      	lsls	r0, r0, #1
 80019fc:	3801      	subs	r0, #1
 80019fe:	e7ce      	b.n	800199e <__gedf2+0x52>
 8001a00:	2002      	movs	r0, #2
 8001a02:	4240      	negs	r0, r0
 8001a04:	e7cb      	b.n	800199e <__gedf2+0x52>
 8001a06:	45c4      	cmp	ip, r8
 8001a08:	d8c5      	bhi.n	8001996 <__gedf2+0x4a>
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	45c4      	cmp	ip, r8
 8001a0e:	d2c6      	bcs.n	800199e <__gedf2+0x52>
 8001a10:	e7ed      	b.n	80019ee <__gedf2+0xa2>
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	000007ff 	.word	0x000007ff

08001a18 <__ledf2>:
 8001a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1a:	4647      	mov	r7, r8
 8001a1c:	46ce      	mov	lr, r9
 8001a1e:	0004      	movs	r4, r0
 8001a20:	0018      	movs	r0, r3
 8001a22:	0016      	movs	r6, r2
 8001a24:	031b      	lsls	r3, r3, #12
 8001a26:	0b1b      	lsrs	r3, r3, #12
 8001a28:	4d2c      	ldr	r5, [pc, #176]	; (8001adc <__ledf2+0xc4>)
 8001a2a:	004a      	lsls	r2, r1, #1
 8001a2c:	4699      	mov	r9, r3
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	0043      	lsls	r3, r0, #1
 8001a32:	030f      	lsls	r7, r1, #12
 8001a34:	46a4      	mov	ip, r4
 8001a36:	46b0      	mov	r8, r6
 8001a38:	0b3f      	lsrs	r7, r7, #12
 8001a3a:	0d52      	lsrs	r2, r2, #21
 8001a3c:	0fc9      	lsrs	r1, r1, #31
 8001a3e:	0d5b      	lsrs	r3, r3, #21
 8001a40:	0fc0      	lsrs	r0, r0, #31
 8001a42:	42aa      	cmp	r2, r5
 8001a44:	d00d      	beq.n	8001a62 <__ledf2+0x4a>
 8001a46:	42ab      	cmp	r3, r5
 8001a48:	d010      	beq.n	8001a6c <__ledf2+0x54>
 8001a4a:	2a00      	cmp	r2, #0
 8001a4c:	d127      	bne.n	8001a9e <__ledf2+0x86>
 8001a4e:	433c      	orrs	r4, r7
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d111      	bne.n	8001a78 <__ledf2+0x60>
 8001a54:	464d      	mov	r5, r9
 8001a56:	432e      	orrs	r6, r5
 8001a58:	d10e      	bne.n	8001a78 <__ledf2+0x60>
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	2c00      	cmp	r4, #0
 8001a5e:	d015      	beq.n	8001a8c <__ledf2+0x74>
 8001a60:	e00e      	b.n	8001a80 <__ledf2+0x68>
 8001a62:	003d      	movs	r5, r7
 8001a64:	4325      	orrs	r5, r4
 8001a66:	d110      	bne.n	8001a8a <__ledf2+0x72>
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d118      	bne.n	8001a9e <__ledf2+0x86>
 8001a6c:	464d      	mov	r5, r9
 8001a6e:	432e      	orrs	r6, r5
 8001a70:	d10b      	bne.n	8001a8a <__ledf2+0x72>
 8001a72:	2a00      	cmp	r2, #0
 8001a74:	d102      	bne.n	8001a7c <__ledf2+0x64>
 8001a76:	433c      	orrs	r4, r7
 8001a78:	2c00      	cmp	r4, #0
 8001a7a:	d00b      	beq.n	8001a94 <__ledf2+0x7c>
 8001a7c:	4281      	cmp	r1, r0
 8001a7e:	d014      	beq.n	8001aaa <__ledf2+0x92>
 8001a80:	2002      	movs	r0, #2
 8001a82:	3901      	subs	r1, #1
 8001a84:	4008      	ands	r0, r1
 8001a86:	3801      	subs	r0, #1
 8001a88:	e000      	b.n	8001a8c <__ledf2+0x74>
 8001a8a:	2002      	movs	r0, #2
 8001a8c:	bcc0      	pop	{r6, r7}
 8001a8e:	46b9      	mov	r9, r7
 8001a90:	46b0      	mov	r8, r6
 8001a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a94:	2800      	cmp	r0, #0
 8001a96:	d1f9      	bne.n	8001a8c <__ledf2+0x74>
 8001a98:	2001      	movs	r0, #1
 8001a9a:	4240      	negs	r0, r0
 8001a9c:	e7f6      	b.n	8001a8c <__ledf2+0x74>
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1ec      	bne.n	8001a7c <__ledf2+0x64>
 8001aa2:	464c      	mov	r4, r9
 8001aa4:	4326      	orrs	r6, r4
 8001aa6:	d1e9      	bne.n	8001a7c <__ledf2+0x64>
 8001aa8:	e7ea      	b.n	8001a80 <__ledf2+0x68>
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	dd04      	ble.n	8001ab8 <__ledf2+0xa0>
 8001aae:	4243      	negs	r3, r0
 8001ab0:	4158      	adcs	r0, r3
 8001ab2:	0040      	lsls	r0, r0, #1
 8001ab4:	3801      	subs	r0, #1
 8001ab6:	e7e9      	b.n	8001a8c <__ledf2+0x74>
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	dbeb      	blt.n	8001a94 <__ledf2+0x7c>
 8001abc:	454f      	cmp	r7, r9
 8001abe:	d8df      	bhi.n	8001a80 <__ledf2+0x68>
 8001ac0:	d006      	beq.n	8001ad0 <__ledf2+0xb8>
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	454f      	cmp	r7, r9
 8001ac6:	d2e1      	bcs.n	8001a8c <__ledf2+0x74>
 8001ac8:	2900      	cmp	r1, #0
 8001aca:	d0e5      	beq.n	8001a98 <__ledf2+0x80>
 8001acc:	0008      	movs	r0, r1
 8001ace:	e7dd      	b.n	8001a8c <__ledf2+0x74>
 8001ad0:	45c4      	cmp	ip, r8
 8001ad2:	d8d5      	bhi.n	8001a80 <__ledf2+0x68>
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	45c4      	cmp	ip, r8
 8001ad8:	d2d8      	bcs.n	8001a8c <__ledf2+0x74>
 8001ada:	e7f5      	b.n	8001ac8 <__ledf2+0xb0>
 8001adc:	000007ff 	.word	0x000007ff

08001ae0 <__aeabi_dmul>:
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	4657      	mov	r7, sl
 8001ae4:	464e      	mov	r6, r9
 8001ae6:	4645      	mov	r5, r8
 8001ae8:	46de      	mov	lr, fp
 8001aea:	b5e0      	push	{r5, r6, r7, lr}
 8001aec:	4698      	mov	r8, r3
 8001aee:	030c      	lsls	r4, r1, #12
 8001af0:	004b      	lsls	r3, r1, #1
 8001af2:	0006      	movs	r6, r0
 8001af4:	4692      	mov	sl, r2
 8001af6:	b087      	sub	sp, #28
 8001af8:	0b24      	lsrs	r4, r4, #12
 8001afa:	0d5b      	lsrs	r3, r3, #21
 8001afc:	0fcf      	lsrs	r7, r1, #31
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dmul+0x24>
 8001b02:	e15c      	b.n	8001dbe <__aeabi_dmul+0x2de>
 8001b04:	4ad9      	ldr	r2, [pc, #868]	; (8001e6c <__aeabi_dmul+0x38c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dmul+0x2c>
 8001b0a:	e175      	b.n	8001df8 <__aeabi_dmul+0x318>
 8001b0c:	0f42      	lsrs	r2, r0, #29
 8001b0e:	00e4      	lsls	r4, r4, #3
 8001b10:	4314      	orrs	r4, r2
 8001b12:	2280      	movs	r2, #128	; 0x80
 8001b14:	0412      	lsls	r2, r2, #16
 8001b16:	4314      	orrs	r4, r2
 8001b18:	4ad5      	ldr	r2, [pc, #852]	; (8001e70 <__aeabi_dmul+0x390>)
 8001b1a:	00c5      	lsls	r5, r0, #3
 8001b1c:	4694      	mov	ip, r2
 8001b1e:	4463      	add	r3, ip
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2300      	movs	r3, #0
 8001b24:	4699      	mov	r9, r3
 8001b26:	469b      	mov	fp, r3
 8001b28:	4643      	mov	r3, r8
 8001b2a:	4642      	mov	r2, r8
 8001b2c:	031e      	lsls	r6, r3, #12
 8001b2e:	0fd2      	lsrs	r2, r2, #31
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4650      	mov	r0, sl
 8001b34:	4690      	mov	r8, r2
 8001b36:	0b36      	lsrs	r6, r6, #12
 8001b38:	0d5b      	lsrs	r3, r3, #21
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_dmul+0x5e>
 8001b3c:	e120      	b.n	8001d80 <__aeabi_dmul+0x2a0>
 8001b3e:	4acb      	ldr	r2, [pc, #812]	; (8001e6c <__aeabi_dmul+0x38c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d100      	bne.n	8001b46 <__aeabi_dmul+0x66>
 8001b44:	e162      	b.n	8001e0c <__aeabi_dmul+0x32c>
 8001b46:	49ca      	ldr	r1, [pc, #808]	; (8001e70 <__aeabi_dmul+0x390>)
 8001b48:	0f42      	lsrs	r2, r0, #29
 8001b4a:	468c      	mov	ip, r1
 8001b4c:	9900      	ldr	r1, [sp, #0]
 8001b4e:	4463      	add	r3, ip
 8001b50:	00f6      	lsls	r6, r6, #3
 8001b52:	468c      	mov	ip, r1
 8001b54:	4316      	orrs	r6, r2
 8001b56:	2280      	movs	r2, #128	; 0x80
 8001b58:	449c      	add	ip, r3
 8001b5a:	0412      	lsls	r2, r2, #16
 8001b5c:	4663      	mov	r3, ip
 8001b5e:	4316      	orrs	r6, r2
 8001b60:	00c2      	lsls	r2, r0, #3
 8001b62:	2000      	movs	r0, #0
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	9900      	ldr	r1, [sp, #0]
 8001b68:	4643      	mov	r3, r8
 8001b6a:	3101      	adds	r1, #1
 8001b6c:	468c      	mov	ip, r1
 8001b6e:	4649      	mov	r1, r9
 8001b70:	407b      	eors	r3, r7
 8001b72:	9301      	str	r3, [sp, #4]
 8001b74:	290f      	cmp	r1, #15
 8001b76:	d826      	bhi.n	8001bc6 <__aeabi_dmul+0xe6>
 8001b78:	4bbe      	ldr	r3, [pc, #760]	; (8001e74 <__aeabi_dmul+0x394>)
 8001b7a:	0089      	lsls	r1, r1, #2
 8001b7c:	5859      	ldr	r1, [r3, r1]
 8001b7e:	468f      	mov	pc, r1
 8001b80:	4643      	mov	r3, r8
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	0034      	movs	r4, r6
 8001b86:	0015      	movs	r5, r2
 8001b88:	4683      	mov	fp, r0
 8001b8a:	465b      	mov	r3, fp
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d016      	beq.n	8001bbe <__aeabi_dmul+0xde>
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dmul+0xb6>
 8001b94:	e203      	b.n	8001f9e <__aeabi_dmul+0x4be>
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d000      	beq.n	8001b9c <__aeabi_dmul+0xbc>
 8001b9a:	e0cd      	b.n	8001d38 <__aeabi_dmul+0x258>
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2400      	movs	r4, #0
 8001ba0:	2500      	movs	r5, #0
 8001ba2:	9b01      	ldr	r3, [sp, #4]
 8001ba4:	0512      	lsls	r2, r2, #20
 8001ba6:	4322      	orrs	r2, r4
 8001ba8:	07db      	lsls	r3, r3, #31
 8001baa:	431a      	orrs	r2, r3
 8001bac:	0028      	movs	r0, r5
 8001bae:	0011      	movs	r1, r2
 8001bb0:	b007      	add	sp, #28
 8001bb2:	bcf0      	pop	{r4, r5, r6, r7}
 8001bb4:	46bb      	mov	fp, r7
 8001bb6:	46b2      	mov	sl, r6
 8001bb8:	46a9      	mov	r9, r5
 8001bba:	46a0      	mov	r8, r4
 8001bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bbe:	2400      	movs	r4, #0
 8001bc0:	2500      	movs	r5, #0
 8001bc2:	4aaa      	ldr	r2, [pc, #680]	; (8001e6c <__aeabi_dmul+0x38c>)
 8001bc4:	e7ed      	b.n	8001ba2 <__aeabi_dmul+0xc2>
 8001bc6:	0c28      	lsrs	r0, r5, #16
 8001bc8:	042d      	lsls	r5, r5, #16
 8001bca:	0c2d      	lsrs	r5, r5, #16
 8001bcc:	002b      	movs	r3, r5
 8001bce:	0c11      	lsrs	r1, r2, #16
 8001bd0:	0412      	lsls	r2, r2, #16
 8001bd2:	0c12      	lsrs	r2, r2, #16
 8001bd4:	4353      	muls	r3, r2
 8001bd6:	4698      	mov	r8, r3
 8001bd8:	0013      	movs	r3, r2
 8001bda:	002f      	movs	r7, r5
 8001bdc:	4343      	muls	r3, r0
 8001bde:	4699      	mov	r9, r3
 8001be0:	434f      	muls	r7, r1
 8001be2:	444f      	add	r7, r9
 8001be4:	46bb      	mov	fp, r7
 8001be6:	4647      	mov	r7, r8
 8001be8:	000b      	movs	r3, r1
 8001bea:	0c3f      	lsrs	r7, r7, #16
 8001bec:	46ba      	mov	sl, r7
 8001bee:	4343      	muls	r3, r0
 8001bf0:	44da      	add	sl, fp
 8001bf2:	9302      	str	r3, [sp, #8]
 8001bf4:	45d1      	cmp	r9, sl
 8001bf6:	d904      	bls.n	8001c02 <__aeabi_dmul+0x122>
 8001bf8:	2780      	movs	r7, #128	; 0x80
 8001bfa:	027f      	lsls	r7, r7, #9
 8001bfc:	46b9      	mov	r9, r7
 8001bfe:	444b      	add	r3, r9
 8001c00:	9302      	str	r3, [sp, #8]
 8001c02:	4653      	mov	r3, sl
 8001c04:	0c1b      	lsrs	r3, r3, #16
 8001c06:	469b      	mov	fp, r3
 8001c08:	4653      	mov	r3, sl
 8001c0a:	041f      	lsls	r7, r3, #16
 8001c0c:	4643      	mov	r3, r8
 8001c0e:	041b      	lsls	r3, r3, #16
 8001c10:	0c1b      	lsrs	r3, r3, #16
 8001c12:	4698      	mov	r8, r3
 8001c14:	003b      	movs	r3, r7
 8001c16:	4443      	add	r3, r8
 8001c18:	9304      	str	r3, [sp, #16]
 8001c1a:	0c33      	lsrs	r3, r6, #16
 8001c1c:	0436      	lsls	r6, r6, #16
 8001c1e:	0c36      	lsrs	r6, r6, #16
 8001c20:	4698      	mov	r8, r3
 8001c22:	0033      	movs	r3, r6
 8001c24:	4343      	muls	r3, r0
 8001c26:	4699      	mov	r9, r3
 8001c28:	4643      	mov	r3, r8
 8001c2a:	4343      	muls	r3, r0
 8001c2c:	002f      	movs	r7, r5
 8001c2e:	469a      	mov	sl, r3
 8001c30:	4643      	mov	r3, r8
 8001c32:	4377      	muls	r7, r6
 8001c34:	435d      	muls	r5, r3
 8001c36:	0c38      	lsrs	r0, r7, #16
 8001c38:	444d      	add	r5, r9
 8001c3a:	1945      	adds	r5, r0, r5
 8001c3c:	45a9      	cmp	r9, r5
 8001c3e:	d903      	bls.n	8001c48 <__aeabi_dmul+0x168>
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	025b      	lsls	r3, r3, #9
 8001c44:	4699      	mov	r9, r3
 8001c46:	44ca      	add	sl, r9
 8001c48:	043f      	lsls	r7, r7, #16
 8001c4a:	0c28      	lsrs	r0, r5, #16
 8001c4c:	0c3f      	lsrs	r7, r7, #16
 8001c4e:	042d      	lsls	r5, r5, #16
 8001c50:	19ed      	adds	r5, r5, r7
 8001c52:	0c27      	lsrs	r7, r4, #16
 8001c54:	0424      	lsls	r4, r4, #16
 8001c56:	0c24      	lsrs	r4, r4, #16
 8001c58:	0003      	movs	r3, r0
 8001c5a:	0020      	movs	r0, r4
 8001c5c:	4350      	muls	r0, r2
 8001c5e:	437a      	muls	r2, r7
 8001c60:	4691      	mov	r9, r2
 8001c62:	003a      	movs	r2, r7
 8001c64:	4453      	add	r3, sl
 8001c66:	9305      	str	r3, [sp, #20]
 8001c68:	0c03      	lsrs	r3, r0, #16
 8001c6a:	469a      	mov	sl, r3
 8001c6c:	434a      	muls	r2, r1
 8001c6e:	4361      	muls	r1, r4
 8001c70:	4449      	add	r1, r9
 8001c72:	4451      	add	r1, sl
 8001c74:	44ab      	add	fp, r5
 8001c76:	4589      	cmp	r9, r1
 8001c78:	d903      	bls.n	8001c82 <__aeabi_dmul+0x1a2>
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	025b      	lsls	r3, r3, #9
 8001c7e:	4699      	mov	r9, r3
 8001c80:	444a      	add	r2, r9
 8001c82:	0400      	lsls	r0, r0, #16
 8001c84:	0c0b      	lsrs	r3, r1, #16
 8001c86:	0c00      	lsrs	r0, r0, #16
 8001c88:	0409      	lsls	r1, r1, #16
 8001c8a:	1809      	adds	r1, r1, r0
 8001c8c:	0020      	movs	r0, r4
 8001c8e:	4699      	mov	r9, r3
 8001c90:	4643      	mov	r3, r8
 8001c92:	4370      	muls	r0, r6
 8001c94:	435c      	muls	r4, r3
 8001c96:	437e      	muls	r6, r7
 8001c98:	435f      	muls	r7, r3
 8001c9a:	0c03      	lsrs	r3, r0, #16
 8001c9c:	4698      	mov	r8, r3
 8001c9e:	19a4      	adds	r4, r4, r6
 8001ca0:	4444      	add	r4, r8
 8001ca2:	444a      	add	r2, r9
 8001ca4:	9703      	str	r7, [sp, #12]
 8001ca6:	42a6      	cmp	r6, r4
 8001ca8:	d904      	bls.n	8001cb4 <__aeabi_dmul+0x1d4>
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	025b      	lsls	r3, r3, #9
 8001cae:	4698      	mov	r8, r3
 8001cb0:	4447      	add	r7, r8
 8001cb2:	9703      	str	r7, [sp, #12]
 8001cb4:	0423      	lsls	r3, r4, #16
 8001cb6:	9e02      	ldr	r6, [sp, #8]
 8001cb8:	469a      	mov	sl, r3
 8001cba:	9b05      	ldr	r3, [sp, #20]
 8001cbc:	445e      	add	r6, fp
 8001cbe:	4698      	mov	r8, r3
 8001cc0:	42ae      	cmp	r6, r5
 8001cc2:	41ad      	sbcs	r5, r5
 8001cc4:	1876      	adds	r6, r6, r1
 8001cc6:	428e      	cmp	r6, r1
 8001cc8:	4189      	sbcs	r1, r1
 8001cca:	0400      	lsls	r0, r0, #16
 8001ccc:	0c00      	lsrs	r0, r0, #16
 8001cce:	4450      	add	r0, sl
 8001cd0:	4440      	add	r0, r8
 8001cd2:	426d      	negs	r5, r5
 8001cd4:	1947      	adds	r7, r0, r5
 8001cd6:	46b8      	mov	r8, r7
 8001cd8:	4693      	mov	fp, r2
 8001cda:	4249      	negs	r1, r1
 8001cdc:	4689      	mov	r9, r1
 8001cde:	44c3      	add	fp, r8
 8001ce0:	44d9      	add	r9, fp
 8001ce2:	4298      	cmp	r0, r3
 8001ce4:	4180      	sbcs	r0, r0
 8001ce6:	45a8      	cmp	r8, r5
 8001ce8:	41ad      	sbcs	r5, r5
 8001cea:	4593      	cmp	fp, r2
 8001cec:	4192      	sbcs	r2, r2
 8001cee:	4589      	cmp	r9, r1
 8001cf0:	4189      	sbcs	r1, r1
 8001cf2:	426d      	negs	r5, r5
 8001cf4:	4240      	negs	r0, r0
 8001cf6:	4328      	orrs	r0, r5
 8001cf8:	0c24      	lsrs	r4, r4, #16
 8001cfa:	4252      	negs	r2, r2
 8001cfc:	4249      	negs	r1, r1
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	9b03      	ldr	r3, [sp, #12]
 8001d02:	1900      	adds	r0, r0, r4
 8001d04:	1880      	adds	r0, r0, r2
 8001d06:	18c7      	adds	r7, r0, r3
 8001d08:	464b      	mov	r3, r9
 8001d0a:	0ddc      	lsrs	r4, r3, #23
 8001d0c:	9b04      	ldr	r3, [sp, #16]
 8001d0e:	0275      	lsls	r5, r6, #9
 8001d10:	431d      	orrs	r5, r3
 8001d12:	1e6a      	subs	r2, r5, #1
 8001d14:	4195      	sbcs	r5, r2
 8001d16:	464b      	mov	r3, r9
 8001d18:	0df6      	lsrs	r6, r6, #23
 8001d1a:	027f      	lsls	r7, r7, #9
 8001d1c:	4335      	orrs	r5, r6
 8001d1e:	025a      	lsls	r2, r3, #9
 8001d20:	433c      	orrs	r4, r7
 8001d22:	4315      	orrs	r5, r2
 8001d24:	01fb      	lsls	r3, r7, #7
 8001d26:	d400      	bmi.n	8001d2a <__aeabi_dmul+0x24a>
 8001d28:	e11c      	b.n	8001f64 <__aeabi_dmul+0x484>
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	086a      	lsrs	r2, r5, #1
 8001d2e:	400d      	ands	r5, r1
 8001d30:	4315      	orrs	r5, r2
 8001d32:	07e2      	lsls	r2, r4, #31
 8001d34:	4315      	orrs	r5, r2
 8001d36:	0864      	lsrs	r4, r4, #1
 8001d38:	494f      	ldr	r1, [pc, #316]	; (8001e78 <__aeabi_dmul+0x398>)
 8001d3a:	4461      	add	r1, ip
 8001d3c:	2900      	cmp	r1, #0
 8001d3e:	dc00      	bgt.n	8001d42 <__aeabi_dmul+0x262>
 8001d40:	e0b0      	b.n	8001ea4 <__aeabi_dmul+0x3c4>
 8001d42:	076b      	lsls	r3, r5, #29
 8001d44:	d009      	beq.n	8001d5a <__aeabi_dmul+0x27a>
 8001d46:	220f      	movs	r2, #15
 8001d48:	402a      	ands	r2, r5
 8001d4a:	2a04      	cmp	r2, #4
 8001d4c:	d005      	beq.n	8001d5a <__aeabi_dmul+0x27a>
 8001d4e:	1d2a      	adds	r2, r5, #4
 8001d50:	42aa      	cmp	r2, r5
 8001d52:	41ad      	sbcs	r5, r5
 8001d54:	426d      	negs	r5, r5
 8001d56:	1964      	adds	r4, r4, r5
 8001d58:	0015      	movs	r5, r2
 8001d5a:	01e3      	lsls	r3, r4, #7
 8001d5c:	d504      	bpl.n	8001d68 <__aeabi_dmul+0x288>
 8001d5e:	2180      	movs	r1, #128	; 0x80
 8001d60:	4a46      	ldr	r2, [pc, #280]	; (8001e7c <__aeabi_dmul+0x39c>)
 8001d62:	00c9      	lsls	r1, r1, #3
 8001d64:	4014      	ands	r4, r2
 8001d66:	4461      	add	r1, ip
 8001d68:	4a45      	ldr	r2, [pc, #276]	; (8001e80 <__aeabi_dmul+0x3a0>)
 8001d6a:	4291      	cmp	r1, r2
 8001d6c:	dd00      	ble.n	8001d70 <__aeabi_dmul+0x290>
 8001d6e:	e726      	b.n	8001bbe <__aeabi_dmul+0xde>
 8001d70:	0762      	lsls	r2, r4, #29
 8001d72:	08ed      	lsrs	r5, r5, #3
 8001d74:	0264      	lsls	r4, r4, #9
 8001d76:	0549      	lsls	r1, r1, #21
 8001d78:	4315      	orrs	r5, r2
 8001d7a:	0b24      	lsrs	r4, r4, #12
 8001d7c:	0d4a      	lsrs	r2, r1, #21
 8001d7e:	e710      	b.n	8001ba2 <__aeabi_dmul+0xc2>
 8001d80:	4652      	mov	r2, sl
 8001d82:	4332      	orrs	r2, r6
 8001d84:	d100      	bne.n	8001d88 <__aeabi_dmul+0x2a8>
 8001d86:	e07f      	b.n	8001e88 <__aeabi_dmul+0x3a8>
 8001d88:	2e00      	cmp	r6, #0
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dmul+0x2ae>
 8001d8c:	e0dc      	b.n	8001f48 <__aeabi_dmul+0x468>
 8001d8e:	0030      	movs	r0, r6
 8001d90:	f000 fe32 	bl	80029f8 <__clzsi2>
 8001d94:	0002      	movs	r2, r0
 8001d96:	3a0b      	subs	r2, #11
 8001d98:	231d      	movs	r3, #29
 8001d9a:	0001      	movs	r1, r0
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	4652      	mov	r2, sl
 8001da0:	3908      	subs	r1, #8
 8001da2:	40da      	lsrs	r2, r3
 8001da4:	408e      	lsls	r6, r1
 8001da6:	4316      	orrs	r6, r2
 8001da8:	4652      	mov	r2, sl
 8001daa:	408a      	lsls	r2, r1
 8001dac:	9b00      	ldr	r3, [sp, #0]
 8001dae:	4935      	ldr	r1, [pc, #212]	; (8001e84 <__aeabi_dmul+0x3a4>)
 8001db0:	1a18      	subs	r0, r3, r0
 8001db2:	0003      	movs	r3, r0
 8001db4:	468c      	mov	ip, r1
 8001db6:	4463      	add	r3, ip
 8001db8:	2000      	movs	r0, #0
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	e6d3      	b.n	8001b66 <__aeabi_dmul+0x86>
 8001dbe:	0025      	movs	r5, r4
 8001dc0:	4305      	orrs	r5, r0
 8001dc2:	d04a      	beq.n	8001e5a <__aeabi_dmul+0x37a>
 8001dc4:	2c00      	cmp	r4, #0
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dmul+0x2ea>
 8001dc8:	e0b0      	b.n	8001f2c <__aeabi_dmul+0x44c>
 8001dca:	0020      	movs	r0, r4
 8001dcc:	f000 fe14 	bl	80029f8 <__clzsi2>
 8001dd0:	0001      	movs	r1, r0
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	390b      	subs	r1, #11
 8001dd6:	231d      	movs	r3, #29
 8001dd8:	0010      	movs	r0, r2
 8001dda:	1a5b      	subs	r3, r3, r1
 8001ddc:	0031      	movs	r1, r6
 8001dde:	0035      	movs	r5, r6
 8001de0:	3808      	subs	r0, #8
 8001de2:	4084      	lsls	r4, r0
 8001de4:	40d9      	lsrs	r1, r3
 8001de6:	4085      	lsls	r5, r0
 8001de8:	430c      	orrs	r4, r1
 8001dea:	4826      	ldr	r0, [pc, #152]	; (8001e84 <__aeabi_dmul+0x3a4>)
 8001dec:	1a83      	subs	r3, r0, r2
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	2300      	movs	r3, #0
 8001df2:	4699      	mov	r9, r3
 8001df4:	469b      	mov	fp, r3
 8001df6:	e697      	b.n	8001b28 <__aeabi_dmul+0x48>
 8001df8:	0005      	movs	r5, r0
 8001dfa:	4325      	orrs	r5, r4
 8001dfc:	d126      	bne.n	8001e4c <__aeabi_dmul+0x36c>
 8001dfe:	2208      	movs	r2, #8
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	2302      	movs	r3, #2
 8001e04:	2400      	movs	r4, #0
 8001e06:	4691      	mov	r9, r2
 8001e08:	469b      	mov	fp, r3
 8001e0a:	e68d      	b.n	8001b28 <__aeabi_dmul+0x48>
 8001e0c:	4652      	mov	r2, sl
 8001e0e:	9b00      	ldr	r3, [sp, #0]
 8001e10:	4332      	orrs	r2, r6
 8001e12:	d110      	bne.n	8001e36 <__aeabi_dmul+0x356>
 8001e14:	4915      	ldr	r1, [pc, #84]	; (8001e6c <__aeabi_dmul+0x38c>)
 8001e16:	2600      	movs	r6, #0
 8001e18:	468c      	mov	ip, r1
 8001e1a:	4463      	add	r3, ip
 8001e1c:	4649      	mov	r1, r9
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2302      	movs	r3, #2
 8001e22:	4319      	orrs	r1, r3
 8001e24:	4689      	mov	r9, r1
 8001e26:	2002      	movs	r0, #2
 8001e28:	e69d      	b.n	8001b66 <__aeabi_dmul+0x86>
 8001e2a:	465b      	mov	r3, fp
 8001e2c:	9701      	str	r7, [sp, #4]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d000      	beq.n	8001e34 <__aeabi_dmul+0x354>
 8001e32:	e6ad      	b.n	8001b90 <__aeabi_dmul+0xb0>
 8001e34:	e6c3      	b.n	8001bbe <__aeabi_dmul+0xde>
 8001e36:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <__aeabi_dmul+0x38c>)
 8001e38:	2003      	movs	r0, #3
 8001e3a:	4694      	mov	ip, r2
 8001e3c:	4463      	add	r3, ip
 8001e3e:	464a      	mov	r2, r9
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2303      	movs	r3, #3
 8001e44:	431a      	orrs	r2, r3
 8001e46:	4691      	mov	r9, r2
 8001e48:	4652      	mov	r2, sl
 8001e4a:	e68c      	b.n	8001b66 <__aeabi_dmul+0x86>
 8001e4c:	220c      	movs	r2, #12
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	2303      	movs	r3, #3
 8001e52:	0005      	movs	r5, r0
 8001e54:	4691      	mov	r9, r2
 8001e56:	469b      	mov	fp, r3
 8001e58:	e666      	b.n	8001b28 <__aeabi_dmul+0x48>
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	4699      	mov	r9, r3
 8001e5e:	2300      	movs	r3, #0
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	3301      	adds	r3, #1
 8001e64:	2400      	movs	r4, #0
 8001e66:	469b      	mov	fp, r3
 8001e68:	e65e      	b.n	8001b28 <__aeabi_dmul+0x48>
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	000007ff 	.word	0x000007ff
 8001e70:	fffffc01 	.word	0xfffffc01
 8001e74:	08006ee4 	.word	0x08006ee4
 8001e78:	000003ff 	.word	0x000003ff
 8001e7c:	feffffff 	.word	0xfeffffff
 8001e80:	000007fe 	.word	0x000007fe
 8001e84:	fffffc0d 	.word	0xfffffc0d
 8001e88:	4649      	mov	r1, r9
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	4319      	orrs	r1, r3
 8001e8e:	4689      	mov	r9, r1
 8001e90:	2600      	movs	r6, #0
 8001e92:	2001      	movs	r0, #1
 8001e94:	e667      	b.n	8001b66 <__aeabi_dmul+0x86>
 8001e96:	2300      	movs	r3, #0
 8001e98:	2480      	movs	r4, #128	; 0x80
 8001e9a:	2500      	movs	r5, #0
 8001e9c:	4a43      	ldr	r2, [pc, #268]	; (8001fac <__aeabi_dmul+0x4cc>)
 8001e9e:	9301      	str	r3, [sp, #4]
 8001ea0:	0324      	lsls	r4, r4, #12
 8001ea2:	e67e      	b.n	8001ba2 <__aeabi_dmul+0xc2>
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	1a40      	subs	r0, r0, r1
 8001ea8:	2838      	cmp	r0, #56	; 0x38
 8001eaa:	dd00      	ble.n	8001eae <__aeabi_dmul+0x3ce>
 8001eac:	e676      	b.n	8001b9c <__aeabi_dmul+0xbc>
 8001eae:	281f      	cmp	r0, #31
 8001eb0:	dd5b      	ble.n	8001f6a <__aeabi_dmul+0x48a>
 8001eb2:	221f      	movs	r2, #31
 8001eb4:	0023      	movs	r3, r4
 8001eb6:	4252      	negs	r2, r2
 8001eb8:	1a51      	subs	r1, r2, r1
 8001eba:	40cb      	lsrs	r3, r1
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	2820      	cmp	r0, #32
 8001ec0:	d003      	beq.n	8001eca <__aeabi_dmul+0x3ea>
 8001ec2:	4a3b      	ldr	r2, [pc, #236]	; (8001fb0 <__aeabi_dmul+0x4d0>)
 8001ec4:	4462      	add	r2, ip
 8001ec6:	4094      	lsls	r4, r2
 8001ec8:	4325      	orrs	r5, r4
 8001eca:	1e6a      	subs	r2, r5, #1
 8001ecc:	4195      	sbcs	r5, r2
 8001ece:	002a      	movs	r2, r5
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	2107      	movs	r1, #7
 8001ed4:	000d      	movs	r5, r1
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	4015      	ands	r5, r2
 8001eda:	4211      	tst	r1, r2
 8001edc:	d05b      	beq.n	8001f96 <__aeabi_dmul+0x4b6>
 8001ede:	210f      	movs	r1, #15
 8001ee0:	2400      	movs	r4, #0
 8001ee2:	4011      	ands	r1, r2
 8001ee4:	2904      	cmp	r1, #4
 8001ee6:	d053      	beq.n	8001f90 <__aeabi_dmul+0x4b0>
 8001ee8:	1d11      	adds	r1, r2, #4
 8001eea:	4291      	cmp	r1, r2
 8001eec:	4192      	sbcs	r2, r2
 8001eee:	4252      	negs	r2, r2
 8001ef0:	18a4      	adds	r4, r4, r2
 8001ef2:	000a      	movs	r2, r1
 8001ef4:	0223      	lsls	r3, r4, #8
 8001ef6:	d54b      	bpl.n	8001f90 <__aeabi_dmul+0x4b0>
 8001ef8:	2201      	movs	r2, #1
 8001efa:	2400      	movs	r4, #0
 8001efc:	2500      	movs	r5, #0
 8001efe:	e650      	b.n	8001ba2 <__aeabi_dmul+0xc2>
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	031b      	lsls	r3, r3, #12
 8001f04:	421c      	tst	r4, r3
 8001f06:	d009      	beq.n	8001f1c <__aeabi_dmul+0x43c>
 8001f08:	421e      	tst	r6, r3
 8001f0a:	d107      	bne.n	8001f1c <__aeabi_dmul+0x43c>
 8001f0c:	4333      	orrs	r3, r6
 8001f0e:	031c      	lsls	r4, r3, #12
 8001f10:	4643      	mov	r3, r8
 8001f12:	0015      	movs	r5, r2
 8001f14:	0b24      	lsrs	r4, r4, #12
 8001f16:	4a25      	ldr	r2, [pc, #148]	; (8001fac <__aeabi_dmul+0x4cc>)
 8001f18:	9301      	str	r3, [sp, #4]
 8001f1a:	e642      	b.n	8001ba2 <__aeabi_dmul+0xc2>
 8001f1c:	2280      	movs	r2, #128	; 0x80
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	4314      	orrs	r4, r2
 8001f22:	0324      	lsls	r4, r4, #12
 8001f24:	4a21      	ldr	r2, [pc, #132]	; (8001fac <__aeabi_dmul+0x4cc>)
 8001f26:	0b24      	lsrs	r4, r4, #12
 8001f28:	9701      	str	r7, [sp, #4]
 8001f2a:	e63a      	b.n	8001ba2 <__aeabi_dmul+0xc2>
 8001f2c:	f000 fd64 	bl	80029f8 <__clzsi2>
 8001f30:	0001      	movs	r1, r0
 8001f32:	0002      	movs	r2, r0
 8001f34:	3115      	adds	r1, #21
 8001f36:	3220      	adds	r2, #32
 8001f38:	291c      	cmp	r1, #28
 8001f3a:	dc00      	bgt.n	8001f3e <__aeabi_dmul+0x45e>
 8001f3c:	e74b      	b.n	8001dd6 <__aeabi_dmul+0x2f6>
 8001f3e:	0034      	movs	r4, r6
 8001f40:	3808      	subs	r0, #8
 8001f42:	2500      	movs	r5, #0
 8001f44:	4084      	lsls	r4, r0
 8001f46:	e750      	b.n	8001dea <__aeabi_dmul+0x30a>
 8001f48:	f000 fd56 	bl	80029f8 <__clzsi2>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	001a      	movs	r2, r3
 8001f50:	3215      	adds	r2, #21
 8001f52:	3020      	adds	r0, #32
 8001f54:	2a1c      	cmp	r2, #28
 8001f56:	dc00      	bgt.n	8001f5a <__aeabi_dmul+0x47a>
 8001f58:	e71e      	b.n	8001d98 <__aeabi_dmul+0x2b8>
 8001f5a:	4656      	mov	r6, sl
 8001f5c:	3b08      	subs	r3, #8
 8001f5e:	2200      	movs	r2, #0
 8001f60:	409e      	lsls	r6, r3
 8001f62:	e723      	b.n	8001dac <__aeabi_dmul+0x2cc>
 8001f64:	9b00      	ldr	r3, [sp, #0]
 8001f66:	469c      	mov	ip, r3
 8001f68:	e6e6      	b.n	8001d38 <__aeabi_dmul+0x258>
 8001f6a:	4912      	ldr	r1, [pc, #72]	; (8001fb4 <__aeabi_dmul+0x4d4>)
 8001f6c:	0022      	movs	r2, r4
 8001f6e:	4461      	add	r1, ip
 8001f70:	002e      	movs	r6, r5
 8001f72:	408d      	lsls	r5, r1
 8001f74:	408a      	lsls	r2, r1
 8001f76:	40c6      	lsrs	r6, r0
 8001f78:	1e69      	subs	r1, r5, #1
 8001f7a:	418d      	sbcs	r5, r1
 8001f7c:	4332      	orrs	r2, r6
 8001f7e:	432a      	orrs	r2, r5
 8001f80:	40c4      	lsrs	r4, r0
 8001f82:	0753      	lsls	r3, r2, #29
 8001f84:	d0b6      	beq.n	8001ef4 <__aeabi_dmul+0x414>
 8001f86:	210f      	movs	r1, #15
 8001f88:	4011      	ands	r1, r2
 8001f8a:	2904      	cmp	r1, #4
 8001f8c:	d1ac      	bne.n	8001ee8 <__aeabi_dmul+0x408>
 8001f8e:	e7b1      	b.n	8001ef4 <__aeabi_dmul+0x414>
 8001f90:	0765      	lsls	r5, r4, #29
 8001f92:	0264      	lsls	r4, r4, #9
 8001f94:	0b24      	lsrs	r4, r4, #12
 8001f96:	08d2      	lsrs	r2, r2, #3
 8001f98:	4315      	orrs	r5, r2
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	e601      	b.n	8001ba2 <__aeabi_dmul+0xc2>
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	0312      	lsls	r2, r2, #12
 8001fa2:	4314      	orrs	r4, r2
 8001fa4:	0324      	lsls	r4, r4, #12
 8001fa6:	4a01      	ldr	r2, [pc, #4]	; (8001fac <__aeabi_dmul+0x4cc>)
 8001fa8:	0b24      	lsrs	r4, r4, #12
 8001faa:	e5fa      	b.n	8001ba2 <__aeabi_dmul+0xc2>
 8001fac:	000007ff 	.word	0x000007ff
 8001fb0:	0000043e 	.word	0x0000043e
 8001fb4:	0000041e 	.word	0x0000041e

08001fb8 <__aeabi_dsub>:
 8001fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fba:	4657      	mov	r7, sl
 8001fbc:	464e      	mov	r6, r9
 8001fbe:	4645      	mov	r5, r8
 8001fc0:	46de      	mov	lr, fp
 8001fc2:	b5e0      	push	{r5, r6, r7, lr}
 8001fc4:	001e      	movs	r6, r3
 8001fc6:	0017      	movs	r7, r2
 8001fc8:	004a      	lsls	r2, r1, #1
 8001fca:	030b      	lsls	r3, r1, #12
 8001fcc:	0d52      	lsrs	r2, r2, #21
 8001fce:	0a5b      	lsrs	r3, r3, #9
 8001fd0:	4690      	mov	r8, r2
 8001fd2:	0f42      	lsrs	r2, r0, #29
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	0fcd      	lsrs	r5, r1, #31
 8001fd8:	4ccd      	ldr	r4, [pc, #820]	; (8002310 <__aeabi_dsub+0x358>)
 8001fda:	0331      	lsls	r1, r6, #12
 8001fdc:	00c3      	lsls	r3, r0, #3
 8001fde:	4694      	mov	ip, r2
 8001fe0:	0070      	lsls	r0, r6, #1
 8001fe2:	0f7a      	lsrs	r2, r7, #29
 8001fe4:	0a49      	lsrs	r1, r1, #9
 8001fe6:	00ff      	lsls	r7, r7, #3
 8001fe8:	469a      	mov	sl, r3
 8001fea:	46b9      	mov	r9, r7
 8001fec:	0d40      	lsrs	r0, r0, #21
 8001fee:	0ff6      	lsrs	r6, r6, #31
 8001ff0:	4311      	orrs	r1, r2
 8001ff2:	42a0      	cmp	r0, r4
 8001ff4:	d100      	bne.n	8001ff8 <__aeabi_dsub+0x40>
 8001ff6:	e0b1      	b.n	800215c <__aeabi_dsub+0x1a4>
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	4056      	eors	r6, r2
 8001ffc:	46b3      	mov	fp, r6
 8001ffe:	42b5      	cmp	r5, r6
 8002000:	d100      	bne.n	8002004 <__aeabi_dsub+0x4c>
 8002002:	e088      	b.n	8002116 <__aeabi_dsub+0x15e>
 8002004:	4642      	mov	r2, r8
 8002006:	1a12      	subs	r2, r2, r0
 8002008:	2a00      	cmp	r2, #0
 800200a:	dc00      	bgt.n	800200e <__aeabi_dsub+0x56>
 800200c:	e0ae      	b.n	800216c <__aeabi_dsub+0x1b4>
 800200e:	2800      	cmp	r0, #0
 8002010:	d100      	bne.n	8002014 <__aeabi_dsub+0x5c>
 8002012:	e0c1      	b.n	8002198 <__aeabi_dsub+0x1e0>
 8002014:	48be      	ldr	r0, [pc, #760]	; (8002310 <__aeabi_dsub+0x358>)
 8002016:	4580      	cmp	r8, r0
 8002018:	d100      	bne.n	800201c <__aeabi_dsub+0x64>
 800201a:	e151      	b.n	80022c0 <__aeabi_dsub+0x308>
 800201c:	2080      	movs	r0, #128	; 0x80
 800201e:	0400      	lsls	r0, r0, #16
 8002020:	4301      	orrs	r1, r0
 8002022:	2a38      	cmp	r2, #56	; 0x38
 8002024:	dd00      	ble.n	8002028 <__aeabi_dsub+0x70>
 8002026:	e17b      	b.n	8002320 <__aeabi_dsub+0x368>
 8002028:	2a1f      	cmp	r2, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x76>
 800202c:	e1ee      	b.n	800240c <__aeabi_dsub+0x454>
 800202e:	2020      	movs	r0, #32
 8002030:	003e      	movs	r6, r7
 8002032:	1a80      	subs	r0, r0, r2
 8002034:	000c      	movs	r4, r1
 8002036:	40d6      	lsrs	r6, r2
 8002038:	40d1      	lsrs	r1, r2
 800203a:	4087      	lsls	r7, r0
 800203c:	4662      	mov	r2, ip
 800203e:	4084      	lsls	r4, r0
 8002040:	1a52      	subs	r2, r2, r1
 8002042:	1e78      	subs	r0, r7, #1
 8002044:	4187      	sbcs	r7, r0
 8002046:	4694      	mov	ip, r2
 8002048:	4334      	orrs	r4, r6
 800204a:	4327      	orrs	r7, r4
 800204c:	1bdc      	subs	r4, r3, r7
 800204e:	42a3      	cmp	r3, r4
 8002050:	419b      	sbcs	r3, r3
 8002052:	4662      	mov	r2, ip
 8002054:	425b      	negs	r3, r3
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	4699      	mov	r9, r3
 800205a:	464b      	mov	r3, r9
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	d400      	bmi.n	8002062 <__aeabi_dsub+0xaa>
 8002060:	e118      	b.n	8002294 <__aeabi_dsub+0x2dc>
 8002062:	464b      	mov	r3, r9
 8002064:	0258      	lsls	r0, r3, #9
 8002066:	0a43      	lsrs	r3, r0, #9
 8002068:	4699      	mov	r9, r3
 800206a:	464b      	mov	r3, r9
 800206c:	2b00      	cmp	r3, #0
 800206e:	d100      	bne.n	8002072 <__aeabi_dsub+0xba>
 8002070:	e137      	b.n	80022e2 <__aeabi_dsub+0x32a>
 8002072:	4648      	mov	r0, r9
 8002074:	f000 fcc0 	bl	80029f8 <__clzsi2>
 8002078:	0001      	movs	r1, r0
 800207a:	3908      	subs	r1, #8
 800207c:	2320      	movs	r3, #32
 800207e:	0022      	movs	r2, r4
 8002080:	4648      	mov	r0, r9
 8002082:	1a5b      	subs	r3, r3, r1
 8002084:	40da      	lsrs	r2, r3
 8002086:	4088      	lsls	r0, r1
 8002088:	408c      	lsls	r4, r1
 800208a:	4643      	mov	r3, r8
 800208c:	4310      	orrs	r0, r2
 800208e:	4588      	cmp	r8, r1
 8002090:	dd00      	ble.n	8002094 <__aeabi_dsub+0xdc>
 8002092:	e136      	b.n	8002302 <__aeabi_dsub+0x34a>
 8002094:	1ac9      	subs	r1, r1, r3
 8002096:	1c4b      	adds	r3, r1, #1
 8002098:	2b1f      	cmp	r3, #31
 800209a:	dd00      	ble.n	800209e <__aeabi_dsub+0xe6>
 800209c:	e0ea      	b.n	8002274 <__aeabi_dsub+0x2bc>
 800209e:	2220      	movs	r2, #32
 80020a0:	0026      	movs	r6, r4
 80020a2:	1ad2      	subs	r2, r2, r3
 80020a4:	0001      	movs	r1, r0
 80020a6:	4094      	lsls	r4, r2
 80020a8:	40de      	lsrs	r6, r3
 80020aa:	40d8      	lsrs	r0, r3
 80020ac:	2300      	movs	r3, #0
 80020ae:	4091      	lsls	r1, r2
 80020b0:	1e62      	subs	r2, r4, #1
 80020b2:	4194      	sbcs	r4, r2
 80020b4:	4681      	mov	r9, r0
 80020b6:	4698      	mov	r8, r3
 80020b8:	4331      	orrs	r1, r6
 80020ba:	430c      	orrs	r4, r1
 80020bc:	0763      	lsls	r3, r4, #29
 80020be:	d009      	beq.n	80020d4 <__aeabi_dsub+0x11c>
 80020c0:	230f      	movs	r3, #15
 80020c2:	4023      	ands	r3, r4
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d005      	beq.n	80020d4 <__aeabi_dsub+0x11c>
 80020c8:	1d23      	adds	r3, r4, #4
 80020ca:	42a3      	cmp	r3, r4
 80020cc:	41a4      	sbcs	r4, r4
 80020ce:	4264      	negs	r4, r4
 80020d0:	44a1      	add	r9, r4
 80020d2:	001c      	movs	r4, r3
 80020d4:	464b      	mov	r3, r9
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	d400      	bmi.n	80020dc <__aeabi_dsub+0x124>
 80020da:	e0de      	b.n	800229a <__aeabi_dsub+0x2e2>
 80020dc:	4641      	mov	r1, r8
 80020de:	4b8c      	ldr	r3, [pc, #560]	; (8002310 <__aeabi_dsub+0x358>)
 80020e0:	3101      	adds	r1, #1
 80020e2:	4299      	cmp	r1, r3
 80020e4:	d100      	bne.n	80020e8 <__aeabi_dsub+0x130>
 80020e6:	e0e7      	b.n	80022b8 <__aeabi_dsub+0x300>
 80020e8:	464b      	mov	r3, r9
 80020ea:	488a      	ldr	r0, [pc, #552]	; (8002314 <__aeabi_dsub+0x35c>)
 80020ec:	08e4      	lsrs	r4, r4, #3
 80020ee:	4003      	ands	r3, r0
 80020f0:	0018      	movs	r0, r3
 80020f2:	0549      	lsls	r1, r1, #21
 80020f4:	075b      	lsls	r3, r3, #29
 80020f6:	0240      	lsls	r0, r0, #9
 80020f8:	4323      	orrs	r3, r4
 80020fa:	0d4a      	lsrs	r2, r1, #21
 80020fc:	0b04      	lsrs	r4, r0, #12
 80020fe:	0512      	lsls	r2, r2, #20
 8002100:	07ed      	lsls	r5, r5, #31
 8002102:	4322      	orrs	r2, r4
 8002104:	432a      	orrs	r2, r5
 8002106:	0018      	movs	r0, r3
 8002108:	0011      	movs	r1, r2
 800210a:	bcf0      	pop	{r4, r5, r6, r7}
 800210c:	46bb      	mov	fp, r7
 800210e:	46b2      	mov	sl, r6
 8002110:	46a9      	mov	r9, r5
 8002112:	46a0      	mov	r8, r4
 8002114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002116:	4642      	mov	r2, r8
 8002118:	1a12      	subs	r2, r2, r0
 800211a:	2a00      	cmp	r2, #0
 800211c:	dd52      	ble.n	80021c4 <__aeabi_dsub+0x20c>
 800211e:	2800      	cmp	r0, #0
 8002120:	d100      	bne.n	8002124 <__aeabi_dsub+0x16c>
 8002122:	e09c      	b.n	800225e <__aeabi_dsub+0x2a6>
 8002124:	45a0      	cmp	r8, r4
 8002126:	d100      	bne.n	800212a <__aeabi_dsub+0x172>
 8002128:	e0ca      	b.n	80022c0 <__aeabi_dsub+0x308>
 800212a:	2080      	movs	r0, #128	; 0x80
 800212c:	0400      	lsls	r0, r0, #16
 800212e:	4301      	orrs	r1, r0
 8002130:	2a38      	cmp	r2, #56	; 0x38
 8002132:	dd00      	ble.n	8002136 <__aeabi_dsub+0x17e>
 8002134:	e149      	b.n	80023ca <__aeabi_dsub+0x412>
 8002136:	2a1f      	cmp	r2, #31
 8002138:	dc00      	bgt.n	800213c <__aeabi_dsub+0x184>
 800213a:	e197      	b.n	800246c <__aeabi_dsub+0x4b4>
 800213c:	0010      	movs	r0, r2
 800213e:	000e      	movs	r6, r1
 8002140:	3820      	subs	r0, #32
 8002142:	40c6      	lsrs	r6, r0
 8002144:	2a20      	cmp	r2, #32
 8002146:	d004      	beq.n	8002152 <__aeabi_dsub+0x19a>
 8002148:	2040      	movs	r0, #64	; 0x40
 800214a:	1a82      	subs	r2, r0, r2
 800214c:	4091      	lsls	r1, r2
 800214e:	430f      	orrs	r7, r1
 8002150:	46b9      	mov	r9, r7
 8002152:	464c      	mov	r4, r9
 8002154:	1e62      	subs	r2, r4, #1
 8002156:	4194      	sbcs	r4, r2
 8002158:	4334      	orrs	r4, r6
 800215a:	e13a      	b.n	80023d2 <__aeabi_dsub+0x41a>
 800215c:	000a      	movs	r2, r1
 800215e:	433a      	orrs	r2, r7
 8002160:	d028      	beq.n	80021b4 <__aeabi_dsub+0x1fc>
 8002162:	46b3      	mov	fp, r6
 8002164:	42b5      	cmp	r5, r6
 8002166:	d02b      	beq.n	80021c0 <__aeabi_dsub+0x208>
 8002168:	4a6b      	ldr	r2, [pc, #428]	; (8002318 <__aeabi_dsub+0x360>)
 800216a:	4442      	add	r2, r8
 800216c:	2a00      	cmp	r2, #0
 800216e:	d05d      	beq.n	800222c <__aeabi_dsub+0x274>
 8002170:	4642      	mov	r2, r8
 8002172:	4644      	mov	r4, r8
 8002174:	1a82      	subs	r2, r0, r2
 8002176:	2c00      	cmp	r4, #0
 8002178:	d000      	beq.n	800217c <__aeabi_dsub+0x1c4>
 800217a:	e0f5      	b.n	8002368 <__aeabi_dsub+0x3b0>
 800217c:	4665      	mov	r5, ip
 800217e:	431d      	orrs	r5, r3
 8002180:	d100      	bne.n	8002184 <__aeabi_dsub+0x1cc>
 8002182:	e19c      	b.n	80024be <__aeabi_dsub+0x506>
 8002184:	1e55      	subs	r5, r2, #1
 8002186:	2a01      	cmp	r2, #1
 8002188:	d100      	bne.n	800218c <__aeabi_dsub+0x1d4>
 800218a:	e1fb      	b.n	8002584 <__aeabi_dsub+0x5cc>
 800218c:	4c60      	ldr	r4, [pc, #384]	; (8002310 <__aeabi_dsub+0x358>)
 800218e:	42a2      	cmp	r2, r4
 8002190:	d100      	bne.n	8002194 <__aeabi_dsub+0x1dc>
 8002192:	e1bd      	b.n	8002510 <__aeabi_dsub+0x558>
 8002194:	002a      	movs	r2, r5
 8002196:	e0f0      	b.n	800237a <__aeabi_dsub+0x3c2>
 8002198:	0008      	movs	r0, r1
 800219a:	4338      	orrs	r0, r7
 800219c:	d100      	bne.n	80021a0 <__aeabi_dsub+0x1e8>
 800219e:	e0c3      	b.n	8002328 <__aeabi_dsub+0x370>
 80021a0:	1e50      	subs	r0, r2, #1
 80021a2:	2a01      	cmp	r2, #1
 80021a4:	d100      	bne.n	80021a8 <__aeabi_dsub+0x1f0>
 80021a6:	e1a8      	b.n	80024fa <__aeabi_dsub+0x542>
 80021a8:	4c59      	ldr	r4, [pc, #356]	; (8002310 <__aeabi_dsub+0x358>)
 80021aa:	42a2      	cmp	r2, r4
 80021ac:	d100      	bne.n	80021b0 <__aeabi_dsub+0x1f8>
 80021ae:	e087      	b.n	80022c0 <__aeabi_dsub+0x308>
 80021b0:	0002      	movs	r2, r0
 80021b2:	e736      	b.n	8002022 <__aeabi_dsub+0x6a>
 80021b4:	2201      	movs	r2, #1
 80021b6:	4056      	eors	r6, r2
 80021b8:	46b3      	mov	fp, r6
 80021ba:	42b5      	cmp	r5, r6
 80021bc:	d000      	beq.n	80021c0 <__aeabi_dsub+0x208>
 80021be:	e721      	b.n	8002004 <__aeabi_dsub+0x4c>
 80021c0:	4a55      	ldr	r2, [pc, #340]	; (8002318 <__aeabi_dsub+0x360>)
 80021c2:	4442      	add	r2, r8
 80021c4:	2a00      	cmp	r2, #0
 80021c6:	d100      	bne.n	80021ca <__aeabi_dsub+0x212>
 80021c8:	e0b5      	b.n	8002336 <__aeabi_dsub+0x37e>
 80021ca:	4642      	mov	r2, r8
 80021cc:	4644      	mov	r4, r8
 80021ce:	1a82      	subs	r2, r0, r2
 80021d0:	2c00      	cmp	r4, #0
 80021d2:	d100      	bne.n	80021d6 <__aeabi_dsub+0x21e>
 80021d4:	e138      	b.n	8002448 <__aeabi_dsub+0x490>
 80021d6:	4e4e      	ldr	r6, [pc, #312]	; (8002310 <__aeabi_dsub+0x358>)
 80021d8:	42b0      	cmp	r0, r6
 80021da:	d100      	bne.n	80021de <__aeabi_dsub+0x226>
 80021dc:	e1de      	b.n	800259c <__aeabi_dsub+0x5e4>
 80021de:	2680      	movs	r6, #128	; 0x80
 80021e0:	4664      	mov	r4, ip
 80021e2:	0436      	lsls	r6, r6, #16
 80021e4:	4334      	orrs	r4, r6
 80021e6:	46a4      	mov	ip, r4
 80021e8:	2a38      	cmp	r2, #56	; 0x38
 80021ea:	dd00      	ble.n	80021ee <__aeabi_dsub+0x236>
 80021ec:	e196      	b.n	800251c <__aeabi_dsub+0x564>
 80021ee:	2a1f      	cmp	r2, #31
 80021f0:	dd00      	ble.n	80021f4 <__aeabi_dsub+0x23c>
 80021f2:	e224      	b.n	800263e <__aeabi_dsub+0x686>
 80021f4:	2620      	movs	r6, #32
 80021f6:	1ab4      	subs	r4, r6, r2
 80021f8:	46a2      	mov	sl, r4
 80021fa:	4664      	mov	r4, ip
 80021fc:	4656      	mov	r6, sl
 80021fe:	40b4      	lsls	r4, r6
 8002200:	46a1      	mov	r9, r4
 8002202:	001c      	movs	r4, r3
 8002204:	464e      	mov	r6, r9
 8002206:	40d4      	lsrs	r4, r2
 8002208:	4326      	orrs	r6, r4
 800220a:	0034      	movs	r4, r6
 800220c:	4656      	mov	r6, sl
 800220e:	40b3      	lsls	r3, r6
 8002210:	1e5e      	subs	r6, r3, #1
 8002212:	41b3      	sbcs	r3, r6
 8002214:	431c      	orrs	r4, r3
 8002216:	4663      	mov	r3, ip
 8002218:	40d3      	lsrs	r3, r2
 800221a:	18c9      	adds	r1, r1, r3
 800221c:	19e4      	adds	r4, r4, r7
 800221e:	42bc      	cmp	r4, r7
 8002220:	41bf      	sbcs	r7, r7
 8002222:	427f      	negs	r7, r7
 8002224:	46b9      	mov	r9, r7
 8002226:	4680      	mov	r8, r0
 8002228:	4489      	add	r9, r1
 800222a:	e0d8      	b.n	80023de <__aeabi_dsub+0x426>
 800222c:	4640      	mov	r0, r8
 800222e:	4c3b      	ldr	r4, [pc, #236]	; (800231c <__aeabi_dsub+0x364>)
 8002230:	3001      	adds	r0, #1
 8002232:	4220      	tst	r0, r4
 8002234:	d000      	beq.n	8002238 <__aeabi_dsub+0x280>
 8002236:	e0b4      	b.n	80023a2 <__aeabi_dsub+0x3ea>
 8002238:	4640      	mov	r0, r8
 800223a:	2800      	cmp	r0, #0
 800223c:	d000      	beq.n	8002240 <__aeabi_dsub+0x288>
 800223e:	e144      	b.n	80024ca <__aeabi_dsub+0x512>
 8002240:	4660      	mov	r0, ip
 8002242:	4318      	orrs	r0, r3
 8002244:	d100      	bne.n	8002248 <__aeabi_dsub+0x290>
 8002246:	e190      	b.n	800256a <__aeabi_dsub+0x5b2>
 8002248:	0008      	movs	r0, r1
 800224a:	4338      	orrs	r0, r7
 800224c:	d000      	beq.n	8002250 <__aeabi_dsub+0x298>
 800224e:	e1aa      	b.n	80025a6 <__aeabi_dsub+0x5ee>
 8002250:	4661      	mov	r1, ip
 8002252:	08db      	lsrs	r3, r3, #3
 8002254:	0749      	lsls	r1, r1, #29
 8002256:	430b      	orrs	r3, r1
 8002258:	4661      	mov	r1, ip
 800225a:	08cc      	lsrs	r4, r1, #3
 800225c:	e027      	b.n	80022ae <__aeabi_dsub+0x2f6>
 800225e:	0008      	movs	r0, r1
 8002260:	4338      	orrs	r0, r7
 8002262:	d061      	beq.n	8002328 <__aeabi_dsub+0x370>
 8002264:	1e50      	subs	r0, r2, #1
 8002266:	2a01      	cmp	r2, #1
 8002268:	d100      	bne.n	800226c <__aeabi_dsub+0x2b4>
 800226a:	e139      	b.n	80024e0 <__aeabi_dsub+0x528>
 800226c:	42a2      	cmp	r2, r4
 800226e:	d027      	beq.n	80022c0 <__aeabi_dsub+0x308>
 8002270:	0002      	movs	r2, r0
 8002272:	e75d      	b.n	8002130 <__aeabi_dsub+0x178>
 8002274:	0002      	movs	r2, r0
 8002276:	391f      	subs	r1, #31
 8002278:	40ca      	lsrs	r2, r1
 800227a:	0011      	movs	r1, r2
 800227c:	2b20      	cmp	r3, #32
 800227e:	d003      	beq.n	8002288 <__aeabi_dsub+0x2d0>
 8002280:	2240      	movs	r2, #64	; 0x40
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	4098      	lsls	r0, r3
 8002286:	4304      	orrs	r4, r0
 8002288:	1e63      	subs	r3, r4, #1
 800228a:	419c      	sbcs	r4, r3
 800228c:	2300      	movs	r3, #0
 800228e:	4699      	mov	r9, r3
 8002290:	4698      	mov	r8, r3
 8002292:	430c      	orrs	r4, r1
 8002294:	0763      	lsls	r3, r4, #29
 8002296:	d000      	beq.n	800229a <__aeabi_dsub+0x2e2>
 8002298:	e712      	b.n	80020c0 <__aeabi_dsub+0x108>
 800229a:	464b      	mov	r3, r9
 800229c:	464a      	mov	r2, r9
 800229e:	08e4      	lsrs	r4, r4, #3
 80022a0:	075b      	lsls	r3, r3, #29
 80022a2:	4323      	orrs	r3, r4
 80022a4:	08d4      	lsrs	r4, r2, #3
 80022a6:	4642      	mov	r2, r8
 80022a8:	4919      	ldr	r1, [pc, #100]	; (8002310 <__aeabi_dsub+0x358>)
 80022aa:	428a      	cmp	r2, r1
 80022ac:	d00e      	beq.n	80022cc <__aeabi_dsub+0x314>
 80022ae:	0324      	lsls	r4, r4, #12
 80022b0:	0552      	lsls	r2, r2, #21
 80022b2:	0b24      	lsrs	r4, r4, #12
 80022b4:	0d52      	lsrs	r2, r2, #21
 80022b6:	e722      	b.n	80020fe <__aeabi_dsub+0x146>
 80022b8:	000a      	movs	r2, r1
 80022ba:	2400      	movs	r4, #0
 80022bc:	2300      	movs	r3, #0
 80022be:	e71e      	b.n	80020fe <__aeabi_dsub+0x146>
 80022c0:	08db      	lsrs	r3, r3, #3
 80022c2:	4662      	mov	r2, ip
 80022c4:	0752      	lsls	r2, r2, #29
 80022c6:	4313      	orrs	r3, r2
 80022c8:	4662      	mov	r2, ip
 80022ca:	08d4      	lsrs	r4, r2, #3
 80022cc:	001a      	movs	r2, r3
 80022ce:	4322      	orrs	r2, r4
 80022d0:	d100      	bne.n	80022d4 <__aeabi_dsub+0x31c>
 80022d2:	e1fc      	b.n	80026ce <__aeabi_dsub+0x716>
 80022d4:	2280      	movs	r2, #128	; 0x80
 80022d6:	0312      	lsls	r2, r2, #12
 80022d8:	4314      	orrs	r4, r2
 80022da:	0324      	lsls	r4, r4, #12
 80022dc:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <__aeabi_dsub+0x358>)
 80022de:	0b24      	lsrs	r4, r4, #12
 80022e0:	e70d      	b.n	80020fe <__aeabi_dsub+0x146>
 80022e2:	0020      	movs	r0, r4
 80022e4:	f000 fb88 	bl	80029f8 <__clzsi2>
 80022e8:	0001      	movs	r1, r0
 80022ea:	3118      	adds	r1, #24
 80022ec:	291f      	cmp	r1, #31
 80022ee:	dc00      	bgt.n	80022f2 <__aeabi_dsub+0x33a>
 80022f0:	e6c4      	b.n	800207c <__aeabi_dsub+0xc4>
 80022f2:	3808      	subs	r0, #8
 80022f4:	4084      	lsls	r4, r0
 80022f6:	4643      	mov	r3, r8
 80022f8:	0020      	movs	r0, r4
 80022fa:	2400      	movs	r4, #0
 80022fc:	4588      	cmp	r8, r1
 80022fe:	dc00      	bgt.n	8002302 <__aeabi_dsub+0x34a>
 8002300:	e6c8      	b.n	8002094 <__aeabi_dsub+0xdc>
 8002302:	4a04      	ldr	r2, [pc, #16]	; (8002314 <__aeabi_dsub+0x35c>)
 8002304:	1a5b      	subs	r3, r3, r1
 8002306:	4010      	ands	r0, r2
 8002308:	4698      	mov	r8, r3
 800230a:	4681      	mov	r9, r0
 800230c:	e6d6      	b.n	80020bc <__aeabi_dsub+0x104>
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	000007ff 	.word	0x000007ff
 8002314:	ff7fffff 	.word	0xff7fffff
 8002318:	fffff801 	.word	0xfffff801
 800231c:	000007fe 	.word	0x000007fe
 8002320:	430f      	orrs	r7, r1
 8002322:	1e7a      	subs	r2, r7, #1
 8002324:	4197      	sbcs	r7, r2
 8002326:	e691      	b.n	800204c <__aeabi_dsub+0x94>
 8002328:	4661      	mov	r1, ip
 800232a:	08db      	lsrs	r3, r3, #3
 800232c:	0749      	lsls	r1, r1, #29
 800232e:	430b      	orrs	r3, r1
 8002330:	4661      	mov	r1, ip
 8002332:	08cc      	lsrs	r4, r1, #3
 8002334:	e7b8      	b.n	80022a8 <__aeabi_dsub+0x2f0>
 8002336:	4640      	mov	r0, r8
 8002338:	4cd3      	ldr	r4, [pc, #844]	; (8002688 <__aeabi_dsub+0x6d0>)
 800233a:	3001      	adds	r0, #1
 800233c:	4220      	tst	r0, r4
 800233e:	d000      	beq.n	8002342 <__aeabi_dsub+0x38a>
 8002340:	e0a2      	b.n	8002488 <__aeabi_dsub+0x4d0>
 8002342:	4640      	mov	r0, r8
 8002344:	2800      	cmp	r0, #0
 8002346:	d000      	beq.n	800234a <__aeabi_dsub+0x392>
 8002348:	e101      	b.n	800254e <__aeabi_dsub+0x596>
 800234a:	4660      	mov	r0, ip
 800234c:	4318      	orrs	r0, r3
 800234e:	d100      	bne.n	8002352 <__aeabi_dsub+0x39a>
 8002350:	e15e      	b.n	8002610 <__aeabi_dsub+0x658>
 8002352:	0008      	movs	r0, r1
 8002354:	4338      	orrs	r0, r7
 8002356:	d000      	beq.n	800235a <__aeabi_dsub+0x3a2>
 8002358:	e15f      	b.n	800261a <__aeabi_dsub+0x662>
 800235a:	4661      	mov	r1, ip
 800235c:	08db      	lsrs	r3, r3, #3
 800235e:	0749      	lsls	r1, r1, #29
 8002360:	430b      	orrs	r3, r1
 8002362:	4661      	mov	r1, ip
 8002364:	08cc      	lsrs	r4, r1, #3
 8002366:	e7a2      	b.n	80022ae <__aeabi_dsub+0x2f6>
 8002368:	4dc8      	ldr	r5, [pc, #800]	; (800268c <__aeabi_dsub+0x6d4>)
 800236a:	42a8      	cmp	r0, r5
 800236c:	d100      	bne.n	8002370 <__aeabi_dsub+0x3b8>
 800236e:	e0cf      	b.n	8002510 <__aeabi_dsub+0x558>
 8002370:	2580      	movs	r5, #128	; 0x80
 8002372:	4664      	mov	r4, ip
 8002374:	042d      	lsls	r5, r5, #16
 8002376:	432c      	orrs	r4, r5
 8002378:	46a4      	mov	ip, r4
 800237a:	2a38      	cmp	r2, #56	; 0x38
 800237c:	dc56      	bgt.n	800242c <__aeabi_dsub+0x474>
 800237e:	2a1f      	cmp	r2, #31
 8002380:	dd00      	ble.n	8002384 <__aeabi_dsub+0x3cc>
 8002382:	e0d1      	b.n	8002528 <__aeabi_dsub+0x570>
 8002384:	2520      	movs	r5, #32
 8002386:	001e      	movs	r6, r3
 8002388:	1aad      	subs	r5, r5, r2
 800238a:	4664      	mov	r4, ip
 800238c:	40ab      	lsls	r3, r5
 800238e:	40ac      	lsls	r4, r5
 8002390:	40d6      	lsrs	r6, r2
 8002392:	1e5d      	subs	r5, r3, #1
 8002394:	41ab      	sbcs	r3, r5
 8002396:	4334      	orrs	r4, r6
 8002398:	4323      	orrs	r3, r4
 800239a:	4664      	mov	r4, ip
 800239c:	40d4      	lsrs	r4, r2
 800239e:	1b09      	subs	r1, r1, r4
 80023a0:	e049      	b.n	8002436 <__aeabi_dsub+0x47e>
 80023a2:	4660      	mov	r0, ip
 80023a4:	1bdc      	subs	r4, r3, r7
 80023a6:	1a46      	subs	r6, r0, r1
 80023a8:	42a3      	cmp	r3, r4
 80023aa:	4180      	sbcs	r0, r0
 80023ac:	4240      	negs	r0, r0
 80023ae:	4681      	mov	r9, r0
 80023b0:	0030      	movs	r0, r6
 80023b2:	464e      	mov	r6, r9
 80023b4:	1b80      	subs	r0, r0, r6
 80023b6:	4681      	mov	r9, r0
 80023b8:	0200      	lsls	r0, r0, #8
 80023ba:	d476      	bmi.n	80024aa <__aeabi_dsub+0x4f2>
 80023bc:	464b      	mov	r3, r9
 80023be:	4323      	orrs	r3, r4
 80023c0:	d000      	beq.n	80023c4 <__aeabi_dsub+0x40c>
 80023c2:	e652      	b.n	800206a <__aeabi_dsub+0xb2>
 80023c4:	2400      	movs	r4, #0
 80023c6:	2500      	movs	r5, #0
 80023c8:	e771      	b.n	80022ae <__aeabi_dsub+0x2f6>
 80023ca:	4339      	orrs	r1, r7
 80023cc:	000c      	movs	r4, r1
 80023ce:	1e62      	subs	r2, r4, #1
 80023d0:	4194      	sbcs	r4, r2
 80023d2:	18e4      	adds	r4, r4, r3
 80023d4:	429c      	cmp	r4, r3
 80023d6:	419b      	sbcs	r3, r3
 80023d8:	425b      	negs	r3, r3
 80023da:	4463      	add	r3, ip
 80023dc:	4699      	mov	r9, r3
 80023de:	464b      	mov	r3, r9
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	d400      	bmi.n	80023e6 <__aeabi_dsub+0x42e>
 80023e4:	e756      	b.n	8002294 <__aeabi_dsub+0x2dc>
 80023e6:	2301      	movs	r3, #1
 80023e8:	469c      	mov	ip, r3
 80023ea:	4ba8      	ldr	r3, [pc, #672]	; (800268c <__aeabi_dsub+0x6d4>)
 80023ec:	44e0      	add	r8, ip
 80023ee:	4598      	cmp	r8, r3
 80023f0:	d038      	beq.n	8002464 <__aeabi_dsub+0x4ac>
 80023f2:	464b      	mov	r3, r9
 80023f4:	48a6      	ldr	r0, [pc, #664]	; (8002690 <__aeabi_dsub+0x6d8>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	4003      	ands	r3, r0
 80023fa:	0018      	movs	r0, r3
 80023fc:	0863      	lsrs	r3, r4, #1
 80023fe:	4014      	ands	r4, r2
 8002400:	431c      	orrs	r4, r3
 8002402:	07c3      	lsls	r3, r0, #31
 8002404:	431c      	orrs	r4, r3
 8002406:	0843      	lsrs	r3, r0, #1
 8002408:	4699      	mov	r9, r3
 800240a:	e657      	b.n	80020bc <__aeabi_dsub+0x104>
 800240c:	0010      	movs	r0, r2
 800240e:	000e      	movs	r6, r1
 8002410:	3820      	subs	r0, #32
 8002412:	40c6      	lsrs	r6, r0
 8002414:	2a20      	cmp	r2, #32
 8002416:	d004      	beq.n	8002422 <__aeabi_dsub+0x46a>
 8002418:	2040      	movs	r0, #64	; 0x40
 800241a:	1a82      	subs	r2, r0, r2
 800241c:	4091      	lsls	r1, r2
 800241e:	430f      	orrs	r7, r1
 8002420:	46b9      	mov	r9, r7
 8002422:	464f      	mov	r7, r9
 8002424:	1e7a      	subs	r2, r7, #1
 8002426:	4197      	sbcs	r7, r2
 8002428:	4337      	orrs	r7, r6
 800242a:	e60f      	b.n	800204c <__aeabi_dsub+0x94>
 800242c:	4662      	mov	r2, ip
 800242e:	431a      	orrs	r2, r3
 8002430:	0013      	movs	r3, r2
 8002432:	1e5a      	subs	r2, r3, #1
 8002434:	4193      	sbcs	r3, r2
 8002436:	1afc      	subs	r4, r7, r3
 8002438:	42a7      	cmp	r7, r4
 800243a:	41bf      	sbcs	r7, r7
 800243c:	427f      	negs	r7, r7
 800243e:	1bcb      	subs	r3, r1, r7
 8002440:	4699      	mov	r9, r3
 8002442:	465d      	mov	r5, fp
 8002444:	4680      	mov	r8, r0
 8002446:	e608      	b.n	800205a <__aeabi_dsub+0xa2>
 8002448:	4666      	mov	r6, ip
 800244a:	431e      	orrs	r6, r3
 800244c:	d100      	bne.n	8002450 <__aeabi_dsub+0x498>
 800244e:	e0be      	b.n	80025ce <__aeabi_dsub+0x616>
 8002450:	1e56      	subs	r6, r2, #1
 8002452:	2a01      	cmp	r2, #1
 8002454:	d100      	bne.n	8002458 <__aeabi_dsub+0x4a0>
 8002456:	e109      	b.n	800266c <__aeabi_dsub+0x6b4>
 8002458:	4c8c      	ldr	r4, [pc, #560]	; (800268c <__aeabi_dsub+0x6d4>)
 800245a:	42a2      	cmp	r2, r4
 800245c:	d100      	bne.n	8002460 <__aeabi_dsub+0x4a8>
 800245e:	e119      	b.n	8002694 <__aeabi_dsub+0x6dc>
 8002460:	0032      	movs	r2, r6
 8002462:	e6c1      	b.n	80021e8 <__aeabi_dsub+0x230>
 8002464:	4642      	mov	r2, r8
 8002466:	2400      	movs	r4, #0
 8002468:	2300      	movs	r3, #0
 800246a:	e648      	b.n	80020fe <__aeabi_dsub+0x146>
 800246c:	2020      	movs	r0, #32
 800246e:	000c      	movs	r4, r1
 8002470:	1a80      	subs	r0, r0, r2
 8002472:	003e      	movs	r6, r7
 8002474:	4087      	lsls	r7, r0
 8002476:	4084      	lsls	r4, r0
 8002478:	40d6      	lsrs	r6, r2
 800247a:	1e78      	subs	r0, r7, #1
 800247c:	4187      	sbcs	r7, r0
 800247e:	40d1      	lsrs	r1, r2
 8002480:	4334      	orrs	r4, r6
 8002482:	433c      	orrs	r4, r7
 8002484:	448c      	add	ip, r1
 8002486:	e7a4      	b.n	80023d2 <__aeabi_dsub+0x41a>
 8002488:	4a80      	ldr	r2, [pc, #512]	; (800268c <__aeabi_dsub+0x6d4>)
 800248a:	4290      	cmp	r0, r2
 800248c:	d100      	bne.n	8002490 <__aeabi_dsub+0x4d8>
 800248e:	e0e9      	b.n	8002664 <__aeabi_dsub+0x6ac>
 8002490:	19df      	adds	r7, r3, r7
 8002492:	429f      	cmp	r7, r3
 8002494:	419b      	sbcs	r3, r3
 8002496:	4461      	add	r1, ip
 8002498:	425b      	negs	r3, r3
 800249a:	18c9      	adds	r1, r1, r3
 800249c:	07cc      	lsls	r4, r1, #31
 800249e:	087f      	lsrs	r7, r7, #1
 80024a0:	084b      	lsrs	r3, r1, #1
 80024a2:	4699      	mov	r9, r3
 80024a4:	4680      	mov	r8, r0
 80024a6:	433c      	orrs	r4, r7
 80024a8:	e6f4      	b.n	8002294 <__aeabi_dsub+0x2dc>
 80024aa:	1afc      	subs	r4, r7, r3
 80024ac:	42a7      	cmp	r7, r4
 80024ae:	41bf      	sbcs	r7, r7
 80024b0:	4663      	mov	r3, ip
 80024b2:	427f      	negs	r7, r7
 80024b4:	1ac9      	subs	r1, r1, r3
 80024b6:	1bcb      	subs	r3, r1, r7
 80024b8:	4699      	mov	r9, r3
 80024ba:	465d      	mov	r5, fp
 80024bc:	e5d5      	b.n	800206a <__aeabi_dsub+0xb2>
 80024be:	08ff      	lsrs	r7, r7, #3
 80024c0:	074b      	lsls	r3, r1, #29
 80024c2:	465d      	mov	r5, fp
 80024c4:	433b      	orrs	r3, r7
 80024c6:	08cc      	lsrs	r4, r1, #3
 80024c8:	e6ee      	b.n	80022a8 <__aeabi_dsub+0x2f0>
 80024ca:	4662      	mov	r2, ip
 80024cc:	431a      	orrs	r2, r3
 80024ce:	d000      	beq.n	80024d2 <__aeabi_dsub+0x51a>
 80024d0:	e082      	b.n	80025d8 <__aeabi_dsub+0x620>
 80024d2:	000b      	movs	r3, r1
 80024d4:	433b      	orrs	r3, r7
 80024d6:	d11b      	bne.n	8002510 <__aeabi_dsub+0x558>
 80024d8:	2480      	movs	r4, #128	; 0x80
 80024da:	2500      	movs	r5, #0
 80024dc:	0324      	lsls	r4, r4, #12
 80024de:	e6f9      	b.n	80022d4 <__aeabi_dsub+0x31c>
 80024e0:	19dc      	adds	r4, r3, r7
 80024e2:	429c      	cmp	r4, r3
 80024e4:	419b      	sbcs	r3, r3
 80024e6:	4461      	add	r1, ip
 80024e8:	4689      	mov	r9, r1
 80024ea:	425b      	negs	r3, r3
 80024ec:	4499      	add	r9, r3
 80024ee:	464b      	mov	r3, r9
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	d444      	bmi.n	800257e <__aeabi_dsub+0x5c6>
 80024f4:	2301      	movs	r3, #1
 80024f6:	4698      	mov	r8, r3
 80024f8:	e6cc      	b.n	8002294 <__aeabi_dsub+0x2dc>
 80024fa:	1bdc      	subs	r4, r3, r7
 80024fc:	4662      	mov	r2, ip
 80024fe:	42a3      	cmp	r3, r4
 8002500:	419b      	sbcs	r3, r3
 8002502:	1a51      	subs	r1, r2, r1
 8002504:	425b      	negs	r3, r3
 8002506:	1acb      	subs	r3, r1, r3
 8002508:	4699      	mov	r9, r3
 800250a:	2301      	movs	r3, #1
 800250c:	4698      	mov	r8, r3
 800250e:	e5a4      	b.n	800205a <__aeabi_dsub+0xa2>
 8002510:	08ff      	lsrs	r7, r7, #3
 8002512:	074b      	lsls	r3, r1, #29
 8002514:	465d      	mov	r5, fp
 8002516:	433b      	orrs	r3, r7
 8002518:	08cc      	lsrs	r4, r1, #3
 800251a:	e6d7      	b.n	80022cc <__aeabi_dsub+0x314>
 800251c:	4662      	mov	r2, ip
 800251e:	431a      	orrs	r2, r3
 8002520:	0014      	movs	r4, r2
 8002522:	1e63      	subs	r3, r4, #1
 8002524:	419c      	sbcs	r4, r3
 8002526:	e679      	b.n	800221c <__aeabi_dsub+0x264>
 8002528:	0015      	movs	r5, r2
 800252a:	4664      	mov	r4, ip
 800252c:	3d20      	subs	r5, #32
 800252e:	40ec      	lsrs	r4, r5
 8002530:	46a0      	mov	r8, r4
 8002532:	2a20      	cmp	r2, #32
 8002534:	d005      	beq.n	8002542 <__aeabi_dsub+0x58a>
 8002536:	2540      	movs	r5, #64	; 0x40
 8002538:	4664      	mov	r4, ip
 800253a:	1aaa      	subs	r2, r5, r2
 800253c:	4094      	lsls	r4, r2
 800253e:	4323      	orrs	r3, r4
 8002540:	469a      	mov	sl, r3
 8002542:	4654      	mov	r4, sl
 8002544:	1e63      	subs	r3, r4, #1
 8002546:	419c      	sbcs	r4, r3
 8002548:	4643      	mov	r3, r8
 800254a:	4323      	orrs	r3, r4
 800254c:	e773      	b.n	8002436 <__aeabi_dsub+0x47e>
 800254e:	4662      	mov	r2, ip
 8002550:	431a      	orrs	r2, r3
 8002552:	d023      	beq.n	800259c <__aeabi_dsub+0x5e4>
 8002554:	000a      	movs	r2, r1
 8002556:	433a      	orrs	r2, r7
 8002558:	d000      	beq.n	800255c <__aeabi_dsub+0x5a4>
 800255a:	e0a0      	b.n	800269e <__aeabi_dsub+0x6e6>
 800255c:	4662      	mov	r2, ip
 800255e:	08db      	lsrs	r3, r3, #3
 8002560:	0752      	lsls	r2, r2, #29
 8002562:	4313      	orrs	r3, r2
 8002564:	4662      	mov	r2, ip
 8002566:	08d4      	lsrs	r4, r2, #3
 8002568:	e6b0      	b.n	80022cc <__aeabi_dsub+0x314>
 800256a:	000b      	movs	r3, r1
 800256c:	433b      	orrs	r3, r7
 800256e:	d100      	bne.n	8002572 <__aeabi_dsub+0x5ba>
 8002570:	e728      	b.n	80023c4 <__aeabi_dsub+0x40c>
 8002572:	08ff      	lsrs	r7, r7, #3
 8002574:	074b      	lsls	r3, r1, #29
 8002576:	465d      	mov	r5, fp
 8002578:	433b      	orrs	r3, r7
 800257a:	08cc      	lsrs	r4, r1, #3
 800257c:	e697      	b.n	80022ae <__aeabi_dsub+0x2f6>
 800257e:	2302      	movs	r3, #2
 8002580:	4698      	mov	r8, r3
 8002582:	e736      	b.n	80023f2 <__aeabi_dsub+0x43a>
 8002584:	1afc      	subs	r4, r7, r3
 8002586:	42a7      	cmp	r7, r4
 8002588:	41bf      	sbcs	r7, r7
 800258a:	4663      	mov	r3, ip
 800258c:	427f      	negs	r7, r7
 800258e:	1ac9      	subs	r1, r1, r3
 8002590:	1bcb      	subs	r3, r1, r7
 8002592:	4699      	mov	r9, r3
 8002594:	2301      	movs	r3, #1
 8002596:	465d      	mov	r5, fp
 8002598:	4698      	mov	r8, r3
 800259a:	e55e      	b.n	800205a <__aeabi_dsub+0xa2>
 800259c:	074b      	lsls	r3, r1, #29
 800259e:	08ff      	lsrs	r7, r7, #3
 80025a0:	433b      	orrs	r3, r7
 80025a2:	08cc      	lsrs	r4, r1, #3
 80025a4:	e692      	b.n	80022cc <__aeabi_dsub+0x314>
 80025a6:	1bdc      	subs	r4, r3, r7
 80025a8:	4660      	mov	r0, ip
 80025aa:	42a3      	cmp	r3, r4
 80025ac:	41b6      	sbcs	r6, r6
 80025ae:	1a40      	subs	r0, r0, r1
 80025b0:	4276      	negs	r6, r6
 80025b2:	1b80      	subs	r0, r0, r6
 80025b4:	4681      	mov	r9, r0
 80025b6:	0200      	lsls	r0, r0, #8
 80025b8:	d560      	bpl.n	800267c <__aeabi_dsub+0x6c4>
 80025ba:	1afc      	subs	r4, r7, r3
 80025bc:	42a7      	cmp	r7, r4
 80025be:	41bf      	sbcs	r7, r7
 80025c0:	4663      	mov	r3, ip
 80025c2:	427f      	negs	r7, r7
 80025c4:	1ac9      	subs	r1, r1, r3
 80025c6:	1bcb      	subs	r3, r1, r7
 80025c8:	4699      	mov	r9, r3
 80025ca:	465d      	mov	r5, fp
 80025cc:	e576      	b.n	80020bc <__aeabi_dsub+0x104>
 80025ce:	08ff      	lsrs	r7, r7, #3
 80025d0:	074b      	lsls	r3, r1, #29
 80025d2:	433b      	orrs	r3, r7
 80025d4:	08cc      	lsrs	r4, r1, #3
 80025d6:	e667      	b.n	80022a8 <__aeabi_dsub+0x2f0>
 80025d8:	000a      	movs	r2, r1
 80025da:	08db      	lsrs	r3, r3, #3
 80025dc:	433a      	orrs	r2, r7
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x62a>
 80025e0:	e66f      	b.n	80022c2 <__aeabi_dsub+0x30a>
 80025e2:	4662      	mov	r2, ip
 80025e4:	0752      	lsls	r2, r2, #29
 80025e6:	4313      	orrs	r3, r2
 80025e8:	4662      	mov	r2, ip
 80025ea:	08d4      	lsrs	r4, r2, #3
 80025ec:	2280      	movs	r2, #128	; 0x80
 80025ee:	0312      	lsls	r2, r2, #12
 80025f0:	4214      	tst	r4, r2
 80025f2:	d007      	beq.n	8002604 <__aeabi_dsub+0x64c>
 80025f4:	08c8      	lsrs	r0, r1, #3
 80025f6:	4210      	tst	r0, r2
 80025f8:	d104      	bne.n	8002604 <__aeabi_dsub+0x64c>
 80025fa:	465d      	mov	r5, fp
 80025fc:	0004      	movs	r4, r0
 80025fe:	08fb      	lsrs	r3, r7, #3
 8002600:	0749      	lsls	r1, r1, #29
 8002602:	430b      	orrs	r3, r1
 8002604:	0f5a      	lsrs	r2, r3, #29
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	08db      	lsrs	r3, r3, #3
 800260a:	0752      	lsls	r2, r2, #29
 800260c:	4313      	orrs	r3, r2
 800260e:	e65d      	b.n	80022cc <__aeabi_dsub+0x314>
 8002610:	074b      	lsls	r3, r1, #29
 8002612:	08ff      	lsrs	r7, r7, #3
 8002614:	433b      	orrs	r3, r7
 8002616:	08cc      	lsrs	r4, r1, #3
 8002618:	e649      	b.n	80022ae <__aeabi_dsub+0x2f6>
 800261a:	19dc      	adds	r4, r3, r7
 800261c:	429c      	cmp	r4, r3
 800261e:	419b      	sbcs	r3, r3
 8002620:	4461      	add	r1, ip
 8002622:	4689      	mov	r9, r1
 8002624:	425b      	negs	r3, r3
 8002626:	4499      	add	r9, r3
 8002628:	464b      	mov	r3, r9
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	d400      	bmi.n	8002630 <__aeabi_dsub+0x678>
 800262e:	e631      	b.n	8002294 <__aeabi_dsub+0x2dc>
 8002630:	464a      	mov	r2, r9
 8002632:	4b17      	ldr	r3, [pc, #92]	; (8002690 <__aeabi_dsub+0x6d8>)
 8002634:	401a      	ands	r2, r3
 8002636:	2301      	movs	r3, #1
 8002638:	4691      	mov	r9, r2
 800263a:	4698      	mov	r8, r3
 800263c:	e62a      	b.n	8002294 <__aeabi_dsub+0x2dc>
 800263e:	0016      	movs	r6, r2
 8002640:	4664      	mov	r4, ip
 8002642:	3e20      	subs	r6, #32
 8002644:	40f4      	lsrs	r4, r6
 8002646:	46a0      	mov	r8, r4
 8002648:	2a20      	cmp	r2, #32
 800264a:	d005      	beq.n	8002658 <__aeabi_dsub+0x6a0>
 800264c:	2640      	movs	r6, #64	; 0x40
 800264e:	4664      	mov	r4, ip
 8002650:	1ab2      	subs	r2, r6, r2
 8002652:	4094      	lsls	r4, r2
 8002654:	4323      	orrs	r3, r4
 8002656:	469a      	mov	sl, r3
 8002658:	4654      	mov	r4, sl
 800265a:	1e63      	subs	r3, r4, #1
 800265c:	419c      	sbcs	r4, r3
 800265e:	4643      	mov	r3, r8
 8002660:	431c      	orrs	r4, r3
 8002662:	e5db      	b.n	800221c <__aeabi_dsub+0x264>
 8002664:	0002      	movs	r2, r0
 8002666:	2400      	movs	r4, #0
 8002668:	2300      	movs	r3, #0
 800266a:	e548      	b.n	80020fe <__aeabi_dsub+0x146>
 800266c:	19dc      	adds	r4, r3, r7
 800266e:	42bc      	cmp	r4, r7
 8002670:	41bf      	sbcs	r7, r7
 8002672:	4461      	add	r1, ip
 8002674:	4689      	mov	r9, r1
 8002676:	427f      	negs	r7, r7
 8002678:	44b9      	add	r9, r7
 800267a:	e738      	b.n	80024ee <__aeabi_dsub+0x536>
 800267c:	464b      	mov	r3, r9
 800267e:	4323      	orrs	r3, r4
 8002680:	d100      	bne.n	8002684 <__aeabi_dsub+0x6cc>
 8002682:	e69f      	b.n	80023c4 <__aeabi_dsub+0x40c>
 8002684:	e606      	b.n	8002294 <__aeabi_dsub+0x2dc>
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	000007fe 	.word	0x000007fe
 800268c:	000007ff 	.word	0x000007ff
 8002690:	ff7fffff 	.word	0xff7fffff
 8002694:	08ff      	lsrs	r7, r7, #3
 8002696:	074b      	lsls	r3, r1, #29
 8002698:	433b      	orrs	r3, r7
 800269a:	08cc      	lsrs	r4, r1, #3
 800269c:	e616      	b.n	80022cc <__aeabi_dsub+0x314>
 800269e:	4662      	mov	r2, ip
 80026a0:	08db      	lsrs	r3, r3, #3
 80026a2:	0752      	lsls	r2, r2, #29
 80026a4:	4313      	orrs	r3, r2
 80026a6:	4662      	mov	r2, ip
 80026a8:	08d4      	lsrs	r4, r2, #3
 80026aa:	2280      	movs	r2, #128	; 0x80
 80026ac:	0312      	lsls	r2, r2, #12
 80026ae:	4214      	tst	r4, r2
 80026b0:	d007      	beq.n	80026c2 <__aeabi_dsub+0x70a>
 80026b2:	08c8      	lsrs	r0, r1, #3
 80026b4:	4210      	tst	r0, r2
 80026b6:	d104      	bne.n	80026c2 <__aeabi_dsub+0x70a>
 80026b8:	465d      	mov	r5, fp
 80026ba:	0004      	movs	r4, r0
 80026bc:	08fb      	lsrs	r3, r7, #3
 80026be:	0749      	lsls	r1, r1, #29
 80026c0:	430b      	orrs	r3, r1
 80026c2:	0f5a      	lsrs	r2, r3, #29
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	0752      	lsls	r2, r2, #29
 80026c8:	08db      	lsrs	r3, r3, #3
 80026ca:	4313      	orrs	r3, r2
 80026cc:	e5fe      	b.n	80022cc <__aeabi_dsub+0x314>
 80026ce:	2300      	movs	r3, #0
 80026d0:	4a01      	ldr	r2, [pc, #4]	; (80026d8 <__aeabi_dsub+0x720>)
 80026d2:	001c      	movs	r4, r3
 80026d4:	e513      	b.n	80020fe <__aeabi_dsub+0x146>
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	000007ff 	.word	0x000007ff

080026dc <__aeabi_dcmpun>:
 80026dc:	b570      	push	{r4, r5, r6, lr}
 80026de:	0005      	movs	r5, r0
 80026e0:	480c      	ldr	r0, [pc, #48]	; (8002714 <__aeabi_dcmpun+0x38>)
 80026e2:	031c      	lsls	r4, r3, #12
 80026e4:	0016      	movs	r6, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	030a      	lsls	r2, r1, #12
 80026ea:	0049      	lsls	r1, r1, #1
 80026ec:	0b12      	lsrs	r2, r2, #12
 80026ee:	0d49      	lsrs	r1, r1, #21
 80026f0:	0b24      	lsrs	r4, r4, #12
 80026f2:	0d5b      	lsrs	r3, r3, #21
 80026f4:	4281      	cmp	r1, r0
 80026f6:	d008      	beq.n	800270a <__aeabi_dcmpun+0x2e>
 80026f8:	4a06      	ldr	r2, [pc, #24]	; (8002714 <__aeabi_dcmpun+0x38>)
 80026fa:	2000      	movs	r0, #0
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d103      	bne.n	8002708 <__aeabi_dcmpun+0x2c>
 8002700:	0020      	movs	r0, r4
 8002702:	4330      	orrs	r0, r6
 8002704:	1e43      	subs	r3, r0, #1
 8002706:	4198      	sbcs	r0, r3
 8002708:	bd70      	pop	{r4, r5, r6, pc}
 800270a:	2001      	movs	r0, #1
 800270c:	432a      	orrs	r2, r5
 800270e:	d1fb      	bne.n	8002708 <__aeabi_dcmpun+0x2c>
 8002710:	e7f2      	b.n	80026f8 <__aeabi_dcmpun+0x1c>
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	000007ff 	.word	0x000007ff

08002718 <__aeabi_d2iz>:
 8002718:	000a      	movs	r2, r1
 800271a:	b530      	push	{r4, r5, lr}
 800271c:	4c13      	ldr	r4, [pc, #76]	; (800276c <__aeabi_d2iz+0x54>)
 800271e:	0053      	lsls	r3, r2, #1
 8002720:	0309      	lsls	r1, r1, #12
 8002722:	0005      	movs	r5, r0
 8002724:	0b09      	lsrs	r1, r1, #12
 8002726:	2000      	movs	r0, #0
 8002728:	0d5b      	lsrs	r3, r3, #21
 800272a:	0fd2      	lsrs	r2, r2, #31
 800272c:	42a3      	cmp	r3, r4
 800272e:	dd04      	ble.n	800273a <__aeabi_d2iz+0x22>
 8002730:	480f      	ldr	r0, [pc, #60]	; (8002770 <__aeabi_d2iz+0x58>)
 8002732:	4283      	cmp	r3, r0
 8002734:	dd02      	ble.n	800273c <__aeabi_d2iz+0x24>
 8002736:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <__aeabi_d2iz+0x5c>)
 8002738:	18d0      	adds	r0, r2, r3
 800273a:	bd30      	pop	{r4, r5, pc}
 800273c:	2080      	movs	r0, #128	; 0x80
 800273e:	0340      	lsls	r0, r0, #13
 8002740:	4301      	orrs	r1, r0
 8002742:	480d      	ldr	r0, [pc, #52]	; (8002778 <__aeabi_d2iz+0x60>)
 8002744:	1ac0      	subs	r0, r0, r3
 8002746:	281f      	cmp	r0, #31
 8002748:	dd08      	ble.n	800275c <__aeabi_d2iz+0x44>
 800274a:	480c      	ldr	r0, [pc, #48]	; (800277c <__aeabi_d2iz+0x64>)
 800274c:	1ac3      	subs	r3, r0, r3
 800274e:	40d9      	lsrs	r1, r3
 8002750:	000b      	movs	r3, r1
 8002752:	4258      	negs	r0, r3
 8002754:	2a00      	cmp	r2, #0
 8002756:	d1f0      	bne.n	800273a <__aeabi_d2iz+0x22>
 8002758:	0018      	movs	r0, r3
 800275a:	e7ee      	b.n	800273a <__aeabi_d2iz+0x22>
 800275c:	4c08      	ldr	r4, [pc, #32]	; (8002780 <__aeabi_d2iz+0x68>)
 800275e:	40c5      	lsrs	r5, r0
 8002760:	46a4      	mov	ip, r4
 8002762:	4463      	add	r3, ip
 8002764:	4099      	lsls	r1, r3
 8002766:	000b      	movs	r3, r1
 8002768:	432b      	orrs	r3, r5
 800276a:	e7f2      	b.n	8002752 <__aeabi_d2iz+0x3a>
 800276c:	000003fe 	.word	0x000003fe
 8002770:	0000041d 	.word	0x0000041d
 8002774:	7fffffff 	.word	0x7fffffff
 8002778:	00000433 	.word	0x00000433
 800277c:	00000413 	.word	0x00000413
 8002780:	fffffbed 	.word	0xfffffbed

08002784 <__aeabi_i2d>:
 8002784:	b570      	push	{r4, r5, r6, lr}
 8002786:	2800      	cmp	r0, #0
 8002788:	d016      	beq.n	80027b8 <__aeabi_i2d+0x34>
 800278a:	17c3      	asrs	r3, r0, #31
 800278c:	18c5      	adds	r5, r0, r3
 800278e:	405d      	eors	r5, r3
 8002790:	0fc4      	lsrs	r4, r0, #31
 8002792:	0028      	movs	r0, r5
 8002794:	f000 f930 	bl	80029f8 <__clzsi2>
 8002798:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <__aeabi_i2d+0x5c>)
 800279a:	1a12      	subs	r2, r2, r0
 800279c:	280a      	cmp	r0, #10
 800279e:	dc16      	bgt.n	80027ce <__aeabi_i2d+0x4a>
 80027a0:	0003      	movs	r3, r0
 80027a2:	002e      	movs	r6, r5
 80027a4:	3315      	adds	r3, #21
 80027a6:	409e      	lsls	r6, r3
 80027a8:	230b      	movs	r3, #11
 80027aa:	1a18      	subs	r0, r3, r0
 80027ac:	40c5      	lsrs	r5, r0
 80027ae:	0552      	lsls	r2, r2, #21
 80027b0:	032d      	lsls	r5, r5, #12
 80027b2:	0b2d      	lsrs	r5, r5, #12
 80027b4:	0d53      	lsrs	r3, r2, #21
 80027b6:	e003      	b.n	80027c0 <__aeabi_i2d+0x3c>
 80027b8:	2400      	movs	r4, #0
 80027ba:	2300      	movs	r3, #0
 80027bc:	2500      	movs	r5, #0
 80027be:	2600      	movs	r6, #0
 80027c0:	051b      	lsls	r3, r3, #20
 80027c2:	432b      	orrs	r3, r5
 80027c4:	07e4      	lsls	r4, r4, #31
 80027c6:	4323      	orrs	r3, r4
 80027c8:	0030      	movs	r0, r6
 80027ca:	0019      	movs	r1, r3
 80027cc:	bd70      	pop	{r4, r5, r6, pc}
 80027ce:	380b      	subs	r0, #11
 80027d0:	4085      	lsls	r5, r0
 80027d2:	0552      	lsls	r2, r2, #21
 80027d4:	032d      	lsls	r5, r5, #12
 80027d6:	2600      	movs	r6, #0
 80027d8:	0b2d      	lsrs	r5, r5, #12
 80027da:	0d53      	lsrs	r3, r2, #21
 80027dc:	e7f0      	b.n	80027c0 <__aeabi_i2d+0x3c>
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	0000041e 	.word	0x0000041e

080027e4 <__aeabi_f2d>:
 80027e4:	b570      	push	{r4, r5, r6, lr}
 80027e6:	0043      	lsls	r3, r0, #1
 80027e8:	0246      	lsls	r6, r0, #9
 80027ea:	0fc4      	lsrs	r4, r0, #31
 80027ec:	20fe      	movs	r0, #254	; 0xfe
 80027ee:	0e1b      	lsrs	r3, r3, #24
 80027f0:	1c59      	adds	r1, r3, #1
 80027f2:	0a75      	lsrs	r5, r6, #9
 80027f4:	4208      	tst	r0, r1
 80027f6:	d00c      	beq.n	8002812 <__aeabi_f2d+0x2e>
 80027f8:	22e0      	movs	r2, #224	; 0xe0
 80027fa:	0092      	lsls	r2, r2, #2
 80027fc:	4694      	mov	ip, r2
 80027fe:	076d      	lsls	r5, r5, #29
 8002800:	0b36      	lsrs	r6, r6, #12
 8002802:	4463      	add	r3, ip
 8002804:	051b      	lsls	r3, r3, #20
 8002806:	4333      	orrs	r3, r6
 8002808:	07e4      	lsls	r4, r4, #31
 800280a:	4323      	orrs	r3, r4
 800280c:	0028      	movs	r0, r5
 800280e:	0019      	movs	r1, r3
 8002810:	bd70      	pop	{r4, r5, r6, pc}
 8002812:	2b00      	cmp	r3, #0
 8002814:	d114      	bne.n	8002840 <__aeabi_f2d+0x5c>
 8002816:	2d00      	cmp	r5, #0
 8002818:	d01b      	beq.n	8002852 <__aeabi_f2d+0x6e>
 800281a:	0028      	movs	r0, r5
 800281c:	f000 f8ec 	bl	80029f8 <__clzsi2>
 8002820:	280a      	cmp	r0, #10
 8002822:	dc1c      	bgt.n	800285e <__aeabi_f2d+0x7a>
 8002824:	230b      	movs	r3, #11
 8002826:	002e      	movs	r6, r5
 8002828:	1a1b      	subs	r3, r3, r0
 800282a:	40de      	lsrs	r6, r3
 800282c:	0003      	movs	r3, r0
 800282e:	3315      	adds	r3, #21
 8002830:	409d      	lsls	r5, r3
 8002832:	4a0e      	ldr	r2, [pc, #56]	; (800286c <__aeabi_f2d+0x88>)
 8002834:	0336      	lsls	r6, r6, #12
 8002836:	1a12      	subs	r2, r2, r0
 8002838:	0552      	lsls	r2, r2, #21
 800283a:	0b36      	lsrs	r6, r6, #12
 800283c:	0d53      	lsrs	r3, r2, #21
 800283e:	e7e1      	b.n	8002804 <__aeabi_f2d+0x20>
 8002840:	2d00      	cmp	r5, #0
 8002842:	d009      	beq.n	8002858 <__aeabi_f2d+0x74>
 8002844:	2280      	movs	r2, #128	; 0x80
 8002846:	0b36      	lsrs	r6, r6, #12
 8002848:	0312      	lsls	r2, r2, #12
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <__aeabi_f2d+0x8c>)
 800284c:	076d      	lsls	r5, r5, #29
 800284e:	4316      	orrs	r6, r2
 8002850:	e7d8      	b.n	8002804 <__aeabi_f2d+0x20>
 8002852:	2300      	movs	r3, #0
 8002854:	2600      	movs	r6, #0
 8002856:	e7d5      	b.n	8002804 <__aeabi_f2d+0x20>
 8002858:	2600      	movs	r6, #0
 800285a:	4b05      	ldr	r3, [pc, #20]	; (8002870 <__aeabi_f2d+0x8c>)
 800285c:	e7d2      	b.n	8002804 <__aeabi_f2d+0x20>
 800285e:	0003      	movs	r3, r0
 8002860:	3b0b      	subs	r3, #11
 8002862:	409d      	lsls	r5, r3
 8002864:	002e      	movs	r6, r5
 8002866:	2500      	movs	r5, #0
 8002868:	e7e3      	b.n	8002832 <__aeabi_f2d+0x4e>
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	00000389 	.word	0x00000389
 8002870:	000007ff 	.word	0x000007ff

08002874 <__aeabi_d2f>:
 8002874:	0002      	movs	r2, r0
 8002876:	004b      	lsls	r3, r1, #1
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	0d5b      	lsrs	r3, r3, #21
 800287c:	030c      	lsls	r4, r1, #12
 800287e:	4e3d      	ldr	r6, [pc, #244]	; (8002974 <__aeabi_d2f+0x100>)
 8002880:	0a64      	lsrs	r4, r4, #9
 8002882:	0f40      	lsrs	r0, r0, #29
 8002884:	1c5f      	adds	r7, r3, #1
 8002886:	0fc9      	lsrs	r1, r1, #31
 8002888:	4304      	orrs	r4, r0
 800288a:	00d5      	lsls	r5, r2, #3
 800288c:	4237      	tst	r7, r6
 800288e:	d00a      	beq.n	80028a6 <__aeabi_d2f+0x32>
 8002890:	4839      	ldr	r0, [pc, #228]	; (8002978 <__aeabi_d2f+0x104>)
 8002892:	181e      	adds	r6, r3, r0
 8002894:	2efe      	cmp	r6, #254	; 0xfe
 8002896:	dd16      	ble.n	80028c6 <__aeabi_d2f+0x52>
 8002898:	20ff      	movs	r0, #255	; 0xff
 800289a:	2400      	movs	r4, #0
 800289c:	05c0      	lsls	r0, r0, #23
 800289e:	4320      	orrs	r0, r4
 80028a0:	07c9      	lsls	r1, r1, #31
 80028a2:	4308      	orrs	r0, r1
 80028a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <__aeabi_d2f+0x44>
 80028aa:	432c      	orrs	r4, r5
 80028ac:	d026      	beq.n	80028fc <__aeabi_d2f+0x88>
 80028ae:	2205      	movs	r2, #5
 80028b0:	0192      	lsls	r2, r2, #6
 80028b2:	0a54      	lsrs	r4, r2, #9
 80028b4:	b2d8      	uxtb	r0, r3
 80028b6:	e7f1      	b.n	800289c <__aeabi_d2f+0x28>
 80028b8:	4325      	orrs	r5, r4
 80028ba:	d0ed      	beq.n	8002898 <__aeabi_d2f+0x24>
 80028bc:	2080      	movs	r0, #128	; 0x80
 80028be:	03c0      	lsls	r0, r0, #15
 80028c0:	4304      	orrs	r4, r0
 80028c2:	20ff      	movs	r0, #255	; 0xff
 80028c4:	e7ea      	b.n	800289c <__aeabi_d2f+0x28>
 80028c6:	2e00      	cmp	r6, #0
 80028c8:	dd1b      	ble.n	8002902 <__aeabi_d2f+0x8e>
 80028ca:	0192      	lsls	r2, r2, #6
 80028cc:	1e53      	subs	r3, r2, #1
 80028ce:	419a      	sbcs	r2, r3
 80028d0:	00e4      	lsls	r4, r4, #3
 80028d2:	0f6d      	lsrs	r5, r5, #29
 80028d4:	4322      	orrs	r2, r4
 80028d6:	432a      	orrs	r2, r5
 80028d8:	0753      	lsls	r3, r2, #29
 80028da:	d048      	beq.n	800296e <__aeabi_d2f+0xfa>
 80028dc:	230f      	movs	r3, #15
 80028de:	4013      	ands	r3, r2
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d000      	beq.n	80028e6 <__aeabi_d2f+0x72>
 80028e4:	3204      	adds	r2, #4
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	04db      	lsls	r3, r3, #19
 80028ea:	4013      	ands	r3, r2
 80028ec:	d03f      	beq.n	800296e <__aeabi_d2f+0xfa>
 80028ee:	1c70      	adds	r0, r6, #1
 80028f0:	2efe      	cmp	r6, #254	; 0xfe
 80028f2:	d0d1      	beq.n	8002898 <__aeabi_d2f+0x24>
 80028f4:	0192      	lsls	r2, r2, #6
 80028f6:	0a54      	lsrs	r4, r2, #9
 80028f8:	b2c0      	uxtb	r0, r0
 80028fa:	e7cf      	b.n	800289c <__aeabi_d2f+0x28>
 80028fc:	2000      	movs	r0, #0
 80028fe:	2400      	movs	r4, #0
 8002900:	e7cc      	b.n	800289c <__aeabi_d2f+0x28>
 8002902:	0032      	movs	r2, r6
 8002904:	3217      	adds	r2, #23
 8002906:	db22      	blt.n	800294e <__aeabi_d2f+0xda>
 8002908:	2080      	movs	r0, #128	; 0x80
 800290a:	0400      	lsls	r0, r0, #16
 800290c:	4320      	orrs	r0, r4
 800290e:	241e      	movs	r4, #30
 8002910:	1ba4      	subs	r4, r4, r6
 8002912:	2c1f      	cmp	r4, #31
 8002914:	dd1d      	ble.n	8002952 <__aeabi_d2f+0xde>
 8002916:	2202      	movs	r2, #2
 8002918:	4252      	negs	r2, r2
 800291a:	1b96      	subs	r6, r2, r6
 800291c:	0002      	movs	r2, r0
 800291e:	40f2      	lsrs	r2, r6
 8002920:	0016      	movs	r6, r2
 8002922:	2c20      	cmp	r4, #32
 8002924:	d004      	beq.n	8002930 <__aeabi_d2f+0xbc>
 8002926:	4a15      	ldr	r2, [pc, #84]	; (800297c <__aeabi_d2f+0x108>)
 8002928:	4694      	mov	ip, r2
 800292a:	4463      	add	r3, ip
 800292c:	4098      	lsls	r0, r3
 800292e:	4305      	orrs	r5, r0
 8002930:	002a      	movs	r2, r5
 8002932:	1e53      	subs	r3, r2, #1
 8002934:	419a      	sbcs	r2, r3
 8002936:	4332      	orrs	r2, r6
 8002938:	2600      	movs	r6, #0
 800293a:	0753      	lsls	r3, r2, #29
 800293c:	d1ce      	bne.n	80028dc <__aeabi_d2f+0x68>
 800293e:	2480      	movs	r4, #128	; 0x80
 8002940:	0013      	movs	r3, r2
 8002942:	04e4      	lsls	r4, r4, #19
 8002944:	2001      	movs	r0, #1
 8002946:	4023      	ands	r3, r4
 8002948:	4222      	tst	r2, r4
 800294a:	d1d3      	bne.n	80028f4 <__aeabi_d2f+0x80>
 800294c:	e7b0      	b.n	80028b0 <__aeabi_d2f+0x3c>
 800294e:	2300      	movs	r3, #0
 8002950:	e7ad      	b.n	80028ae <__aeabi_d2f+0x3a>
 8002952:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <__aeabi_d2f+0x10c>)
 8002954:	4694      	mov	ip, r2
 8002956:	002a      	movs	r2, r5
 8002958:	40e2      	lsrs	r2, r4
 800295a:	0014      	movs	r4, r2
 800295c:	002a      	movs	r2, r5
 800295e:	4463      	add	r3, ip
 8002960:	409a      	lsls	r2, r3
 8002962:	4098      	lsls	r0, r3
 8002964:	1e55      	subs	r5, r2, #1
 8002966:	41aa      	sbcs	r2, r5
 8002968:	4302      	orrs	r2, r0
 800296a:	4322      	orrs	r2, r4
 800296c:	e7e4      	b.n	8002938 <__aeabi_d2f+0xc4>
 800296e:	0033      	movs	r3, r6
 8002970:	e79e      	b.n	80028b0 <__aeabi_d2f+0x3c>
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	000007fe 	.word	0x000007fe
 8002978:	fffffc80 	.word	0xfffffc80
 800297c:	fffffca2 	.word	0xfffffca2
 8002980:	fffffc82 	.word	0xfffffc82

08002984 <__aeabi_cfrcmple>:
 8002984:	4684      	mov	ip, r0
 8002986:	0008      	movs	r0, r1
 8002988:	4661      	mov	r1, ip
 800298a:	e7ff      	b.n	800298c <__aeabi_cfcmpeq>

0800298c <__aeabi_cfcmpeq>:
 800298c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800298e:	f000 f8bd 	bl	8002b0c <__lesf2>
 8002992:	2800      	cmp	r0, #0
 8002994:	d401      	bmi.n	800299a <__aeabi_cfcmpeq+0xe>
 8002996:	2100      	movs	r1, #0
 8002998:	42c8      	cmn	r0, r1
 800299a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800299c <__aeabi_fcmpeq>:
 800299c:	b510      	push	{r4, lr}
 800299e:	f000 f849 	bl	8002a34 <__eqsf2>
 80029a2:	4240      	negs	r0, r0
 80029a4:	3001      	adds	r0, #1
 80029a6:	bd10      	pop	{r4, pc}

080029a8 <__aeabi_fcmplt>:
 80029a8:	b510      	push	{r4, lr}
 80029aa:	f000 f8af 	bl	8002b0c <__lesf2>
 80029ae:	2800      	cmp	r0, #0
 80029b0:	db01      	blt.n	80029b6 <__aeabi_fcmplt+0xe>
 80029b2:	2000      	movs	r0, #0
 80029b4:	bd10      	pop	{r4, pc}
 80029b6:	2001      	movs	r0, #1
 80029b8:	bd10      	pop	{r4, pc}
 80029ba:	46c0      	nop			; (mov r8, r8)

080029bc <__aeabi_fcmple>:
 80029bc:	b510      	push	{r4, lr}
 80029be:	f000 f8a5 	bl	8002b0c <__lesf2>
 80029c2:	2800      	cmp	r0, #0
 80029c4:	dd01      	ble.n	80029ca <__aeabi_fcmple+0xe>
 80029c6:	2000      	movs	r0, #0
 80029c8:	bd10      	pop	{r4, pc}
 80029ca:	2001      	movs	r0, #1
 80029cc:	bd10      	pop	{r4, pc}
 80029ce:	46c0      	nop			; (mov r8, r8)

080029d0 <__aeabi_fcmpgt>:
 80029d0:	b510      	push	{r4, lr}
 80029d2:	f000 f855 	bl	8002a80 <__gesf2>
 80029d6:	2800      	cmp	r0, #0
 80029d8:	dc01      	bgt.n	80029de <__aeabi_fcmpgt+0xe>
 80029da:	2000      	movs	r0, #0
 80029dc:	bd10      	pop	{r4, pc}
 80029de:	2001      	movs	r0, #1
 80029e0:	bd10      	pop	{r4, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)

080029e4 <__aeabi_fcmpge>:
 80029e4:	b510      	push	{r4, lr}
 80029e6:	f000 f84b 	bl	8002a80 <__gesf2>
 80029ea:	2800      	cmp	r0, #0
 80029ec:	da01      	bge.n	80029f2 <__aeabi_fcmpge+0xe>
 80029ee:	2000      	movs	r0, #0
 80029f0:	bd10      	pop	{r4, pc}
 80029f2:	2001      	movs	r0, #1
 80029f4:	bd10      	pop	{r4, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)

080029f8 <__clzsi2>:
 80029f8:	211c      	movs	r1, #28
 80029fa:	2301      	movs	r3, #1
 80029fc:	041b      	lsls	r3, r3, #16
 80029fe:	4298      	cmp	r0, r3
 8002a00:	d301      	bcc.n	8002a06 <__clzsi2+0xe>
 8002a02:	0c00      	lsrs	r0, r0, #16
 8002a04:	3910      	subs	r1, #16
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	4298      	cmp	r0, r3
 8002a0a:	d301      	bcc.n	8002a10 <__clzsi2+0x18>
 8002a0c:	0a00      	lsrs	r0, r0, #8
 8002a0e:	3908      	subs	r1, #8
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	4298      	cmp	r0, r3
 8002a14:	d301      	bcc.n	8002a1a <__clzsi2+0x22>
 8002a16:	0900      	lsrs	r0, r0, #4
 8002a18:	3904      	subs	r1, #4
 8002a1a:	a202      	add	r2, pc, #8	; (adr r2, 8002a24 <__clzsi2+0x2c>)
 8002a1c:	5c10      	ldrb	r0, [r2, r0]
 8002a1e:	1840      	adds	r0, r0, r1
 8002a20:	4770      	bx	lr
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	02020304 	.word	0x02020304
 8002a28:	01010101 	.word	0x01010101
	...

08002a34 <__eqsf2>:
 8002a34:	b570      	push	{r4, r5, r6, lr}
 8002a36:	0042      	lsls	r2, r0, #1
 8002a38:	0245      	lsls	r5, r0, #9
 8002a3a:	024e      	lsls	r6, r1, #9
 8002a3c:	004c      	lsls	r4, r1, #1
 8002a3e:	0fc3      	lsrs	r3, r0, #31
 8002a40:	0a6d      	lsrs	r5, r5, #9
 8002a42:	2001      	movs	r0, #1
 8002a44:	0e12      	lsrs	r2, r2, #24
 8002a46:	0a76      	lsrs	r6, r6, #9
 8002a48:	0e24      	lsrs	r4, r4, #24
 8002a4a:	0fc9      	lsrs	r1, r1, #31
 8002a4c:	2aff      	cmp	r2, #255	; 0xff
 8002a4e:	d006      	beq.n	8002a5e <__eqsf2+0x2a>
 8002a50:	2cff      	cmp	r4, #255	; 0xff
 8002a52:	d003      	beq.n	8002a5c <__eqsf2+0x28>
 8002a54:	42a2      	cmp	r2, r4
 8002a56:	d101      	bne.n	8002a5c <__eqsf2+0x28>
 8002a58:	42b5      	cmp	r5, r6
 8002a5a:	d006      	beq.n	8002a6a <__eqsf2+0x36>
 8002a5c:	bd70      	pop	{r4, r5, r6, pc}
 8002a5e:	2d00      	cmp	r5, #0
 8002a60:	d1fc      	bne.n	8002a5c <__eqsf2+0x28>
 8002a62:	2cff      	cmp	r4, #255	; 0xff
 8002a64:	d1fa      	bne.n	8002a5c <__eqsf2+0x28>
 8002a66:	2e00      	cmp	r6, #0
 8002a68:	d1f8      	bne.n	8002a5c <__eqsf2+0x28>
 8002a6a:	428b      	cmp	r3, r1
 8002a6c:	d006      	beq.n	8002a7c <__eqsf2+0x48>
 8002a6e:	2001      	movs	r0, #1
 8002a70:	2a00      	cmp	r2, #0
 8002a72:	d1f3      	bne.n	8002a5c <__eqsf2+0x28>
 8002a74:	0028      	movs	r0, r5
 8002a76:	1e43      	subs	r3, r0, #1
 8002a78:	4198      	sbcs	r0, r3
 8002a7a:	e7ef      	b.n	8002a5c <__eqsf2+0x28>
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	e7ed      	b.n	8002a5c <__eqsf2+0x28>

08002a80 <__gesf2>:
 8002a80:	b570      	push	{r4, r5, r6, lr}
 8002a82:	0042      	lsls	r2, r0, #1
 8002a84:	0245      	lsls	r5, r0, #9
 8002a86:	024e      	lsls	r6, r1, #9
 8002a88:	004c      	lsls	r4, r1, #1
 8002a8a:	0fc3      	lsrs	r3, r0, #31
 8002a8c:	0a6d      	lsrs	r5, r5, #9
 8002a8e:	0e12      	lsrs	r2, r2, #24
 8002a90:	0a76      	lsrs	r6, r6, #9
 8002a92:	0e24      	lsrs	r4, r4, #24
 8002a94:	0fc8      	lsrs	r0, r1, #31
 8002a96:	2aff      	cmp	r2, #255	; 0xff
 8002a98:	d01b      	beq.n	8002ad2 <__gesf2+0x52>
 8002a9a:	2cff      	cmp	r4, #255	; 0xff
 8002a9c:	d00e      	beq.n	8002abc <__gesf2+0x3c>
 8002a9e:	2a00      	cmp	r2, #0
 8002aa0:	d11b      	bne.n	8002ada <__gesf2+0x5a>
 8002aa2:	2c00      	cmp	r4, #0
 8002aa4:	d101      	bne.n	8002aaa <__gesf2+0x2a>
 8002aa6:	2e00      	cmp	r6, #0
 8002aa8:	d01c      	beq.n	8002ae4 <__gesf2+0x64>
 8002aaa:	2d00      	cmp	r5, #0
 8002aac:	d00c      	beq.n	8002ac8 <__gesf2+0x48>
 8002aae:	4283      	cmp	r3, r0
 8002ab0:	d01c      	beq.n	8002aec <__gesf2+0x6c>
 8002ab2:	2102      	movs	r1, #2
 8002ab4:	1e58      	subs	r0, r3, #1
 8002ab6:	4008      	ands	r0, r1
 8002ab8:	3801      	subs	r0, #1
 8002aba:	bd70      	pop	{r4, r5, r6, pc}
 8002abc:	2e00      	cmp	r6, #0
 8002abe:	d122      	bne.n	8002b06 <__gesf2+0x86>
 8002ac0:	2a00      	cmp	r2, #0
 8002ac2:	d1f4      	bne.n	8002aae <__gesf2+0x2e>
 8002ac4:	2d00      	cmp	r5, #0
 8002ac6:	d1f2      	bne.n	8002aae <__gesf2+0x2e>
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	d1f6      	bne.n	8002aba <__gesf2+0x3a>
 8002acc:	2001      	movs	r0, #1
 8002ace:	4240      	negs	r0, r0
 8002ad0:	e7f3      	b.n	8002aba <__gesf2+0x3a>
 8002ad2:	2d00      	cmp	r5, #0
 8002ad4:	d117      	bne.n	8002b06 <__gesf2+0x86>
 8002ad6:	2cff      	cmp	r4, #255	; 0xff
 8002ad8:	d0f0      	beq.n	8002abc <__gesf2+0x3c>
 8002ada:	2c00      	cmp	r4, #0
 8002adc:	d1e7      	bne.n	8002aae <__gesf2+0x2e>
 8002ade:	2e00      	cmp	r6, #0
 8002ae0:	d1e5      	bne.n	8002aae <__gesf2+0x2e>
 8002ae2:	e7e6      	b.n	8002ab2 <__gesf2+0x32>
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	2d00      	cmp	r5, #0
 8002ae8:	d0e7      	beq.n	8002aba <__gesf2+0x3a>
 8002aea:	e7e2      	b.n	8002ab2 <__gesf2+0x32>
 8002aec:	42a2      	cmp	r2, r4
 8002aee:	dc05      	bgt.n	8002afc <__gesf2+0x7c>
 8002af0:	dbea      	blt.n	8002ac8 <__gesf2+0x48>
 8002af2:	42b5      	cmp	r5, r6
 8002af4:	d802      	bhi.n	8002afc <__gesf2+0x7c>
 8002af6:	d3e7      	bcc.n	8002ac8 <__gesf2+0x48>
 8002af8:	2000      	movs	r0, #0
 8002afa:	e7de      	b.n	8002aba <__gesf2+0x3a>
 8002afc:	4243      	negs	r3, r0
 8002afe:	4158      	adcs	r0, r3
 8002b00:	0040      	lsls	r0, r0, #1
 8002b02:	3801      	subs	r0, #1
 8002b04:	e7d9      	b.n	8002aba <__gesf2+0x3a>
 8002b06:	2002      	movs	r0, #2
 8002b08:	4240      	negs	r0, r0
 8002b0a:	e7d6      	b.n	8002aba <__gesf2+0x3a>

08002b0c <__lesf2>:
 8002b0c:	b570      	push	{r4, r5, r6, lr}
 8002b0e:	0042      	lsls	r2, r0, #1
 8002b10:	0245      	lsls	r5, r0, #9
 8002b12:	024e      	lsls	r6, r1, #9
 8002b14:	004c      	lsls	r4, r1, #1
 8002b16:	0fc3      	lsrs	r3, r0, #31
 8002b18:	0a6d      	lsrs	r5, r5, #9
 8002b1a:	0e12      	lsrs	r2, r2, #24
 8002b1c:	0a76      	lsrs	r6, r6, #9
 8002b1e:	0e24      	lsrs	r4, r4, #24
 8002b20:	0fc8      	lsrs	r0, r1, #31
 8002b22:	2aff      	cmp	r2, #255	; 0xff
 8002b24:	d00b      	beq.n	8002b3e <__lesf2+0x32>
 8002b26:	2cff      	cmp	r4, #255	; 0xff
 8002b28:	d00d      	beq.n	8002b46 <__lesf2+0x3a>
 8002b2a:	2a00      	cmp	r2, #0
 8002b2c:	d11f      	bne.n	8002b6e <__lesf2+0x62>
 8002b2e:	2c00      	cmp	r4, #0
 8002b30:	d116      	bne.n	8002b60 <__lesf2+0x54>
 8002b32:	2e00      	cmp	r6, #0
 8002b34:	d114      	bne.n	8002b60 <__lesf2+0x54>
 8002b36:	2000      	movs	r0, #0
 8002b38:	2d00      	cmp	r5, #0
 8002b3a:	d010      	beq.n	8002b5e <__lesf2+0x52>
 8002b3c:	e009      	b.n	8002b52 <__lesf2+0x46>
 8002b3e:	2d00      	cmp	r5, #0
 8002b40:	d10c      	bne.n	8002b5c <__lesf2+0x50>
 8002b42:	2cff      	cmp	r4, #255	; 0xff
 8002b44:	d113      	bne.n	8002b6e <__lesf2+0x62>
 8002b46:	2e00      	cmp	r6, #0
 8002b48:	d108      	bne.n	8002b5c <__lesf2+0x50>
 8002b4a:	2a00      	cmp	r2, #0
 8002b4c:	d008      	beq.n	8002b60 <__lesf2+0x54>
 8002b4e:	4283      	cmp	r3, r0
 8002b50:	d012      	beq.n	8002b78 <__lesf2+0x6c>
 8002b52:	2102      	movs	r1, #2
 8002b54:	1e58      	subs	r0, r3, #1
 8002b56:	4008      	ands	r0, r1
 8002b58:	3801      	subs	r0, #1
 8002b5a:	e000      	b.n	8002b5e <__lesf2+0x52>
 8002b5c:	2002      	movs	r0, #2
 8002b5e:	bd70      	pop	{r4, r5, r6, pc}
 8002b60:	2d00      	cmp	r5, #0
 8002b62:	d1f4      	bne.n	8002b4e <__lesf2+0x42>
 8002b64:	2800      	cmp	r0, #0
 8002b66:	d1fa      	bne.n	8002b5e <__lesf2+0x52>
 8002b68:	2001      	movs	r0, #1
 8002b6a:	4240      	negs	r0, r0
 8002b6c:	e7f7      	b.n	8002b5e <__lesf2+0x52>
 8002b6e:	2c00      	cmp	r4, #0
 8002b70:	d1ed      	bne.n	8002b4e <__lesf2+0x42>
 8002b72:	2e00      	cmp	r6, #0
 8002b74:	d1eb      	bne.n	8002b4e <__lesf2+0x42>
 8002b76:	e7ec      	b.n	8002b52 <__lesf2+0x46>
 8002b78:	42a2      	cmp	r2, r4
 8002b7a:	dc05      	bgt.n	8002b88 <__lesf2+0x7c>
 8002b7c:	dbf2      	blt.n	8002b64 <__lesf2+0x58>
 8002b7e:	42b5      	cmp	r5, r6
 8002b80:	d802      	bhi.n	8002b88 <__lesf2+0x7c>
 8002b82:	d3ef      	bcc.n	8002b64 <__lesf2+0x58>
 8002b84:	2000      	movs	r0, #0
 8002b86:	e7ea      	b.n	8002b5e <__lesf2+0x52>
 8002b88:	4243      	negs	r3, r0
 8002b8a:	4158      	adcs	r0, r3
 8002b8c:	0040      	lsls	r0, r0, #1
 8002b8e:	3801      	subs	r0, #1
 8002b90:	e7e5      	b.n	8002b5e <__lesf2+0x52>
 8002b92:	46c0      	nop			; (mov r8, r8)

08002b94 <HAL_ADC_ConvCpltCallback>:
uint16_t raw_adc_value=0;

char buf[10]; //буфер для даних відправки по UART

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc)//переривання по закінченню обробки даних АЦП
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
    ADC_Raw = HAL_ADC_GetValue(hadc); //зчитуємо значення
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f000 fdbe 	bl	8003720 <HAL_ADC_GetValue>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	4b02      	ldr	r3, [pc, #8]	; (8002bb4 <HAL_ADC_ConvCpltCallback+0x20>)
 8002baa:	801a      	strh	r2, [r3, #0]
}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b002      	add	sp, #8
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20000150 	.word	0x20000150

08002bb8 <get_lux>:

uint32_t get_lux(uint16_t raw_adc_value)
{
 8002bb8:	b5b0      	push	{r4, r5, r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	1dbb      	adds	r3, r7, #6
 8002bc2:	801a      	strh	r2, [r3, #0]
  uint16_t lux_value;
  //знаходимо опір фоторезистора
  Pht_R = (PHT_UP_R * ADC_Raw) / (4095 - ADC_Raw);
 8002bc4:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <get_lux+0xe0>)
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7fd ffbb 	bl	8000b44 <__aeabi_i2f>
 8002bce:	1c03      	adds	r3, r0, #0
 8002bd0:	4932      	ldr	r1, [pc, #200]	; (8002c9c <get_lux+0xe4>)
 8002bd2:	1c18      	adds	r0, r3, #0
 8002bd4:	f7fd fcc2 	bl	800055c <__aeabi_fmul>
 8002bd8:	1c03      	adds	r3, r0, #0
 8002bda:	1c1c      	adds	r4, r3, #0
 8002bdc:	4b2e      	ldr	r3, [pc, #184]	; (8002c98 <get_lux+0xe0>)
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	001a      	movs	r2, r3
 8002be2:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <get_lux+0xe8>)
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	0018      	movs	r0, r3
 8002be8:	f7fd ffac 	bl	8000b44 <__aeabi_i2f>
 8002bec:	1c03      	adds	r3, r0, #0
 8002bee:	1c19      	adds	r1, r3, #0
 8002bf0:	1c20      	adds	r0, r4, #0
 8002bf2:	f7fd fb9b 	bl	800032c <__aeabi_fdiv>
 8002bf6:	1c03      	adds	r3, r0, #0
 8002bf8:	1c18      	adds	r0, r3, #0
 8002bfa:	f7fd fb61 	bl	80002c0 <__aeabi_f2uiz>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	4b28      	ldr	r3, [pc, #160]	; (8002ca4 <get_lux+0xec>)
 8002c02:	601a      	str	r2, [r3, #0]

  //знаходимо значення невідомої освітленості в декілька етапів
  Pht_Div = PHT_10LX_R/Pht_R;
 8002c04:	4b27      	ldr	r3, [pc, #156]	; (8002ca4 <get_lux+0xec>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f7fd ffe9 	bl	8000be0 <__aeabi_ui2f>
 8002c0e:	1c03      	adds	r3, r0, #0
 8002c10:	1c19      	adds	r1, r3, #0
 8002c12:	4825      	ldr	r0, [pc, #148]	; (8002ca8 <get_lux+0xf0>)
 8002c14:	f7fd fb8a 	bl	800032c <__aeabi_fdiv>
 8002c18:	1c03      	adds	r3, r0, #0
 8002c1a:	1c1a      	adds	r2, r3, #0
 8002c1c:	4b23      	ldr	r3, [pc, #140]	; (8002cac <get_lux+0xf4>)
 8002c1e:	601a      	str	r2, [r3, #0]

  Pht_Temp = (log10(Pht_Div) / PHT_GAMMA)+1;
 8002c20:	4b22      	ldr	r3, [pc, #136]	; (8002cac <get_lux+0xf4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	1c18      	adds	r0, r3, #0
 8002c26:	f7ff fddd 	bl	80027e4 <__aeabi_f2d>
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	000b      	movs	r3, r1
 8002c2e:	0010      	movs	r0, r2
 8002c30:	0019      	movs	r1, r3
 8002c32:	f002 ff67 	bl	8005b04 <log10>
 8002c36:	2280      	movs	r2, #128	; 0x80
 8002c38:	05d2      	lsls	r2, r2, #23
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <get_lux+0xf8>)
 8002c3c:	f7fe fb4e 	bl	80012dc <__aeabi_ddiv>
 8002c40:	0002      	movs	r2, r0
 8002c42:	000b      	movs	r3, r1
 8002c44:	0010      	movs	r0, r2
 8002c46:	0019      	movs	r1, r3
 8002c48:	2200      	movs	r2, #0
 8002c4a:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <get_lux+0xfc>)
 8002c4c:	f7fe f80a 	bl	8000c64 <__aeabi_dadd>
 8002c50:	0002      	movs	r2, r0
 8002c52:	000b      	movs	r3, r1
 8002c54:	0010      	movs	r0, r2
 8002c56:	0019      	movs	r1, r3
 8002c58:	f7ff fe0c 	bl	8002874 <__aeabi_d2f>
 8002c5c:	1c02      	adds	r2, r0, #0
 8002c5e:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <get_lux+0x100>)
 8002c60:	601a      	str	r2, [r3, #0]
  lux_value = pow(10, Pht_Temp);
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <get_lux+0x100>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	1c18      	adds	r0, r3, #0
 8002c68:	f7ff fdbc 	bl	80027e4 <__aeabi_f2d>
 8002c6c:	0002      	movs	r2, r0
 8002c6e:	000b      	movs	r3, r1
 8002c70:	2000      	movs	r0, #0
 8002c72:	4912      	ldr	r1, [pc, #72]	; (8002cbc <get_lux+0x104>)
 8002c74:	f002 ff7c 	bl	8005b70 <pow>
 8002c78:	0002      	movs	r2, r0
 8002c7a:	000b      	movs	r3, r1
 8002c7c:	250e      	movs	r5, #14
 8002c7e:	197c      	adds	r4, r7, r5
 8002c80:	0010      	movs	r0, r2
 8002c82:	0019      	movs	r1, r3
 8002c84:	f7fd fb34 	bl	80002f0 <__aeabi_d2uiz>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	8023      	strh	r3, [r4, #0]

  return lux_value;
 8002c8c:	197b      	adds	r3, r7, r5
 8002c8e:	881b      	ldrh	r3, [r3, #0]
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b004      	add	sp, #16
 8002c96:	bdb0      	pop	{r4, r5, r7, pc}
 8002c98:	20000150 	.word	0x20000150
 8002c9c:	461c4000 	.word	0x461c4000
 8002ca0:	00000fff 	.word	0x00000fff
 8002ca4:	20000154 	.word	0x20000154
 8002ca8:	48742400 	.word	0x48742400
 8002cac:	2000015c 	.word	0x2000015c
 8002cb0:	3fe33333 	.word	0x3fe33333
 8002cb4:	3ff00000 	.word	0x3ff00000
 8002cb8:	20000160 	.word	0x20000160
 8002cbc:	40240000 	.word	0x40240000

08002cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cc4:	f000 faf2 	bl	80032ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cc8:	f000 f856 	bl	8002d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ccc:	f000 f92c 	bl	8002f28 <MX_GPIO_Init>
  MX_ADC_Init();
 8002cd0:	f000 f8a0 	bl	8002e14 <MX_ADC_Init>
  MX_USART2_UART_Init();
 8002cd4:	f000 f8f8 	bl	8002ec8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc); //запускаємо перетворення АЦП
 8002cd8:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <main+0x98>)
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 fcae 	bl	800363c <HAL_ADC_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    /***має спрацювати колбек***/

		  Pht_lux = get_lux(ADC_Raw); //отримуємо готове значення освітленості
 8002ce0:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <main+0x9c>)
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7ff ff67 	bl	8002bb8 <get_lux>
 8002cea:	0002      	movs	r2, r0
 8002cec:	4b1c      	ldr	r3, [pc, #112]	; (8002d60 <main+0xa0>)
 8002cee:	601a      	str	r2, [r3, #0]
		  sprintf(buf, "%d", (int)Pht_lux); //поміщаємо освітленість у буфер
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <main+0xa0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	001a      	movs	r2, r3
 8002cf6:	491b      	ldr	r1, [pc, #108]	; (8002d64 <main+0xa4>)
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <main+0xa8>)
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f002 faa2 	bl	8005244 <siprintf>
		  strcat(buf, " lux\n"); //доформатовуємо буфер аби красиво виводились одиниці виміру та новий рядок
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <main+0xa8>)
 8002d02:	0018      	movs	r0, r3
 8002d04:	f7fd fa00 	bl	8000108 <strlen>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	001a      	movs	r2, r3
 8002d0c:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <main+0xa8>)
 8002d0e:	18d2      	adds	r2, r2, r3
 8002d10:	4b16      	ldr	r3, [pc, #88]	; (8002d6c <main+0xac>)
 8002d12:	0010      	movs	r0, r2
 8002d14:	0019      	movs	r1, r3
 8002d16:	2306      	movs	r3, #6
 8002d18:	001a      	movs	r2, r3
 8002d1a:	f002 fa81 	bl	8005220 <memcpy>

		  //вивід інформації по юарту
		  HAL_UART_Transmit(&huart2, (uint8_t *)buf, sizeof(buf), 100);
 8002d1e:	4912      	ldr	r1, [pc, #72]	; (8002d68 <main+0xa8>)
 8002d20:	4813      	ldr	r0, [pc, #76]	; (8002d70 <main+0xb0>)
 8002d22:	2364      	movs	r3, #100	; 0x64
 8002d24:	220a      	movs	r2, #10
 8002d26:	f001 fea7 	bl	8004a78 <HAL_UART_Transmit>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002d2a:	2380      	movs	r3, #128	; 0x80
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4a11      	ldr	r2, [pc, #68]	; (8002d74 <main+0xb4>)
 8002d30:	0019      	movs	r1, r3
 8002d32:	0010      	movs	r0, r2
 8002d34:	f001 f9c5 	bl	80040c2 <HAL_GPIO_TogglePin>

		  if (Pht_lux > 2000)
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <main+0xa0>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	23fa      	movs	r3, #250	; 0xfa
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d903      	bls.n	8002d4c <main+0x8c>
		  {
			  HAL_Delay(100);
 8002d44:	2064      	movs	r0, #100	; 0x64
 8002d46:	f000 fb15 	bl	8003374 <HAL_Delay>
 8002d4a:	e7c9      	b.n	8002ce0 <main+0x20>
		  } else {
			  HAL_Delay(1000);
 8002d4c:	23fa      	movs	r3, #250	; 0xfa
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	0018      	movs	r0, r3
 8002d52:	f000 fb0f 	bl	8003374 <HAL_Delay>
		  Pht_lux = get_lux(ADC_Raw); //отримуємо готове значення освітленості
 8002d56:	e7c3      	b.n	8002ce0 <main+0x20>
 8002d58:	2000008c 	.word	0x2000008c
 8002d5c:	20000150 	.word	0x20000150
 8002d60:	20000158 	.word	0x20000158
 8002d64:	08006db8 	.word	0x08006db8
 8002d68:	20000164 	.word	0x20000164
 8002d6c:	08006dbc 	.word	0x08006dbc
 8002d70:	200000cc 	.word	0x200000cc
 8002d74:	48000800 	.word	0x48000800

08002d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b091      	sub	sp, #68	; 0x44
 8002d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d7e:	2410      	movs	r4, #16
 8002d80:	193b      	adds	r3, r7, r4
 8002d82:	0018      	movs	r0, r3
 8002d84:	2330      	movs	r3, #48	; 0x30
 8002d86:	001a      	movs	r2, r3
 8002d88:	2100      	movs	r1, #0
 8002d8a:	f002 fa52 	bl	8005232 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d8e:	003b      	movs	r3, r7
 8002d90:	0018      	movs	r0, r3
 8002d92:	2310      	movs	r3, #16
 8002d94:	001a      	movs	r2, r3
 8002d96:	2100      	movs	r1, #0
 8002d98:	f002 fa4b 	bl	8005232 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8002d9c:	0021      	movs	r1, r4
 8002d9e:	187b      	adds	r3, r7, r1
 8002da0:	2211      	movs	r2, #17
 8002da2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002da4:	187b      	adds	r3, r7, r1
 8002da6:	2201      	movs	r2, #1
 8002da8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002daa:	187b      	adds	r3, r7, r1
 8002dac:	2201      	movs	r2, #1
 8002dae:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	2210      	movs	r2, #16
 8002db4:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002db6:	187b      	adds	r3, r7, r1
 8002db8:	2202      	movs	r2, #2
 8002dba:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dbc:	187b      	adds	r3, r7, r1
 8002dbe:	2280      	movs	r2, #128	; 0x80
 8002dc0:	0252      	lsls	r2, r2, #9
 8002dc2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002dc4:	187b      	adds	r3, r7, r1
 8002dc6:	2280      	movs	r2, #128	; 0x80
 8002dc8:	0352      	lsls	r2, r2, #13
 8002dca:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002dcc:	187b      	adds	r3, r7, r1
 8002dce:	2200      	movs	r2, #0
 8002dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dd2:	187b      	adds	r3, r7, r1
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f001 f98f 	bl	80040f8 <HAL_RCC_OscConfig>
 8002dda:	1e03      	subs	r3, r0, #0
 8002ddc:	d001      	beq.n	8002de2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002dde:	f000 f917 	bl	8003010 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002de2:	003b      	movs	r3, r7
 8002de4:	2207      	movs	r2, #7
 8002de6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002de8:	003b      	movs	r3, r7
 8002dea:	2202      	movs	r2, #2
 8002dec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dee:	003b      	movs	r3, r7
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002df4:	003b      	movs	r3, r7
 8002df6:	2200      	movs	r2, #0
 8002df8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002dfa:	003b      	movs	r3, r7
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f001 fc94 	bl	800472c <HAL_RCC_ClockConfig>
 8002e04:	1e03      	subs	r3, r0, #0
 8002e06:	d001      	beq.n	8002e0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002e08:	f000 f902 	bl	8003010 <Error_Handler>
  }
}
 8002e0c:	46c0      	nop			; (mov r8, r8)
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b011      	add	sp, #68	; 0x44
 8002e12:	bd90      	pop	{r4, r7, pc}

08002e14 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e1a:	1d3b      	adds	r3, r7, #4
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	230c      	movs	r3, #12
 8002e20:	001a      	movs	r2, r3
 8002e22:	2100      	movs	r1, #0
 8002e24:	f002 fa05 	bl	8005232 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002e28:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <MX_ADC_Init+0xac>)
 8002e2a:	4a26      	ldr	r2, [pc, #152]	; (8002ec4 <MX_ADC_Init+0xb0>)
 8002e2c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002e2e:	4b24      	ldr	r3, [pc, #144]	; (8002ec0 <MX_ADC_Init+0xac>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002e34:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <MX_ADC_Init+0xac>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e3a:	4b21      	ldr	r3, [pc, #132]	; (8002ec0 <MX_ADC_Init+0xac>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002e40:	4b1f      	ldr	r3, [pc, #124]	; (8002ec0 <MX_ADC_Init+0xac>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e46:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <MX_ADC_Init+0xac>)
 8002e48:	2204      	movs	r2, #4
 8002e4a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002e4c:	4b1c      	ldr	r3, [pc, #112]	; (8002ec0 <MX_ADC_Init+0xac>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002e52:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <MX_ADC_Init+0xac>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <MX_ADC_Init+0xac>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002e5e:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <MX_ADC_Init+0xac>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e64:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <MX_ADC_Init+0xac>)
 8002e66:	22c2      	movs	r2, #194	; 0xc2
 8002e68:	32ff      	adds	r2, #255	; 0xff
 8002e6a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <MX_ADC_Init+0xac>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002e72:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <MX_ADC_Init+0xac>)
 8002e74:	2224      	movs	r2, #36	; 0x24
 8002e76:	2100      	movs	r1, #0
 8002e78:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e7a:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <MX_ADC_Init+0xac>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002e80:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <MX_ADC_Init+0xac>)
 8002e82:	0018      	movs	r0, r3
 8002e84:	f000 fa9a 	bl	80033bc <HAL_ADC_Init>
 8002e88:	1e03      	subs	r3, r0, #0
 8002e8a:	d001      	beq.n	8002e90 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002e8c:	f000 f8c0 	bl	8003010 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002e90:	1d3b      	adds	r3, r7, #4
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002e96:	1d3b      	adds	r3, r7, #4
 8002e98:	2280      	movs	r2, #128	; 0x80
 8002e9a:	0152      	lsls	r2, r2, #5
 8002e9c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002e9e:	1d3b      	adds	r3, r7, #4
 8002ea0:	2207      	movs	r2, #7
 8002ea2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002ea4:	1d3a      	adds	r2, r7, #4
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <MX_ADC_Init+0xac>)
 8002ea8:	0011      	movs	r1, r2
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 fd0c 	bl	80038c8 <HAL_ADC_ConfigChannel>
 8002eb0:	1e03      	subs	r3, r0, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8002eb4:	f000 f8ac 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b004      	add	sp, #16
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	2000008c 	.word	0x2000008c
 8002ec4:	40012400 	.word	0x40012400

08002ec8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ecc:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <MX_USART2_UART_Init+0x58>)
 8002ece:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <MX_USART2_UART_Init+0x5c>)
 8002ed0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <MX_USART2_UART_Init+0x58>)
 8002ed4:	2296      	movs	r2, #150	; 0x96
 8002ed6:	0192      	lsls	r2, r2, #6
 8002ed8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002eda:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <MX_USART2_UART_Init+0x58>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <MX_USART2_UART_Init+0x58>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <MX_USART2_UART_Init+0x58>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <MX_USART2_UART_Init+0x58>)
 8002eee:	220c      	movs	r2, #12
 8002ef0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <MX_USART2_UART_Init+0x58>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <MX_USART2_UART_Init+0x58>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002efe:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <MX_USART2_UART_Init+0x58>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <MX_USART2_UART_Init+0x58>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <MX_USART2_UART_Init+0x58>)
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f001 fd5f 	bl	80049d0 <HAL_UART_Init>
 8002f12:	1e03      	subs	r3, r0, #0
 8002f14:	d001      	beq.n	8002f1a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f16:	f000 f87b 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	200000cc 	.word	0x200000cc
 8002f24:	40004400 	.word	0x40004400

08002f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f28:	b590      	push	{r4, r7, lr}
 8002f2a:	b089      	sub	sp, #36	; 0x24
 8002f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2e:	240c      	movs	r4, #12
 8002f30:	193b      	adds	r3, r7, r4
 8002f32:	0018      	movs	r0, r3
 8002f34:	2314      	movs	r3, #20
 8002f36:	001a      	movs	r2, r3
 8002f38:	2100      	movs	r1, #0
 8002f3a:	f002 f97a 	bl	8005232 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f3e:	4b32      	ldr	r3, [pc, #200]	; (8003008 <MX_GPIO_Init+0xe0>)
 8002f40:	695a      	ldr	r2, [r3, #20]
 8002f42:	4b31      	ldr	r3, [pc, #196]	; (8003008 <MX_GPIO_Init+0xe0>)
 8002f44:	2180      	movs	r1, #128	; 0x80
 8002f46:	03c9      	lsls	r1, r1, #15
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	615a      	str	r2, [r3, #20]
 8002f4c:	4b2e      	ldr	r3, [pc, #184]	; (8003008 <MX_GPIO_Init+0xe0>)
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	03db      	lsls	r3, r3, #15
 8002f54:	4013      	ands	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5a:	4b2b      	ldr	r3, [pc, #172]	; (8003008 <MX_GPIO_Init+0xe0>)
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	4b2a      	ldr	r3, [pc, #168]	; (8003008 <MX_GPIO_Init+0xe0>)
 8002f60:	2180      	movs	r1, #128	; 0x80
 8002f62:	0289      	lsls	r1, r1, #10
 8002f64:	430a      	orrs	r2, r1
 8002f66:	615a      	str	r2, [r3, #20]
 8002f68:	4b27      	ldr	r3, [pc, #156]	; (8003008 <MX_GPIO_Init+0xe0>)
 8002f6a:	695a      	ldr	r2, [r3, #20]
 8002f6c:	2380      	movs	r3, #128	; 0x80
 8002f6e:	029b      	lsls	r3, r3, #10
 8002f70:	4013      	ands	r3, r2
 8002f72:	607b      	str	r3, [r7, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f76:	4b24      	ldr	r3, [pc, #144]	; (8003008 <MX_GPIO_Init+0xe0>)
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	4b23      	ldr	r3, [pc, #140]	; (8003008 <MX_GPIO_Init+0xe0>)
 8002f7c:	2180      	movs	r1, #128	; 0x80
 8002f7e:	0309      	lsls	r1, r1, #12
 8002f80:	430a      	orrs	r2, r1
 8002f82:	615a      	str	r2, [r3, #20]
 8002f84:	4b20      	ldr	r3, [pc, #128]	; (8003008 <MX_GPIO_Init+0xe0>)
 8002f86:	695a      	ldr	r2, [r3, #20]
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	031b      	lsls	r3, r3, #12
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|LD3_Pin, GPIO_PIN_RESET);
 8002f92:	23c0      	movs	r3, #192	; 0xc0
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	481d      	ldr	r0, [pc, #116]	; (800300c <MX_GPIO_Init+0xe4>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	f001 f874 	bl	8004088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	0059      	lsls	r1, r3, #1
 8002fa4:	2390      	movs	r3, #144	; 0x90
 8002fa6:	05db      	lsls	r3, r3, #23
 8002fa8:	2200      	movs	r2, #0
 8002faa:	0018      	movs	r0, r3
 8002fac:	f001 f86c 	bl	8004088 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC8 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|LD3_Pin;
 8002fb0:	193b      	adds	r3, r7, r4
 8002fb2:	22c0      	movs	r2, #192	; 0xc0
 8002fb4:	0092      	lsls	r2, r2, #2
 8002fb6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb8:	193b      	adds	r3, r7, r4
 8002fba:	2201      	movs	r2, #1
 8002fbc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	193b      	adds	r3, r7, r4
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc4:	193b      	adds	r3, r7, r4
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fca:	193b      	adds	r3, r7, r4
 8002fcc:	4a0f      	ldr	r2, [pc, #60]	; (800300c <MX_GPIO_Init+0xe4>)
 8002fce:	0019      	movs	r1, r3
 8002fd0:	0010      	movs	r0, r2
 8002fd2:	f000 fee9 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002fd6:	0021      	movs	r1, r4
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	2280      	movs	r2, #128	; 0x80
 8002fdc:	0052      	lsls	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe0:	187b      	adds	r3, r7, r1
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	187b      	adds	r3, r7, r1
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fec:	187b      	adds	r3, r7, r1
 8002fee:	2200      	movs	r2, #0
 8002ff0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff2:	187a      	adds	r2, r7, r1
 8002ff4:	2390      	movs	r3, #144	; 0x90
 8002ff6:	05db      	lsls	r3, r3, #23
 8002ff8:	0011      	movs	r1, r2
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 fed4 	bl	8003da8 <HAL_GPIO_Init>

}
 8003000:	46c0      	nop			; (mov r8, r8)
 8003002:	46bd      	mov	sp, r7
 8003004:	b009      	add	sp, #36	; 0x24
 8003006:	bd90      	pop	{r4, r7, pc}
 8003008:	40021000 	.word	0x40021000
 800300c:	48000800 	.word	0x48000800

08003010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003014:	b672      	cpsid	i
}
 8003016:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003018:	e7fe      	b.n	8003018 <Error_Handler+0x8>
	...

0800301c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003022:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <HAL_MspInit+0x44>)
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <HAL_MspInit+0x44>)
 8003028:	2101      	movs	r1, #1
 800302a:	430a      	orrs	r2, r1
 800302c:	619a      	str	r2, [r3, #24]
 800302e:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <HAL_MspInit+0x44>)
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	2201      	movs	r2, #1
 8003034:	4013      	ands	r3, r2
 8003036:	607b      	str	r3, [r7, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <HAL_MspInit+0x44>)
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	4b08      	ldr	r3, [pc, #32]	; (8003060 <HAL_MspInit+0x44>)
 8003040:	2180      	movs	r1, #128	; 0x80
 8003042:	0549      	lsls	r1, r1, #21
 8003044:	430a      	orrs	r2, r1
 8003046:	61da      	str	r2, [r3, #28]
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <HAL_MspInit+0x44>)
 800304a:	69da      	ldr	r2, [r3, #28]
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	055b      	lsls	r3, r3, #21
 8003050:	4013      	ands	r3, r2
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	b002      	add	sp, #8
 800305c:	bd80      	pop	{r7, pc}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	40021000 	.word	0x40021000

08003064 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003064:	b590      	push	{r4, r7, lr}
 8003066:	b08b      	sub	sp, #44	; 0x2c
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306c:	2414      	movs	r4, #20
 800306e:	193b      	adds	r3, r7, r4
 8003070:	0018      	movs	r0, r3
 8003072:	2314      	movs	r3, #20
 8003074:	001a      	movs	r2, r3
 8003076:	2100      	movs	r1, #0
 8003078:	f002 f8db 	bl	8005232 <memset>
  if(hadc->Instance==ADC1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1d      	ldr	r2, [pc, #116]	; (80030f8 <HAL_ADC_MspInit+0x94>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d133      	bne.n	80030ee <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003086:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <HAL_ADC_MspInit+0x98>)
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <HAL_ADC_MspInit+0x98>)
 800308c:	2180      	movs	r1, #128	; 0x80
 800308e:	0089      	lsls	r1, r1, #2
 8003090:	430a      	orrs	r2, r1
 8003092:	619a      	str	r2, [r3, #24]
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_ADC_MspInit+0x98>)
 8003096:	699a      	ldr	r2, [r3, #24]
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a2:	4b16      	ldr	r3, [pc, #88]	; (80030fc <HAL_ADC_MspInit+0x98>)
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	4b15      	ldr	r3, [pc, #84]	; (80030fc <HAL_ADC_MspInit+0x98>)
 80030a8:	2180      	movs	r1, #128	; 0x80
 80030aa:	0289      	lsls	r1, r1, #10
 80030ac:	430a      	orrs	r2, r1
 80030ae:	615a      	str	r2, [r3, #20]
 80030b0:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_ADC_MspInit+0x98>)
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	029b      	lsls	r3, r3, #10
 80030b8:	4013      	ands	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80030be:	193b      	adds	r3, r7, r4
 80030c0:	2201      	movs	r2, #1
 80030c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030c4:	193b      	adds	r3, r7, r4
 80030c6:	2203      	movs	r2, #3
 80030c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ca:	193b      	adds	r3, r7, r4
 80030cc:	2200      	movs	r2, #0
 80030ce:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d0:	193a      	adds	r2, r7, r4
 80030d2:	2390      	movs	r3, #144	; 0x90
 80030d4:	05db      	lsls	r3, r3, #23
 80030d6:	0011      	movs	r1, r2
 80030d8:	0018      	movs	r0, r3
 80030da:	f000 fe65 	bl	8003da8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80030de:	2200      	movs	r2, #0
 80030e0:	2100      	movs	r1, #0
 80030e2:	200c      	movs	r0, #12
 80030e4:	f000 fe2e 	bl	8003d44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80030e8:	200c      	movs	r0, #12
 80030ea:	f000 fe40 	bl	8003d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b00b      	add	sp, #44	; 0x2c
 80030f4:	bd90      	pop	{r4, r7, pc}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	40012400 	.word	0x40012400
 80030fc:	40021000 	.word	0x40021000

08003100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b08b      	sub	sp, #44	; 0x2c
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003108:	2414      	movs	r4, #20
 800310a:	193b      	adds	r3, r7, r4
 800310c:	0018      	movs	r0, r3
 800310e:	2314      	movs	r3, #20
 8003110:	001a      	movs	r2, r3
 8003112:	2100      	movs	r1, #0
 8003114:	f002 f88d 	bl	8005232 <memset>
  if(huart->Instance==USART2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1c      	ldr	r2, [pc, #112]	; (8003190 <HAL_UART_MspInit+0x90>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d132      	bne.n	8003188 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003122:	4b1c      	ldr	r3, [pc, #112]	; (8003194 <HAL_UART_MspInit+0x94>)
 8003124:	69da      	ldr	r2, [r3, #28]
 8003126:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <HAL_UART_MspInit+0x94>)
 8003128:	2180      	movs	r1, #128	; 0x80
 800312a:	0289      	lsls	r1, r1, #10
 800312c:	430a      	orrs	r2, r1
 800312e:	61da      	str	r2, [r3, #28]
 8003130:	4b18      	ldr	r3, [pc, #96]	; (8003194 <HAL_UART_MspInit+0x94>)
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	029b      	lsls	r3, r3, #10
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313e:	4b15      	ldr	r3, [pc, #84]	; (8003194 <HAL_UART_MspInit+0x94>)
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	4b14      	ldr	r3, [pc, #80]	; (8003194 <HAL_UART_MspInit+0x94>)
 8003144:	2180      	movs	r1, #128	; 0x80
 8003146:	0289      	lsls	r1, r1, #10
 8003148:	430a      	orrs	r2, r1
 800314a:	615a      	str	r2, [r3, #20]
 800314c:	4b11      	ldr	r3, [pc, #68]	; (8003194 <HAL_UART_MspInit+0x94>)
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	029b      	lsls	r3, r3, #10
 8003154:	4013      	ands	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800315a:	0021      	movs	r1, r4
 800315c:	187b      	adds	r3, r7, r1
 800315e:	220c      	movs	r2, #12
 8003160:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003162:	187b      	adds	r3, r7, r1
 8003164:	2202      	movs	r2, #2
 8003166:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	187b      	adds	r3, r7, r1
 800316a:	2200      	movs	r2, #0
 800316c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800316e:	187b      	adds	r3, r7, r1
 8003170:	2203      	movs	r2, #3
 8003172:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003174:	187b      	adds	r3, r7, r1
 8003176:	2201      	movs	r2, #1
 8003178:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317a:	187a      	adds	r2, r7, r1
 800317c:	2390      	movs	r3, #144	; 0x90
 800317e:	05db      	lsls	r3, r3, #23
 8003180:	0011      	movs	r1, r2
 8003182:	0018      	movs	r0, r3
 8003184:	f000 fe10 	bl	8003da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	b00b      	add	sp, #44	; 0x2c
 800318e:	bd90      	pop	{r4, r7, pc}
 8003190:	40004400 	.word	0x40004400
 8003194:	40021000 	.word	0x40021000

08003198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800319c:	e7fe      	b.n	800319c <NMI_Handler+0x4>

0800319e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031a2:	e7fe      	b.n	80031a2 <HardFault_Handler+0x4>

080031a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031bc:	f000 f8be 	bl	800333c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031c0:	46c0      	nop			; (mov r8, r8)
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80031cc:	4b03      	ldr	r3, [pc, #12]	; (80031dc <ADC1_COMP_IRQHandler+0x14>)
 80031ce:	0018      	movs	r0, r3
 80031d0:	f000 fab2 	bl	8003738 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80031d4:	46c0      	nop			; (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	2000008c 	.word	0x2000008c

080031e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031e8:	4a14      	ldr	r2, [pc, #80]	; (800323c <_sbrk+0x5c>)
 80031ea:	4b15      	ldr	r3, [pc, #84]	; (8003240 <_sbrk+0x60>)
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031f4:	4b13      	ldr	r3, [pc, #76]	; (8003244 <_sbrk+0x64>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d102      	bne.n	8003202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <_sbrk+0x64>)
 80031fe:	4a12      	ldr	r2, [pc, #72]	; (8003248 <_sbrk+0x68>)
 8003200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <_sbrk+0x64>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	18d3      	adds	r3, r2, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	429a      	cmp	r2, r3
 800320e:	d207      	bcs.n	8003220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003210:	f001 ffdc 	bl	80051cc <__errno>
 8003214:	0003      	movs	r3, r0
 8003216:	220c      	movs	r2, #12
 8003218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800321a:	2301      	movs	r3, #1
 800321c:	425b      	negs	r3, r3
 800321e:	e009      	b.n	8003234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003220:	4b08      	ldr	r3, [pc, #32]	; (8003244 <_sbrk+0x64>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <_sbrk+0x64>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	18d2      	adds	r2, r2, r3
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <_sbrk+0x64>)
 8003230:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003232:	68fb      	ldr	r3, [r7, #12]
}
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	b006      	add	sp, #24
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20002000 	.word	0x20002000
 8003240:	00000400 	.word	0x00000400
 8003244:	20000170 	.word	0x20000170
 8003248:	20000188 	.word	0x20000188

0800324c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003250:	46c0      	nop			; (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003258:	480d      	ldr	r0, [pc, #52]	; (8003290 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800325a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800325c:	480d      	ldr	r0, [pc, #52]	; (8003294 <LoopForever+0x6>)
  ldr r1, =_edata
 800325e:	490e      	ldr	r1, [pc, #56]	; (8003298 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003260:	4a0e      	ldr	r2, [pc, #56]	; (800329c <LoopForever+0xe>)
  movs r3, #0
 8003262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003264:	e002      	b.n	800326c <LoopCopyDataInit>

08003266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800326a:	3304      	adds	r3, #4

0800326c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800326c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800326e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003270:	d3f9      	bcc.n	8003266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003272:	4a0b      	ldr	r2, [pc, #44]	; (80032a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003274:	4c0b      	ldr	r4, [pc, #44]	; (80032a4 <LoopForever+0x16>)
  movs r3, #0
 8003276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003278:	e001      	b.n	800327e <LoopFillZerobss>

0800327a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800327a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800327c:	3204      	adds	r2, #4

0800327e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800327e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003280:	d3fb      	bcc.n	800327a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003282:	f7ff ffe3 	bl	800324c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003286:	f001 ffa7 	bl	80051d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800328a:	f7ff fd19 	bl	8002cc0 <main>

0800328e <LoopForever>:

LoopForever:
    b LoopForever
 800328e:	e7fe      	b.n	800328e <LoopForever>
  ldr   r0, =_estack
 8003290:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003298:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800329c:	08006fa8 	.word	0x08006fa8
  ldr r2, =_sbss
 80032a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80032a4:	20000188 	.word	0x20000188

080032a8 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032a8:	e7fe      	b.n	80032a8 <CEC_CAN_IRQHandler>
	...

080032ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <HAL_Init+0x24>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_Init+0x24>)
 80032b6:	2110      	movs	r1, #16
 80032b8:	430a      	orrs	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80032bc:	2000      	movs	r0, #0
 80032be:	f000 f809 	bl	80032d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032c2:	f7ff feab 	bl	800301c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	0018      	movs	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	40022000 	.word	0x40022000

080032d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032dc:	4b14      	ldr	r3, [pc, #80]	; (8003330 <HAL_InitTick+0x5c>)
 80032de:	681c      	ldr	r4, [r3, #0]
 80032e0:	4b14      	ldr	r3, [pc, #80]	; (8003334 <HAL_InitTick+0x60>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	0019      	movs	r1, r3
 80032e6:	23fa      	movs	r3, #250	; 0xfa
 80032e8:	0098      	lsls	r0, r3, #2
 80032ea:	f7fc ff1f 	bl	800012c <__udivsi3>
 80032ee:	0003      	movs	r3, r0
 80032f0:	0019      	movs	r1, r3
 80032f2:	0020      	movs	r0, r4
 80032f4:	f7fc ff1a 	bl	800012c <__udivsi3>
 80032f8:	0003      	movs	r3, r0
 80032fa:	0018      	movs	r0, r3
 80032fc:	f000 fd47 	bl	8003d8e <HAL_SYSTICK_Config>
 8003300:	1e03      	subs	r3, r0, #0
 8003302:	d001      	beq.n	8003308 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e00f      	b.n	8003328 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b03      	cmp	r3, #3
 800330c:	d80b      	bhi.n	8003326 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	2301      	movs	r3, #1
 8003312:	425b      	negs	r3, r3
 8003314:	2200      	movs	r2, #0
 8003316:	0018      	movs	r0, r3
 8003318:	f000 fd14 	bl	8003d44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800331c:	4b06      	ldr	r3, [pc, #24]	; (8003338 <HAL_InitTick+0x64>)
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	b003      	add	sp, #12
 800332e:	bd90      	pop	{r4, r7, pc}
 8003330:	20000000 	.word	0x20000000
 8003334:	20000008 	.word	0x20000008
 8003338:	20000004 	.word	0x20000004

0800333c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <HAL_IncTick+0x1c>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	001a      	movs	r2, r3
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_IncTick+0x20>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	18d2      	adds	r2, r2, r3
 800334c:	4b03      	ldr	r3, [pc, #12]	; (800335c <HAL_IncTick+0x20>)
 800334e:	601a      	str	r2, [r3, #0]
}
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	20000008 	.word	0x20000008
 800335c:	20000174 	.word	0x20000174

08003360 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  return uwTick;
 8003364:	4b02      	ldr	r3, [pc, #8]	; (8003370 <HAL_GetTick+0x10>)
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	0018      	movs	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	20000174 	.word	0x20000174

08003374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800337c:	f7ff fff0 	bl	8003360 <HAL_GetTick>
 8003380:	0003      	movs	r3, r0
 8003382:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	3301      	adds	r3, #1
 800338c:	d005      	beq.n	800339a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <HAL_Delay+0x44>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	001a      	movs	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	189b      	adds	r3, r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	f7ff ffe0 	bl	8003360 <HAL_GetTick>
 80033a0:	0002      	movs	r2, r0
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d8f7      	bhi.n	800339c <HAL_Delay+0x28>
  {
  }
}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b004      	add	sp, #16
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	20000008 	.word	0x20000008

080033bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033c4:	230f      	movs	r3, #15
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e125      	b.n	8003626 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10a      	bne.n	80033f8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2234      	movs	r2, #52	; 0x34
 80033ec:	2100      	movs	r1, #0
 80033ee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	0018      	movs	r0, r3
 80033f4:	f7ff fe36 	bl	8003064 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	2210      	movs	r2, #16
 80033fe:	4013      	ands	r3, r2
 8003400:	d000      	beq.n	8003404 <HAL_ADC_Init+0x48>
 8003402:	e103      	b.n	800360c <HAL_ADC_Init+0x250>
 8003404:	230f      	movs	r3, #15
 8003406:	18fb      	adds	r3, r7, r3
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d000      	beq.n	8003410 <HAL_ADC_Init+0x54>
 800340e:	e0fd      	b.n	800360c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2204      	movs	r2, #4
 8003418:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800341a:	d000      	beq.n	800341e <HAL_ADC_Init+0x62>
 800341c:	e0f6      	b.n	800360c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	4a83      	ldr	r2, [pc, #524]	; (8003630 <HAL_ADC_Init+0x274>)
 8003424:	4013      	ands	r3, r2
 8003426:	2202      	movs	r2, #2
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2203      	movs	r2, #3
 8003436:	4013      	ands	r3, r2
 8003438:	2b01      	cmp	r3, #1
 800343a:	d112      	bne.n	8003462 <HAL_ADC_Init+0xa6>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2201      	movs	r2, #1
 8003444:	4013      	ands	r3, r2
 8003446:	2b01      	cmp	r3, #1
 8003448:	d009      	beq.n	800345e <HAL_ADC_Init+0xa2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	2380      	movs	r3, #128	; 0x80
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	401a      	ands	r2, r3
 8003456:	2380      	movs	r3, #128	; 0x80
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	429a      	cmp	r2, r3
 800345c:	d101      	bne.n	8003462 <HAL_ADC_Init+0xa6>
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <HAL_ADC_Init+0xa8>
 8003462:	2300      	movs	r3, #0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d116      	bne.n	8003496 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2218      	movs	r2, #24
 8003470:	4393      	bics	r3, r2
 8003472:	0019      	movs	r1, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	0899      	lsrs	r1, r3, #2
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4964      	ldr	r1, [pc, #400]	; (8003634 <HAL_ADC_Init+0x278>)
 80034a2:	400a      	ands	r2, r1
 80034a4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	7e1b      	ldrb	r3, [r3, #24]
 80034aa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	7e5b      	ldrb	r3, [r3, #25]
 80034b0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	7e9b      	ldrb	r3, [r3, #26]
 80034b8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80034ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d002      	beq.n	80034ca <HAL_ADC_Init+0x10e>
 80034c4:	2380      	movs	r3, #128	; 0x80
 80034c6:	015b      	lsls	r3, r3, #5
 80034c8:	e000      	b.n	80034cc <HAL_ADC_Init+0x110>
 80034ca:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80034cc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80034d2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d101      	bne.n	80034e0 <HAL_ADC_Init+0x124>
 80034dc:	2304      	movs	r3, #4
 80034de:	e000      	b.n	80034e2 <HAL_ADC_Init+0x126>
 80034e0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80034e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2124      	movs	r1, #36	; 0x24
 80034e8:	5c5b      	ldrb	r3, [r3, r1]
 80034ea:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80034ec:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	7edb      	ldrb	r3, [r3, #27]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d115      	bne.n	8003528 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	7e9b      	ldrb	r3, [r3, #26]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d105      	bne.n	8003510 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2280      	movs	r2, #128	; 0x80
 8003508:	0252      	lsls	r2, r2, #9
 800350a:	4313      	orrs	r3, r2
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	e00b      	b.n	8003528 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	2220      	movs	r2, #32
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003520:	2201      	movs	r2, #1
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69da      	ldr	r2, [r3, #28]
 800352c:	23c2      	movs	r3, #194	; 0xc2
 800352e:	33ff      	adds	r3, #255	; 0xff
 8003530:	429a      	cmp	r2, r3
 8003532:	d007      	beq.n	8003544 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800353c:	4313      	orrs	r3, r2
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	4313      	orrs	r3, r2
 8003542:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68d9      	ldr	r1, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	430a      	orrs	r2, r1
 8003552:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003558:	2380      	movs	r3, #128	; 0x80
 800355a:	055b      	lsls	r3, r3, #21
 800355c:	429a      	cmp	r2, r3
 800355e:	d01b      	beq.n	8003598 <HAL_ADC_Init+0x1dc>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003564:	2b01      	cmp	r3, #1
 8003566:	d017      	beq.n	8003598 <HAL_ADC_Init+0x1dc>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	2b02      	cmp	r3, #2
 800356e:	d013      	beq.n	8003598 <HAL_ADC_Init+0x1dc>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	2b03      	cmp	r3, #3
 8003576:	d00f      	beq.n	8003598 <HAL_ADC_Init+0x1dc>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	2b04      	cmp	r3, #4
 800357e:	d00b      	beq.n	8003598 <HAL_ADC_Init+0x1dc>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	2b05      	cmp	r3, #5
 8003586:	d007      	beq.n	8003598 <HAL_ADC_Init+0x1dc>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	2b06      	cmp	r3, #6
 800358e:	d003      	beq.n	8003598 <HAL_ADC_Init+0x1dc>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	2b07      	cmp	r3, #7
 8003596:	d112      	bne.n	80035be <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2107      	movs	r1, #7
 80035a4:	438a      	bics	r2, r1
 80035a6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6959      	ldr	r1, [r3, #20]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	2207      	movs	r2, #7
 80035b4:	401a      	ands	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a1c      	ldr	r2, [pc, #112]	; (8003638 <HAL_ADC_Init+0x27c>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d10b      	bne.n	80035e6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	2203      	movs	r2, #3
 80035da:	4393      	bics	r3, r2
 80035dc:	2201      	movs	r2, #1
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80035e4:	e01c      	b.n	8003620 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	2212      	movs	r2, #18
 80035ec:	4393      	bics	r3, r2
 80035ee:	2210      	movs	r2, #16
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fa:	2201      	movs	r2, #1
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003602:	230f      	movs	r3, #15
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800360a:	e009      	b.n	8003620 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	2210      	movs	r2, #16
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003618:	230f      	movs	r3, #15
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	2201      	movs	r2, #1
 800361e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003620:	230f      	movs	r3, #15
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	781b      	ldrb	r3, [r3, #0]
}
 8003626:	0018      	movs	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	b004      	add	sp, #16
 800362c:	bd80      	pop	{r7, pc}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	fffffefd 	.word	0xfffffefd
 8003634:	fffe0219 	.word	0xfffe0219
 8003638:	833fffe7 	.word	0x833fffe7

0800363c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800363c:	b590      	push	{r4, r7, lr}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003644:	230f      	movs	r3, #15
 8003646:	18fb      	adds	r3, r7, r3
 8003648:	2200      	movs	r2, #0
 800364a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2204      	movs	r2, #4
 8003654:	4013      	ands	r3, r2
 8003656:	d156      	bne.n	8003706 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2234      	movs	r2, #52	; 0x34
 800365c:	5c9b      	ldrb	r3, [r3, r2]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_ADC_Start_IT+0x2a>
 8003662:	2302      	movs	r3, #2
 8003664:	e056      	b.n	8003714 <HAL_ADC_Start_IT+0xd8>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2234      	movs	r2, #52	; 0x34
 800366a:	2101      	movs	r1, #1
 800366c:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	7e5b      	ldrb	r3, [r3, #25]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d007      	beq.n	8003686 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003676:	230f      	movs	r3, #15
 8003678:	18fc      	adds	r4, r7, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	0018      	movs	r0, r3
 800367e:	f000 fa31 	bl	8003ae4 <ADC_Enable>
 8003682:	0003      	movs	r3, r0
 8003684:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003686:	230f      	movs	r3, #15
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d13e      	bne.n	800370e <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	4a21      	ldr	r2, [pc, #132]	; (800371c <HAL_ADC_Start_IT+0xe0>)
 8003696:	4013      	ands	r3, r2
 8003698:	2280      	movs	r2, #128	; 0x80
 800369a:	0052      	lsls	r2, r2, #1
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2234      	movs	r2, #52	; 0x34
 80036ac:	2100      	movs	r1, #0
 80036ae:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	221c      	movs	r2, #28
 80036b6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d110      	bne.n	80036e2 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2104      	movs	r1, #4
 80036cc:	438a      	bics	r2, r1
 80036ce:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2118      	movs	r1, #24
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
          break;
 80036e0:	e008      	b.n	80036f4 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	211c      	movs	r1, #28
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
          break;
 80036f2:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2104      	movs	r1, #4
 8003700:	430a      	orrs	r2, r1
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	e003      	b.n	800370e <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003706:	230f      	movs	r3, #15
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2202      	movs	r2, #2
 800370c:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 800370e:	230f      	movs	r3, #15
 8003710:	18fb      	adds	r3, r7, r3
 8003712:	781b      	ldrb	r3, [r3, #0]
}
 8003714:	0018      	movs	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	b005      	add	sp, #20
 800371a:	bd90      	pop	{r4, r7, pc}
 800371c:	fffff0fe 	.word	0xfffff0fe

08003720 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800372e:	0018      	movs	r0, r3
 8003730:	46bd      	mov	sp, r7
 8003732:	b002      	add	sp, #8
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2204      	movs	r2, #4
 8003748:	4013      	ands	r3, r2
 800374a:	2b04      	cmp	r3, #4
 800374c:	d106      	bne.n	800375c <HAL_ADC_IRQHandler+0x24>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2204      	movs	r2, #4
 8003756:	4013      	ands	r3, r2
 8003758:	2b04      	cmp	r3, #4
 800375a:	d00d      	beq.n	8003778 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2208      	movs	r2, #8
 8003764:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003766:	2b08      	cmp	r3, #8
 8003768:	d14f      	bne.n	800380a <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2208      	movs	r2, #8
 8003772:	4013      	ands	r3, r2
 8003774:	2b08      	cmp	r3, #8
 8003776:	d148      	bne.n	800380a <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377c:	2210      	movs	r2, #16
 800377e:	4013      	ands	r3, r2
 8003780:	d106      	bne.n	8003790 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	2280      	movs	r2, #128	; 0x80
 8003788:	0092      	lsls	r2, r2, #2
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	23c0      	movs	r3, #192	; 0xc0
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	4013      	ands	r3, r2
 800379c:	d12d      	bne.n	80037fa <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d129      	bne.n	80037fa <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2208      	movs	r2, #8
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d122      	bne.n	80037fa <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2204      	movs	r2, #4
 80037bc:	4013      	ands	r3, r2
 80037be:	d110      	bne.n	80037e2 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	210c      	movs	r1, #12
 80037cc:	438a      	bics	r2, r1
 80037ce:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	4a33      	ldr	r2, [pc, #204]	; (80038a4 <HAL_ADC_IRQHandler+0x16c>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	2201      	movs	r2, #1
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	639a      	str	r2, [r3, #56]	; 0x38
 80037e0:	e00b      	b.n	80037fa <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e6:	2220      	movs	r2, #32
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f2:	2201      	movs	r2, #1
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f7ff f9c9 	bl	8002b94 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	220c      	movs	r2, #12
 8003808:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2280      	movs	r2, #128	; 0x80
 8003812:	4013      	ands	r3, r2
 8003814:	2b80      	cmp	r3, #128	; 0x80
 8003816:	d115      	bne.n	8003844 <HAL_ADC_IRQHandler+0x10c>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2280      	movs	r2, #128	; 0x80
 8003820:	4013      	ands	r3, r2
 8003822:	2b80      	cmp	r3, #128	; 0x80
 8003824:	d10e      	bne.n	8003844 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	2280      	movs	r2, #128	; 0x80
 800382c:	0252      	lsls	r2, r2, #9
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	0018      	movs	r0, r3
 8003838:	f000 f836 	bl	80038a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2280      	movs	r2, #128	; 0x80
 8003842:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2210      	movs	r2, #16
 800384c:	4013      	ands	r3, r2
 800384e:	2b10      	cmp	r3, #16
 8003850:	d123      	bne.n	800389a <HAL_ADC_IRQHandler+0x162>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2210      	movs	r2, #16
 800385a:	4013      	ands	r3, r2
 800385c:	2b10      	cmp	r3, #16
 800385e:	d11c      	bne.n	800389a <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	2b01      	cmp	r3, #1
 8003866:	d006      	beq.n	8003876 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003872:	2b01      	cmp	r3, #1
 8003874:	d10d      	bne.n	8003892 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387a:	2202      	movs	r2, #2
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2210      	movs	r2, #16
 8003888:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	0018      	movs	r0, r3
 800388e:	f000 f813 	bl	80038b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2210      	movs	r2, #16
 8003898:	601a      	str	r2, [r3, #0]
  }

}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	b002      	add	sp, #8
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	fffffefe 	.word	0xfffffefe

080038a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80038b0:	46c0      	nop			; (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b002      	add	sp, #8
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80038c0:	46c0      	nop			; (mov r8, r8)
 80038c2:	46bd      	mov	sp, r7
 80038c4:	b002      	add	sp, #8
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038d2:	230f      	movs	r3, #15
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	055b      	lsls	r3, r3, #21
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d011      	beq.n	800390e <HAL_ADC_ConfigChannel+0x46>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d00d      	beq.n	800390e <HAL_ADC_ConfigChannel+0x46>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d009      	beq.n	800390e <HAL_ADC_ConfigChannel+0x46>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	2b03      	cmp	r3, #3
 8003900:	d005      	beq.n	800390e <HAL_ADC_ConfigChannel+0x46>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	2b04      	cmp	r3, #4
 8003908:	d001      	beq.n	800390e <HAL_ADC_ConfigChannel+0x46>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2234      	movs	r2, #52	; 0x34
 8003912:	5c9b      	ldrb	r3, [r3, r2]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_ADC_ConfigChannel+0x54>
 8003918:	2302      	movs	r3, #2
 800391a:	e0d0      	b.n	8003abe <HAL_ADC_ConfigChannel+0x1f6>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2234      	movs	r2, #52	; 0x34
 8003920:	2101      	movs	r1, #1
 8003922:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2204      	movs	r2, #4
 800392c:	4013      	ands	r3, r2
 800392e:	d000      	beq.n	8003932 <HAL_ADC_ConfigChannel+0x6a>
 8003930:	e0b4      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	4a64      	ldr	r2, [pc, #400]	; (8003ac8 <HAL_ADC_ConfigChannel+0x200>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d100      	bne.n	800393e <HAL_ADC_ConfigChannel+0x76>
 800393c:	e082      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2201      	movs	r2, #1
 800394a:	409a      	lsls	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003958:	2380      	movs	r3, #128	; 0x80
 800395a:	055b      	lsls	r3, r3, #21
 800395c:	429a      	cmp	r2, r3
 800395e:	d037      	beq.n	80039d0 <HAL_ADC_ConfigChannel+0x108>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d033      	beq.n	80039d0 <HAL_ADC_ConfigChannel+0x108>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	2b02      	cmp	r3, #2
 800396e:	d02f      	beq.n	80039d0 <HAL_ADC_ConfigChannel+0x108>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	2b03      	cmp	r3, #3
 8003976:	d02b      	beq.n	80039d0 <HAL_ADC_ConfigChannel+0x108>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	2b04      	cmp	r3, #4
 800397e:	d027      	beq.n	80039d0 <HAL_ADC_ConfigChannel+0x108>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	2b05      	cmp	r3, #5
 8003986:	d023      	beq.n	80039d0 <HAL_ADC_ConfigChannel+0x108>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	2b06      	cmp	r3, #6
 800398e:	d01f      	beq.n	80039d0 <HAL_ADC_ConfigChannel+0x108>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	2b07      	cmp	r3, #7
 8003996:	d01b      	beq.n	80039d0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	2107      	movs	r1, #7
 80039a4:	400b      	ands	r3, r1
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d012      	beq.n	80039d0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695a      	ldr	r2, [r3, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2107      	movs	r1, #7
 80039b6:	438a      	bics	r2, r1
 80039b8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6959      	ldr	r1, [r3, #20]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2207      	movs	r2, #7
 80039c6:	401a      	ands	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b10      	cmp	r3, #16
 80039d6:	d007      	beq.n	80039e8 <HAL_ADC_ConfigChannel+0x120>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b11      	cmp	r3, #17
 80039de:	d003      	beq.n	80039e8 <HAL_ADC_ConfigChannel+0x120>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b12      	cmp	r3, #18
 80039e6:	d163      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80039e8:	4b38      	ldr	r3, [pc, #224]	; (8003acc <HAL_ADC_ConfigChannel+0x204>)
 80039ea:	6819      	ldr	r1, [r3, #0]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b10      	cmp	r3, #16
 80039f2:	d009      	beq.n	8003a08 <HAL_ADC_ConfigChannel+0x140>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b11      	cmp	r3, #17
 80039fa:	d102      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x13a>
 80039fc:	2380      	movs	r3, #128	; 0x80
 80039fe:	03db      	lsls	r3, r3, #15
 8003a00:	e004      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x144>
 8003a02:	2380      	movs	r3, #128	; 0x80
 8003a04:	045b      	lsls	r3, r3, #17
 8003a06:	e001      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x144>
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	041b      	lsls	r3, r3, #16
 8003a0c:	4a2f      	ldr	r2, [pc, #188]	; (8003acc <HAL_ADC_ConfigChannel+0x204>)
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b10      	cmp	r3, #16
 8003a18:	d14a      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a1a:	4b2d      	ldr	r3, [pc, #180]	; (8003ad0 <HAL_ADC_ConfigChannel+0x208>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	492d      	ldr	r1, [pc, #180]	; (8003ad4 <HAL_ADC_ConfigChannel+0x20c>)
 8003a20:	0018      	movs	r0, r3
 8003a22:	f7fc fb83 	bl	800012c <__udivsi3>
 8003a26:	0003      	movs	r3, r0
 8003a28:	001a      	movs	r2, r3
 8003a2a:	0013      	movs	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	189b      	adds	r3, r3, r2
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a34:	e002      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f9      	bne.n	8003a36 <HAL_ADC_ConfigChannel+0x16e>
 8003a42:	e035      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2101      	movs	r1, #1
 8003a50:	4099      	lsls	r1, r3
 8003a52:	000b      	movs	r3, r1
 8003a54:	43d9      	mvns	r1, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	400a      	ands	r2, r1
 8003a5c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b10      	cmp	r3, #16
 8003a64:	d007      	beq.n	8003a76 <HAL_ADC_ConfigChannel+0x1ae>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b11      	cmp	r3, #17
 8003a6c:	d003      	beq.n	8003a76 <HAL_ADC_ConfigChannel+0x1ae>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b12      	cmp	r3, #18
 8003a74:	d11c      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003a76:	4b15      	ldr	r3, [pc, #84]	; (8003acc <HAL_ADC_ConfigChannel+0x204>)
 8003a78:	6819      	ldr	r1, [r3, #0]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b10      	cmp	r3, #16
 8003a80:	d007      	beq.n	8003a92 <HAL_ADC_ConfigChannel+0x1ca>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b11      	cmp	r3, #17
 8003a88:	d101      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x1c6>
 8003a8a:	4b13      	ldr	r3, [pc, #76]	; (8003ad8 <HAL_ADC_ConfigChannel+0x210>)
 8003a8c:	e002      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x1cc>
 8003a8e:	4b13      	ldr	r3, [pc, #76]	; (8003adc <HAL_ADC_ConfigChannel+0x214>)
 8003a90:	e000      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x1cc>
 8003a92:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <HAL_ADC_ConfigChannel+0x218>)
 8003a94:	4a0d      	ldr	r2, [pc, #52]	; (8003acc <HAL_ADC_ConfigChannel+0x204>)
 8003a96:	400b      	ands	r3, r1
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e009      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003aa8:	230f      	movs	r3, #15
 8003aaa:	18fb      	adds	r3, r7, r3
 8003aac:	2201      	movs	r2, #1
 8003aae:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2234      	movs	r2, #52	; 0x34
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003ab8:	230f      	movs	r3, #15
 8003aba:	18fb      	adds	r3, r7, r3
 8003abc:	781b      	ldrb	r3, [r3, #0]
}
 8003abe:	0018      	movs	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b004      	add	sp, #16
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	00001001 	.word	0x00001001
 8003acc:	40012708 	.word	0x40012708
 8003ad0:	20000000 	.word	0x20000000
 8003ad4:	000f4240 	.word	0x000f4240
 8003ad8:	ffbfffff 	.word	0xffbfffff
 8003adc:	feffffff 	.word	0xfeffffff
 8003ae0:	ff7fffff 	.word	0xff7fffff

08003ae4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2203      	movs	r2, #3
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d112      	bne.n	8003b28 <ADC_Enable+0x44>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d009      	beq.n	8003b24 <ADC_Enable+0x40>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	401a      	ands	r2, r3
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	021b      	lsls	r3, r3, #8
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d101      	bne.n	8003b28 <ADC_Enable+0x44>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <ADC_Enable+0x46>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d152      	bne.n	8003bd4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	4a2a      	ldr	r2, [pc, #168]	; (8003be0 <ADC_Enable+0xfc>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	d00d      	beq.n	8003b56 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	2210      	movs	r2, #16
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e03f      	b.n	8003bd6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2101      	movs	r1, #1
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b66:	4b1f      	ldr	r3, [pc, #124]	; (8003be4 <ADC_Enable+0x100>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	491f      	ldr	r1, [pc, #124]	; (8003be8 <ADC_Enable+0x104>)
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f7fc fadd 	bl	800012c <__udivsi3>
 8003b72:	0003      	movs	r3, r0
 8003b74:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b76:	e002      	b.n	8003b7e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1f9      	bne.n	8003b78 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b84:	f7ff fbec 	bl	8003360 <HAL_GetTick>
 8003b88:	0003      	movs	r3, r0
 8003b8a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b8c:	e01b      	b.n	8003bc6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b8e:	f7ff fbe7 	bl	8003360 <HAL_GetTick>
 8003b92:	0002      	movs	r2, r0
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d914      	bls.n	8003bc6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d00d      	beq.n	8003bc6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	2210      	movs	r2, #16
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bba:	2201      	movs	r2, #1
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e007      	b.n	8003bd6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d1dc      	bne.n	8003b8e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b004      	add	sp, #16
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	80000017 	.word	0x80000017
 8003be4:	20000000 	.word	0x20000000
 8003be8:	000f4240 	.word	0x000f4240

08003bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	0002      	movs	r2, r0
 8003bf4:	1dfb      	adds	r3, r7, #7
 8003bf6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003bf8:	1dfb      	adds	r3, r7, #7
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b7f      	cmp	r3, #127	; 0x7f
 8003bfe:	d809      	bhi.n	8003c14 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c00:	1dfb      	adds	r3, r7, #7
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	001a      	movs	r2, r3
 8003c06:	231f      	movs	r3, #31
 8003c08:	401a      	ands	r2, r3
 8003c0a:	4b04      	ldr	r3, [pc, #16]	; (8003c1c <__NVIC_EnableIRQ+0x30>)
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	4091      	lsls	r1, r2
 8003c10:	000a      	movs	r2, r1
 8003c12:	601a      	str	r2, [r3, #0]
  }
}
 8003c14:	46c0      	nop			; (mov r8, r8)
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b002      	add	sp, #8
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	e000e100 	.word	0xe000e100

08003c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	0002      	movs	r2, r0
 8003c28:	6039      	str	r1, [r7, #0]
 8003c2a:	1dfb      	adds	r3, r7, #7
 8003c2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c2e:	1dfb      	adds	r3, r7, #7
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b7f      	cmp	r3, #127	; 0x7f
 8003c34:	d828      	bhi.n	8003c88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c36:	4a2f      	ldr	r2, [pc, #188]	; (8003cf4 <__NVIC_SetPriority+0xd4>)
 8003c38:	1dfb      	adds	r3, r7, #7
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	b25b      	sxtb	r3, r3
 8003c3e:	089b      	lsrs	r3, r3, #2
 8003c40:	33c0      	adds	r3, #192	; 0xc0
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	589b      	ldr	r3, [r3, r2]
 8003c46:	1dfa      	adds	r2, r7, #7
 8003c48:	7812      	ldrb	r2, [r2, #0]
 8003c4a:	0011      	movs	r1, r2
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	400a      	ands	r2, r1
 8003c50:	00d2      	lsls	r2, r2, #3
 8003c52:	21ff      	movs	r1, #255	; 0xff
 8003c54:	4091      	lsls	r1, r2
 8003c56:	000a      	movs	r2, r1
 8003c58:	43d2      	mvns	r2, r2
 8003c5a:	401a      	ands	r2, r3
 8003c5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	019b      	lsls	r3, r3, #6
 8003c62:	22ff      	movs	r2, #255	; 0xff
 8003c64:	401a      	ands	r2, r3
 8003c66:	1dfb      	adds	r3, r7, #7
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	4003      	ands	r3, r0
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c74:	481f      	ldr	r0, [pc, #124]	; (8003cf4 <__NVIC_SetPriority+0xd4>)
 8003c76:	1dfb      	adds	r3, r7, #7
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	b25b      	sxtb	r3, r3
 8003c7c:	089b      	lsrs	r3, r3, #2
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	33c0      	adds	r3, #192	; 0xc0
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003c86:	e031      	b.n	8003cec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c88:	4a1b      	ldr	r2, [pc, #108]	; (8003cf8 <__NVIC_SetPriority+0xd8>)
 8003c8a:	1dfb      	adds	r3, r7, #7
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	0019      	movs	r1, r3
 8003c90:	230f      	movs	r3, #15
 8003c92:	400b      	ands	r3, r1
 8003c94:	3b08      	subs	r3, #8
 8003c96:	089b      	lsrs	r3, r3, #2
 8003c98:	3306      	adds	r3, #6
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	18d3      	adds	r3, r2, r3
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	1dfa      	adds	r2, r7, #7
 8003ca4:	7812      	ldrb	r2, [r2, #0]
 8003ca6:	0011      	movs	r1, r2
 8003ca8:	2203      	movs	r2, #3
 8003caa:	400a      	ands	r2, r1
 8003cac:	00d2      	lsls	r2, r2, #3
 8003cae:	21ff      	movs	r1, #255	; 0xff
 8003cb0:	4091      	lsls	r1, r2
 8003cb2:	000a      	movs	r2, r1
 8003cb4:	43d2      	mvns	r2, r2
 8003cb6:	401a      	ands	r2, r3
 8003cb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	019b      	lsls	r3, r3, #6
 8003cbe:	22ff      	movs	r2, #255	; 0xff
 8003cc0:	401a      	ands	r2, r3
 8003cc2:	1dfb      	adds	r3, r7, #7
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	2303      	movs	r3, #3
 8003cca:	4003      	ands	r3, r0
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cd0:	4809      	ldr	r0, [pc, #36]	; (8003cf8 <__NVIC_SetPriority+0xd8>)
 8003cd2:	1dfb      	adds	r3, r7, #7
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	001c      	movs	r4, r3
 8003cd8:	230f      	movs	r3, #15
 8003cda:	4023      	ands	r3, r4
 8003cdc:	3b08      	subs	r3, #8
 8003cde:	089b      	lsrs	r3, r3, #2
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	3306      	adds	r3, #6
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	18c3      	adds	r3, r0, r3
 8003ce8:	3304      	adds	r3, #4
 8003cea:	601a      	str	r2, [r3, #0]
}
 8003cec:	46c0      	nop			; (mov r8, r8)
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b003      	add	sp, #12
 8003cf2:	bd90      	pop	{r4, r7, pc}
 8003cf4:	e000e100 	.word	0xe000e100
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	1e5a      	subs	r2, r3, #1
 8003d08:	2380      	movs	r3, #128	; 0x80
 8003d0a:	045b      	lsls	r3, r3, #17
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d301      	bcc.n	8003d14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d10:	2301      	movs	r3, #1
 8003d12:	e010      	b.n	8003d36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d14:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <SysTick_Config+0x44>)
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	3a01      	subs	r2, #1
 8003d1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	425b      	negs	r3, r3
 8003d20:	2103      	movs	r1, #3
 8003d22:	0018      	movs	r0, r3
 8003d24:	f7ff ff7c 	bl	8003c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <SysTick_Config+0x44>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d2e:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <SysTick_Config+0x44>)
 8003d30:	2207      	movs	r2, #7
 8003d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b002      	add	sp, #8
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	e000e010 	.word	0xe000e010

08003d44 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	607a      	str	r2, [r7, #4]
 8003d4e:	210f      	movs	r1, #15
 8003d50:	187b      	adds	r3, r7, r1
 8003d52:	1c02      	adds	r2, r0, #0
 8003d54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	187b      	adds	r3, r7, r1
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	b25b      	sxtb	r3, r3
 8003d5e:	0011      	movs	r1, r2
 8003d60:	0018      	movs	r0, r3
 8003d62:	f7ff ff5d 	bl	8003c20 <__NVIC_SetPriority>
}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b004      	add	sp, #16
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	0002      	movs	r2, r0
 8003d76:	1dfb      	adds	r3, r7, #7
 8003d78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d7a:	1dfb      	adds	r3, r7, #7
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	b25b      	sxtb	r3, r3
 8003d80:	0018      	movs	r0, r3
 8003d82:	f7ff ff33 	bl	8003bec <__NVIC_EnableIRQ>
}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b002      	add	sp, #8
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f7ff ffaf 	bl	8003cfc <SysTick_Config>
 8003d9e:	0003      	movs	r3, r0
}
 8003da0:	0018      	movs	r0, r3
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b002      	add	sp, #8
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003db6:	e14f      	b.n	8004058 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4091      	lsls	r1, r2
 8003dc2:	000a      	movs	r2, r1
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d100      	bne.n	8003dd0 <HAL_GPIO_Init+0x28>
 8003dce:	e140      	b.n	8004052 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d005      	beq.n	8003de8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2203      	movs	r2, #3
 8003de2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d130      	bne.n	8003e4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	2203      	movs	r2, #3
 8003df4:	409a      	lsls	r2, r3
 8003df6:	0013      	movs	r3, r2
 8003df8:	43da      	mvns	r2, r3
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	0013      	movs	r3, r2
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e1e:	2201      	movs	r2, #1
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	409a      	lsls	r2, r3
 8003e24:	0013      	movs	r3, r2
 8003e26:	43da      	mvns	r2, r3
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	091b      	lsrs	r3, r3, #4
 8003e34:	2201      	movs	r2, #1
 8003e36:	401a      	ands	r2, r3
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	409a      	lsls	r2, r3
 8003e3c:	0013      	movs	r3, r2
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2203      	movs	r2, #3
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d017      	beq.n	8003e86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	2203      	movs	r2, #3
 8003e62:	409a      	lsls	r2, r3
 8003e64:	0013      	movs	r3, r2
 8003e66:	43da      	mvns	r2, r3
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	409a      	lsls	r2, r3
 8003e78:	0013      	movs	r3, r2
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d123      	bne.n	8003eda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	08da      	lsrs	r2, r3, #3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3208      	adds	r2, #8
 8003e9a:	0092      	lsls	r2, r2, #2
 8003e9c:	58d3      	ldr	r3, [r2, r3]
 8003e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2207      	movs	r2, #7
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	220f      	movs	r2, #15
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	0013      	movs	r3, r2
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2107      	movs	r1, #7
 8003ebe:	400b      	ands	r3, r1
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	0013      	movs	r3, r2
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	08da      	lsrs	r2, r3, #3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3208      	adds	r2, #8
 8003ed4:	0092      	lsls	r2, r2, #2
 8003ed6:	6939      	ldr	r1, [r7, #16]
 8003ed8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	0013      	movs	r3, r2
 8003eea:	43da      	mvns	r2, r3
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2203      	movs	r2, #3
 8003ef8:	401a      	ands	r2, r3
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	409a      	lsls	r2, r3
 8003f00:	0013      	movs	r3, r2
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	23c0      	movs	r3, #192	; 0xc0
 8003f14:	029b      	lsls	r3, r3, #10
 8003f16:	4013      	ands	r3, r2
 8003f18:	d100      	bne.n	8003f1c <HAL_GPIO_Init+0x174>
 8003f1a:	e09a      	b.n	8004052 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f1c:	4b54      	ldr	r3, [pc, #336]	; (8004070 <HAL_GPIO_Init+0x2c8>)
 8003f1e:	699a      	ldr	r2, [r3, #24]
 8003f20:	4b53      	ldr	r3, [pc, #332]	; (8004070 <HAL_GPIO_Init+0x2c8>)
 8003f22:	2101      	movs	r1, #1
 8003f24:	430a      	orrs	r2, r1
 8003f26:	619a      	str	r2, [r3, #24]
 8003f28:	4b51      	ldr	r3, [pc, #324]	; (8004070 <HAL_GPIO_Init+0x2c8>)
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	4013      	ands	r3, r2
 8003f30:	60bb      	str	r3, [r7, #8]
 8003f32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f34:	4a4f      	ldr	r2, [pc, #316]	; (8004074 <HAL_GPIO_Init+0x2cc>)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	089b      	lsrs	r3, r3, #2
 8003f3a:	3302      	adds	r3, #2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	589b      	ldr	r3, [r3, r2]
 8003f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2203      	movs	r2, #3
 8003f46:	4013      	ands	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	220f      	movs	r2, #15
 8003f4c:	409a      	lsls	r2, r3
 8003f4e:	0013      	movs	r3, r2
 8003f50:	43da      	mvns	r2, r3
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4013      	ands	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	2390      	movs	r3, #144	; 0x90
 8003f5c:	05db      	lsls	r3, r3, #23
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d013      	beq.n	8003f8a <HAL_GPIO_Init+0x1e2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a44      	ldr	r2, [pc, #272]	; (8004078 <HAL_GPIO_Init+0x2d0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00d      	beq.n	8003f86 <HAL_GPIO_Init+0x1de>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a43      	ldr	r2, [pc, #268]	; (800407c <HAL_GPIO_Init+0x2d4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d007      	beq.n	8003f82 <HAL_GPIO_Init+0x1da>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a42      	ldr	r2, [pc, #264]	; (8004080 <HAL_GPIO_Init+0x2d8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d101      	bne.n	8003f7e <HAL_GPIO_Init+0x1d6>
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e006      	b.n	8003f8c <HAL_GPIO_Init+0x1e4>
 8003f7e:	2305      	movs	r3, #5
 8003f80:	e004      	b.n	8003f8c <HAL_GPIO_Init+0x1e4>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e002      	b.n	8003f8c <HAL_GPIO_Init+0x1e4>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <HAL_GPIO_Init+0x1e4>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	2103      	movs	r1, #3
 8003f90:	400a      	ands	r2, r1
 8003f92:	0092      	lsls	r2, r2, #2
 8003f94:	4093      	lsls	r3, r2
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f9c:	4935      	ldr	r1, [pc, #212]	; (8004074 <HAL_GPIO_Init+0x2cc>)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	089b      	lsrs	r3, r3, #2
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003faa:	4b36      	ldr	r3, [pc, #216]	; (8004084 <HAL_GPIO_Init+0x2dc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	2380      	movs	r3, #128	; 0x80
 8003fc0:	025b      	lsls	r3, r3, #9
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003fce:	4b2d      	ldr	r3, [pc, #180]	; (8004084 <HAL_GPIO_Init+0x2dc>)
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003fd4:	4b2b      	ldr	r3, [pc, #172]	; (8004084 <HAL_GPIO_Init+0x2dc>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	43da      	mvns	r2, r3
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	2380      	movs	r3, #128	; 0x80
 8003fea:	029b      	lsls	r3, r3, #10
 8003fec:	4013      	ands	r3, r2
 8003fee:	d003      	beq.n	8003ff8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ff8:	4b22      	ldr	r3, [pc, #136]	; (8004084 <HAL_GPIO_Init+0x2dc>)
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ffe:	4b21      	ldr	r3, [pc, #132]	; (8004084 <HAL_GPIO_Init+0x2dc>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	43da      	mvns	r2, r3
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	4013      	ands	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	035b      	lsls	r3, r3, #13
 8004016:	4013      	ands	r3, r2
 8004018:	d003      	beq.n	8004022 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004022:	4b18      	ldr	r3, [pc, #96]	; (8004084 <HAL_GPIO_Init+0x2dc>)
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004028:	4b16      	ldr	r3, [pc, #88]	; (8004084 <HAL_GPIO_Init+0x2dc>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	43da      	mvns	r2, r3
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	4013      	ands	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	2380      	movs	r3, #128	; 0x80
 800403e:	039b      	lsls	r3, r3, #14
 8004040:	4013      	ands	r3, r2
 8004042:	d003      	beq.n	800404c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800404c:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <HAL_GPIO_Init+0x2dc>)
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	3301      	adds	r3, #1
 8004056:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	40da      	lsrs	r2, r3
 8004060:	1e13      	subs	r3, r2, #0
 8004062:	d000      	beq.n	8004066 <HAL_GPIO_Init+0x2be>
 8004064:	e6a8      	b.n	8003db8 <HAL_GPIO_Init+0x10>
  } 
}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	46c0      	nop			; (mov r8, r8)
 800406a:	46bd      	mov	sp, r7
 800406c:	b006      	add	sp, #24
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40021000 	.word	0x40021000
 8004074:	40010000 	.word	0x40010000
 8004078:	48000400 	.word	0x48000400
 800407c:	48000800 	.word	0x48000800
 8004080:	48000c00 	.word	0x48000c00
 8004084:	40010400 	.word	0x40010400

08004088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	0008      	movs	r0, r1
 8004092:	0011      	movs	r1, r2
 8004094:	1cbb      	adds	r3, r7, #2
 8004096:	1c02      	adds	r2, r0, #0
 8004098:	801a      	strh	r2, [r3, #0]
 800409a:	1c7b      	adds	r3, r7, #1
 800409c:	1c0a      	adds	r2, r1, #0
 800409e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040a0:	1c7b      	adds	r3, r7, #1
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d004      	beq.n	80040b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040a8:	1cbb      	adds	r3, r7, #2
 80040aa:	881a      	ldrh	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040b0:	e003      	b.n	80040ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040b2:	1cbb      	adds	r3, r7, #2
 80040b4:	881a      	ldrh	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	46bd      	mov	sp, r7
 80040be:	b002      	add	sp, #8
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	000a      	movs	r2, r1
 80040cc:	1cbb      	adds	r3, r7, #2
 80040ce:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040d6:	1cbb      	adds	r3, r7, #2
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4013      	ands	r3, r2
 80040de:	041a      	lsls	r2, r3, #16
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	43db      	mvns	r3, r3
 80040e4:	1cb9      	adds	r1, r7, #2
 80040e6:	8809      	ldrh	r1, [r1, #0]
 80040e8:	400b      	ands	r3, r1
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	619a      	str	r2, [r3, #24]
}
 80040f0:	46c0      	nop			; (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b004      	add	sp, #16
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b088      	sub	sp, #32
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e301      	b.n	800470e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2201      	movs	r2, #1
 8004110:	4013      	ands	r3, r2
 8004112:	d100      	bne.n	8004116 <HAL_RCC_OscConfig+0x1e>
 8004114:	e08d      	b.n	8004232 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004116:	4bc3      	ldr	r3, [pc, #780]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	220c      	movs	r2, #12
 800411c:	4013      	ands	r3, r2
 800411e:	2b04      	cmp	r3, #4
 8004120:	d00e      	beq.n	8004140 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004122:	4bc0      	ldr	r3, [pc, #768]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	220c      	movs	r2, #12
 8004128:	4013      	ands	r3, r2
 800412a:	2b08      	cmp	r3, #8
 800412c:	d116      	bne.n	800415c <HAL_RCC_OscConfig+0x64>
 800412e:	4bbd      	ldr	r3, [pc, #756]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	2380      	movs	r3, #128	; 0x80
 8004134:	025b      	lsls	r3, r3, #9
 8004136:	401a      	ands	r2, r3
 8004138:	2380      	movs	r3, #128	; 0x80
 800413a:	025b      	lsls	r3, r3, #9
 800413c:	429a      	cmp	r2, r3
 800413e:	d10d      	bne.n	800415c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004140:	4bb8      	ldr	r3, [pc, #736]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	029b      	lsls	r3, r3, #10
 8004148:	4013      	ands	r3, r2
 800414a:	d100      	bne.n	800414e <HAL_RCC_OscConfig+0x56>
 800414c:	e070      	b.n	8004230 <HAL_RCC_OscConfig+0x138>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d000      	beq.n	8004158 <HAL_RCC_OscConfig+0x60>
 8004156:	e06b      	b.n	8004230 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e2d8      	b.n	800470e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d107      	bne.n	8004174 <HAL_RCC_OscConfig+0x7c>
 8004164:	4baf      	ldr	r3, [pc, #700]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4bae      	ldr	r3, [pc, #696]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 800416a:	2180      	movs	r1, #128	; 0x80
 800416c:	0249      	lsls	r1, r1, #9
 800416e:	430a      	orrs	r2, r1
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	e02f      	b.n	80041d4 <HAL_RCC_OscConfig+0xdc>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10c      	bne.n	8004196 <HAL_RCC_OscConfig+0x9e>
 800417c:	4ba9      	ldr	r3, [pc, #676]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	4ba8      	ldr	r3, [pc, #672]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 8004182:	49a9      	ldr	r1, [pc, #676]	; (8004428 <HAL_RCC_OscConfig+0x330>)
 8004184:	400a      	ands	r2, r1
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	4ba6      	ldr	r3, [pc, #664]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4ba5      	ldr	r3, [pc, #660]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 800418e:	49a7      	ldr	r1, [pc, #668]	; (800442c <HAL_RCC_OscConfig+0x334>)
 8004190:	400a      	ands	r2, r1
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	e01e      	b.n	80041d4 <HAL_RCC_OscConfig+0xdc>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b05      	cmp	r3, #5
 800419c:	d10e      	bne.n	80041bc <HAL_RCC_OscConfig+0xc4>
 800419e:	4ba1      	ldr	r3, [pc, #644]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	4ba0      	ldr	r3, [pc, #640]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 80041a4:	2180      	movs	r1, #128	; 0x80
 80041a6:	02c9      	lsls	r1, r1, #11
 80041a8:	430a      	orrs	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	4b9d      	ldr	r3, [pc, #628]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	4b9c      	ldr	r3, [pc, #624]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 80041b2:	2180      	movs	r1, #128	; 0x80
 80041b4:	0249      	lsls	r1, r1, #9
 80041b6:	430a      	orrs	r2, r1
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	e00b      	b.n	80041d4 <HAL_RCC_OscConfig+0xdc>
 80041bc:	4b99      	ldr	r3, [pc, #612]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	4b98      	ldr	r3, [pc, #608]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 80041c2:	4999      	ldr	r1, [pc, #612]	; (8004428 <HAL_RCC_OscConfig+0x330>)
 80041c4:	400a      	ands	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	4b96      	ldr	r3, [pc, #600]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	4b95      	ldr	r3, [pc, #596]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 80041ce:	4997      	ldr	r1, [pc, #604]	; (800442c <HAL_RCC_OscConfig+0x334>)
 80041d0:	400a      	ands	r2, r1
 80041d2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d014      	beq.n	8004206 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041dc:	f7ff f8c0 	bl	8003360 <HAL_GetTick>
 80041e0:	0003      	movs	r3, r0
 80041e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e6:	f7ff f8bb 	bl	8003360 <HAL_GetTick>
 80041ea:	0002      	movs	r2, r0
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b64      	cmp	r3, #100	; 0x64
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e28a      	b.n	800470e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f8:	4b8a      	ldr	r3, [pc, #552]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	029b      	lsls	r3, r3, #10
 8004200:	4013      	ands	r3, r2
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0xee>
 8004204:	e015      	b.n	8004232 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004206:	f7ff f8ab 	bl	8003360 <HAL_GetTick>
 800420a:	0003      	movs	r3, r0
 800420c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004210:	f7ff f8a6 	bl	8003360 <HAL_GetTick>
 8004214:	0002      	movs	r2, r0
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b64      	cmp	r3, #100	; 0x64
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e275      	b.n	800470e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004222:	4b80      	ldr	r3, [pc, #512]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	2380      	movs	r3, #128	; 0x80
 8004228:	029b      	lsls	r3, r3, #10
 800422a:	4013      	ands	r3, r2
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x118>
 800422e:	e000      	b.n	8004232 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004230:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2202      	movs	r2, #2
 8004238:	4013      	ands	r3, r2
 800423a:	d100      	bne.n	800423e <HAL_RCC_OscConfig+0x146>
 800423c:	e069      	b.n	8004312 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800423e:	4b79      	ldr	r3, [pc, #484]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	220c      	movs	r2, #12
 8004244:	4013      	ands	r3, r2
 8004246:	d00b      	beq.n	8004260 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004248:	4b76      	ldr	r3, [pc, #472]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	220c      	movs	r2, #12
 800424e:	4013      	ands	r3, r2
 8004250:	2b08      	cmp	r3, #8
 8004252:	d11c      	bne.n	800428e <HAL_RCC_OscConfig+0x196>
 8004254:	4b73      	ldr	r3, [pc, #460]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	025b      	lsls	r3, r3, #9
 800425c:	4013      	ands	r3, r2
 800425e:	d116      	bne.n	800428e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004260:	4b70      	ldr	r3, [pc, #448]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2202      	movs	r2, #2
 8004266:	4013      	ands	r3, r2
 8004268:	d005      	beq.n	8004276 <HAL_RCC_OscConfig+0x17e>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d001      	beq.n	8004276 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e24b      	b.n	800470e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004276:	4b6b      	ldr	r3, [pc, #428]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	22f8      	movs	r2, #248	; 0xf8
 800427c:	4393      	bics	r3, r2
 800427e:	0019      	movs	r1, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	00da      	lsls	r2, r3, #3
 8004286:	4b67      	ldr	r3, [pc, #412]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 8004288:	430a      	orrs	r2, r1
 800428a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800428c:	e041      	b.n	8004312 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d024      	beq.n	80042e0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004296:	4b63      	ldr	r3, [pc, #396]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b62      	ldr	r3, [pc, #392]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 800429c:	2101      	movs	r1, #1
 800429e:	430a      	orrs	r2, r1
 80042a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a2:	f7ff f85d 	bl	8003360 <HAL_GetTick>
 80042a6:	0003      	movs	r3, r0
 80042a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ac:	f7ff f858 	bl	8003360 <HAL_GetTick>
 80042b0:	0002      	movs	r2, r0
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e227      	b.n	800470e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042be:	4b59      	ldr	r3, [pc, #356]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2202      	movs	r2, #2
 80042c4:	4013      	ands	r3, r2
 80042c6:	d0f1      	beq.n	80042ac <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c8:	4b56      	ldr	r3, [pc, #344]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	22f8      	movs	r2, #248	; 0xf8
 80042ce:	4393      	bics	r3, r2
 80042d0:	0019      	movs	r1, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	00da      	lsls	r2, r3, #3
 80042d8:	4b52      	ldr	r3, [pc, #328]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 80042da:	430a      	orrs	r2, r1
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	e018      	b.n	8004312 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042e0:	4b50      	ldr	r3, [pc, #320]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4b4f      	ldr	r3, [pc, #316]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 80042e6:	2101      	movs	r1, #1
 80042e8:	438a      	bics	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ec:	f7ff f838 	bl	8003360 <HAL_GetTick>
 80042f0:	0003      	movs	r3, r0
 80042f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042f6:	f7ff f833 	bl	8003360 <HAL_GetTick>
 80042fa:	0002      	movs	r2, r0
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e202      	b.n	800470e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004308:	4b46      	ldr	r3, [pc, #280]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2202      	movs	r2, #2
 800430e:	4013      	ands	r3, r2
 8004310:	d1f1      	bne.n	80042f6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2208      	movs	r2, #8
 8004318:	4013      	ands	r3, r2
 800431a:	d036      	beq.n	800438a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d019      	beq.n	8004358 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004324:	4b3f      	ldr	r3, [pc, #252]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 8004326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004328:	4b3e      	ldr	r3, [pc, #248]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 800432a:	2101      	movs	r1, #1
 800432c:	430a      	orrs	r2, r1
 800432e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004330:	f7ff f816 	bl	8003360 <HAL_GetTick>
 8004334:	0003      	movs	r3, r0
 8004336:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800433a:	f7ff f811 	bl	8003360 <HAL_GetTick>
 800433e:	0002      	movs	r2, r0
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e1e0      	b.n	800470e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800434c:	4b35      	ldr	r3, [pc, #212]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	2202      	movs	r2, #2
 8004352:	4013      	ands	r3, r2
 8004354:	d0f1      	beq.n	800433a <HAL_RCC_OscConfig+0x242>
 8004356:	e018      	b.n	800438a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004358:	4b32      	ldr	r3, [pc, #200]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 800435a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800435c:	4b31      	ldr	r3, [pc, #196]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 800435e:	2101      	movs	r1, #1
 8004360:	438a      	bics	r2, r1
 8004362:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004364:	f7fe fffc 	bl	8003360 <HAL_GetTick>
 8004368:	0003      	movs	r3, r0
 800436a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800436e:	f7fe fff7 	bl	8003360 <HAL_GetTick>
 8004372:	0002      	movs	r2, r0
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e1c6      	b.n	800470e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004380:	4b28      	ldr	r3, [pc, #160]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	2202      	movs	r2, #2
 8004386:	4013      	ands	r3, r2
 8004388:	d1f1      	bne.n	800436e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2204      	movs	r2, #4
 8004390:	4013      	ands	r3, r2
 8004392:	d100      	bne.n	8004396 <HAL_RCC_OscConfig+0x29e>
 8004394:	e0b4      	b.n	8004500 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004396:	201f      	movs	r0, #31
 8004398:	183b      	adds	r3, r7, r0
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800439e:	4b21      	ldr	r3, [pc, #132]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 80043a0:	69da      	ldr	r2, [r3, #28]
 80043a2:	2380      	movs	r3, #128	; 0x80
 80043a4:	055b      	lsls	r3, r3, #21
 80043a6:	4013      	ands	r3, r2
 80043a8:	d110      	bne.n	80043cc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043aa:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 80043ac:	69da      	ldr	r2, [r3, #28]
 80043ae:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 80043b0:	2180      	movs	r1, #128	; 0x80
 80043b2:	0549      	lsls	r1, r1, #21
 80043b4:	430a      	orrs	r2, r1
 80043b6:	61da      	str	r2, [r3, #28]
 80043b8:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 80043ba:	69da      	ldr	r2, [r3, #28]
 80043bc:	2380      	movs	r3, #128	; 0x80
 80043be:	055b      	lsls	r3, r3, #21
 80043c0:	4013      	ands	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043c6:	183b      	adds	r3, r7, r0
 80043c8:	2201      	movs	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043cc:	4b18      	ldr	r3, [pc, #96]	; (8004430 <HAL_RCC_OscConfig+0x338>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	2380      	movs	r3, #128	; 0x80
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	4013      	ands	r3, r2
 80043d6:	d11a      	bne.n	800440e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043d8:	4b15      	ldr	r3, [pc, #84]	; (8004430 <HAL_RCC_OscConfig+0x338>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4b14      	ldr	r3, [pc, #80]	; (8004430 <HAL_RCC_OscConfig+0x338>)
 80043de:	2180      	movs	r1, #128	; 0x80
 80043e0:	0049      	lsls	r1, r1, #1
 80043e2:	430a      	orrs	r2, r1
 80043e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043e6:	f7fe ffbb 	bl	8003360 <HAL_GetTick>
 80043ea:	0003      	movs	r3, r0
 80043ec:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f0:	f7fe ffb6 	bl	8003360 <HAL_GetTick>
 80043f4:	0002      	movs	r2, r0
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	; 0x64
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e185      	b.n	800470e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004402:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <HAL_RCC_OscConfig+0x338>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	2380      	movs	r3, #128	; 0x80
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	4013      	ands	r3, r2
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d10e      	bne.n	8004434 <HAL_RCC_OscConfig+0x33c>
 8004416:	4b03      	ldr	r3, [pc, #12]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 8004418:	6a1a      	ldr	r2, [r3, #32]
 800441a:	4b02      	ldr	r3, [pc, #8]	; (8004424 <HAL_RCC_OscConfig+0x32c>)
 800441c:	2101      	movs	r1, #1
 800441e:	430a      	orrs	r2, r1
 8004420:	621a      	str	r2, [r3, #32]
 8004422:	e035      	b.n	8004490 <HAL_RCC_OscConfig+0x398>
 8004424:	40021000 	.word	0x40021000
 8004428:	fffeffff 	.word	0xfffeffff
 800442c:	fffbffff 	.word	0xfffbffff
 8004430:	40007000 	.word	0x40007000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10c      	bne.n	8004456 <HAL_RCC_OscConfig+0x35e>
 800443c:	4bb6      	ldr	r3, [pc, #728]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 800443e:	6a1a      	ldr	r2, [r3, #32]
 8004440:	4bb5      	ldr	r3, [pc, #724]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004442:	2101      	movs	r1, #1
 8004444:	438a      	bics	r2, r1
 8004446:	621a      	str	r2, [r3, #32]
 8004448:	4bb3      	ldr	r3, [pc, #716]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 800444a:	6a1a      	ldr	r2, [r3, #32]
 800444c:	4bb2      	ldr	r3, [pc, #712]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 800444e:	2104      	movs	r1, #4
 8004450:	438a      	bics	r2, r1
 8004452:	621a      	str	r2, [r3, #32]
 8004454:	e01c      	b.n	8004490 <HAL_RCC_OscConfig+0x398>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b05      	cmp	r3, #5
 800445c:	d10c      	bne.n	8004478 <HAL_RCC_OscConfig+0x380>
 800445e:	4bae      	ldr	r3, [pc, #696]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004460:	6a1a      	ldr	r2, [r3, #32]
 8004462:	4bad      	ldr	r3, [pc, #692]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004464:	2104      	movs	r1, #4
 8004466:	430a      	orrs	r2, r1
 8004468:	621a      	str	r2, [r3, #32]
 800446a:	4bab      	ldr	r3, [pc, #684]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 800446c:	6a1a      	ldr	r2, [r3, #32]
 800446e:	4baa      	ldr	r3, [pc, #680]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004470:	2101      	movs	r1, #1
 8004472:	430a      	orrs	r2, r1
 8004474:	621a      	str	r2, [r3, #32]
 8004476:	e00b      	b.n	8004490 <HAL_RCC_OscConfig+0x398>
 8004478:	4ba7      	ldr	r3, [pc, #668]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 800447a:	6a1a      	ldr	r2, [r3, #32]
 800447c:	4ba6      	ldr	r3, [pc, #664]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 800447e:	2101      	movs	r1, #1
 8004480:	438a      	bics	r2, r1
 8004482:	621a      	str	r2, [r3, #32]
 8004484:	4ba4      	ldr	r3, [pc, #656]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004486:	6a1a      	ldr	r2, [r3, #32]
 8004488:	4ba3      	ldr	r3, [pc, #652]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 800448a:	2104      	movs	r1, #4
 800448c:	438a      	bics	r2, r1
 800448e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d014      	beq.n	80044c2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004498:	f7fe ff62 	bl	8003360 <HAL_GetTick>
 800449c:	0003      	movs	r3, r0
 800449e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a0:	e009      	b.n	80044b6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a2:	f7fe ff5d 	bl	8003360 <HAL_GetTick>
 80044a6:	0002      	movs	r2, r0
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	4a9b      	ldr	r2, [pc, #620]	; (800471c <HAL_RCC_OscConfig+0x624>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e12b      	b.n	800470e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b6:	4b98      	ldr	r3, [pc, #608]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	2202      	movs	r2, #2
 80044bc:	4013      	ands	r3, r2
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x3aa>
 80044c0:	e013      	b.n	80044ea <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c2:	f7fe ff4d 	bl	8003360 <HAL_GetTick>
 80044c6:	0003      	movs	r3, r0
 80044c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ca:	e009      	b.n	80044e0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044cc:	f7fe ff48 	bl	8003360 <HAL_GetTick>
 80044d0:	0002      	movs	r2, r0
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	4a91      	ldr	r2, [pc, #580]	; (800471c <HAL_RCC_OscConfig+0x624>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e116      	b.n	800470e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e0:	4b8d      	ldr	r3, [pc, #564]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	2202      	movs	r2, #2
 80044e6:	4013      	ands	r3, r2
 80044e8:	d1f0      	bne.n	80044cc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044ea:	231f      	movs	r3, #31
 80044ec:	18fb      	adds	r3, r7, r3
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d105      	bne.n	8004500 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f4:	4b88      	ldr	r3, [pc, #544]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	4b87      	ldr	r3, [pc, #540]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 80044fa:	4989      	ldr	r1, [pc, #548]	; (8004720 <HAL_RCC_OscConfig+0x628>)
 80044fc:	400a      	ands	r2, r1
 80044fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2210      	movs	r2, #16
 8004506:	4013      	ands	r3, r2
 8004508:	d063      	beq.n	80045d2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d12a      	bne.n	8004568 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004512:	4b81      	ldr	r3, [pc, #516]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004516:	4b80      	ldr	r3, [pc, #512]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004518:	2104      	movs	r1, #4
 800451a:	430a      	orrs	r2, r1
 800451c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800451e:	4b7e      	ldr	r3, [pc, #504]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004522:	4b7d      	ldr	r3, [pc, #500]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004524:	2101      	movs	r1, #1
 8004526:	430a      	orrs	r2, r1
 8004528:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800452a:	f7fe ff19 	bl	8003360 <HAL_GetTick>
 800452e:	0003      	movs	r3, r0
 8004530:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004534:	f7fe ff14 	bl	8003360 <HAL_GetTick>
 8004538:	0002      	movs	r2, r0
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e0e3      	b.n	800470e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004546:	4b74      	ldr	r3, [pc, #464]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454a:	2202      	movs	r2, #2
 800454c:	4013      	ands	r3, r2
 800454e:	d0f1      	beq.n	8004534 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004550:	4b71      	ldr	r3, [pc, #452]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004554:	22f8      	movs	r2, #248	; 0xf8
 8004556:	4393      	bics	r3, r2
 8004558:	0019      	movs	r1, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	00da      	lsls	r2, r3, #3
 8004560:	4b6d      	ldr	r3, [pc, #436]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004562:	430a      	orrs	r2, r1
 8004564:	635a      	str	r2, [r3, #52]	; 0x34
 8004566:	e034      	b.n	80045d2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	3305      	adds	r3, #5
 800456e:	d111      	bne.n	8004594 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004570:	4b69      	ldr	r3, [pc, #420]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004574:	4b68      	ldr	r3, [pc, #416]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004576:	2104      	movs	r1, #4
 8004578:	438a      	bics	r2, r1
 800457a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800457c:	4b66      	ldr	r3, [pc, #408]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 800457e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004580:	22f8      	movs	r2, #248	; 0xf8
 8004582:	4393      	bics	r3, r2
 8004584:	0019      	movs	r1, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	00da      	lsls	r2, r3, #3
 800458c:	4b62      	ldr	r3, [pc, #392]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 800458e:	430a      	orrs	r2, r1
 8004590:	635a      	str	r2, [r3, #52]	; 0x34
 8004592:	e01e      	b.n	80045d2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004594:	4b60      	ldr	r3, [pc, #384]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004598:	4b5f      	ldr	r3, [pc, #380]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 800459a:	2104      	movs	r1, #4
 800459c:	430a      	orrs	r2, r1
 800459e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80045a0:	4b5d      	ldr	r3, [pc, #372]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 80045a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a4:	4b5c      	ldr	r3, [pc, #368]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 80045a6:	2101      	movs	r1, #1
 80045a8:	438a      	bics	r2, r1
 80045aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ac:	f7fe fed8 	bl	8003360 <HAL_GetTick>
 80045b0:	0003      	movs	r3, r0
 80045b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80045b6:	f7fe fed3 	bl	8003360 <HAL_GetTick>
 80045ba:	0002      	movs	r2, r0
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e0a2      	b.n	800470e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80045c8:	4b53      	ldr	r3, [pc, #332]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 80045ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045cc:	2202      	movs	r2, #2
 80045ce:	4013      	ands	r3, r2
 80045d0:	d1f1      	bne.n	80045b6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d100      	bne.n	80045dc <HAL_RCC_OscConfig+0x4e4>
 80045da:	e097      	b.n	800470c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045dc:	4b4e      	ldr	r3, [pc, #312]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	220c      	movs	r2, #12
 80045e2:	4013      	ands	r3, r2
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d100      	bne.n	80045ea <HAL_RCC_OscConfig+0x4f2>
 80045e8:	e06b      	b.n	80046c2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d14c      	bne.n	800468c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f2:	4b49      	ldr	r3, [pc, #292]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	4b48      	ldr	r3, [pc, #288]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 80045f8:	494a      	ldr	r1, [pc, #296]	; (8004724 <HAL_RCC_OscConfig+0x62c>)
 80045fa:	400a      	ands	r2, r1
 80045fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fe:	f7fe feaf 	bl	8003360 <HAL_GetTick>
 8004602:	0003      	movs	r3, r0
 8004604:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004608:	f7fe feaa 	bl	8003360 <HAL_GetTick>
 800460c:	0002      	movs	r2, r0
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e079      	b.n	800470e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800461a:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	2380      	movs	r3, #128	; 0x80
 8004620:	049b      	lsls	r3, r3, #18
 8004622:	4013      	ands	r3, r2
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004626:	4b3c      	ldr	r3, [pc, #240]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	220f      	movs	r2, #15
 800462c:	4393      	bics	r3, r2
 800462e:	0019      	movs	r1, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004634:	4b38      	ldr	r3, [pc, #224]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004636:	430a      	orrs	r2, r1
 8004638:	62da      	str	r2, [r3, #44]	; 0x2c
 800463a:	4b37      	ldr	r3, [pc, #220]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	4a3a      	ldr	r2, [pc, #232]	; (8004728 <HAL_RCC_OscConfig+0x630>)
 8004640:	4013      	ands	r3, r2
 8004642:	0019      	movs	r1, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	431a      	orrs	r2, r3
 800464e:	4b32      	ldr	r3, [pc, #200]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004654:	4b30      	ldr	r3, [pc, #192]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	4b2f      	ldr	r3, [pc, #188]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 800465a:	2180      	movs	r1, #128	; 0x80
 800465c:	0449      	lsls	r1, r1, #17
 800465e:	430a      	orrs	r2, r1
 8004660:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004662:	f7fe fe7d 	bl	8003360 <HAL_GetTick>
 8004666:	0003      	movs	r3, r0
 8004668:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800466c:	f7fe fe78 	bl	8003360 <HAL_GetTick>
 8004670:	0002      	movs	r2, r0
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e047      	b.n	800470e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800467e:	4b26      	ldr	r3, [pc, #152]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	2380      	movs	r3, #128	; 0x80
 8004684:	049b      	lsls	r3, r3, #18
 8004686:	4013      	ands	r3, r2
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0x574>
 800468a:	e03f      	b.n	800470c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800468c:	4b22      	ldr	r3, [pc, #136]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b21      	ldr	r3, [pc, #132]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 8004692:	4924      	ldr	r1, [pc, #144]	; (8004724 <HAL_RCC_OscConfig+0x62c>)
 8004694:	400a      	ands	r2, r1
 8004696:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004698:	f7fe fe62 	bl	8003360 <HAL_GetTick>
 800469c:	0003      	movs	r3, r0
 800469e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a2:	f7fe fe5d 	bl	8003360 <HAL_GetTick>
 80046a6:	0002      	movs	r2, r0
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e02c      	b.n	800470e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046b4:	4b18      	ldr	r3, [pc, #96]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	049b      	lsls	r3, r3, #18
 80046bc:	4013      	ands	r3, r2
 80046be:	d1f0      	bne.n	80046a2 <HAL_RCC_OscConfig+0x5aa>
 80046c0:	e024      	b.n	800470c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e01f      	b.n	800470e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80046ce:	4b12      	ldr	r3, [pc, #72]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80046d4:	4b10      	ldr	r3, [pc, #64]	; (8004718 <HAL_RCC_OscConfig+0x620>)
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	2380      	movs	r3, #128	; 0x80
 80046de:	025b      	lsls	r3, r3, #9
 80046e0:	401a      	ands	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d10e      	bne.n	8004708 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	220f      	movs	r2, #15
 80046ee:	401a      	ands	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d107      	bne.n	8004708 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	23f0      	movs	r3, #240	; 0xf0
 80046fc:	039b      	lsls	r3, r3, #14
 80046fe:	401a      	ands	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004704:	429a      	cmp	r2, r3
 8004706:	d001      	beq.n	800470c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	0018      	movs	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	b008      	add	sp, #32
 8004714:	bd80      	pop	{r7, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	40021000 	.word	0x40021000
 800471c:	00001388 	.word	0x00001388
 8004720:	efffffff 	.word	0xefffffff
 8004724:	feffffff 	.word	0xfeffffff
 8004728:	ffc2ffff 	.word	0xffc2ffff

0800472c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e0b3      	b.n	80048a8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004740:	4b5b      	ldr	r3, [pc, #364]	; (80048b0 <HAL_RCC_ClockConfig+0x184>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2201      	movs	r2, #1
 8004746:	4013      	ands	r3, r2
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d911      	bls.n	8004772 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474e:	4b58      	ldr	r3, [pc, #352]	; (80048b0 <HAL_RCC_ClockConfig+0x184>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2201      	movs	r2, #1
 8004754:	4393      	bics	r3, r2
 8004756:	0019      	movs	r1, r3
 8004758:	4b55      	ldr	r3, [pc, #340]	; (80048b0 <HAL_RCC_ClockConfig+0x184>)
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004760:	4b53      	ldr	r3, [pc, #332]	; (80048b0 <HAL_RCC_ClockConfig+0x184>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2201      	movs	r2, #1
 8004766:	4013      	ands	r3, r2
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d001      	beq.n	8004772 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e09a      	b.n	80048a8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2202      	movs	r2, #2
 8004778:	4013      	ands	r3, r2
 800477a:	d015      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2204      	movs	r2, #4
 8004782:	4013      	ands	r3, r2
 8004784:	d006      	beq.n	8004794 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004786:	4b4b      	ldr	r3, [pc, #300]	; (80048b4 <HAL_RCC_ClockConfig+0x188>)
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	4b4a      	ldr	r3, [pc, #296]	; (80048b4 <HAL_RCC_ClockConfig+0x188>)
 800478c:	21e0      	movs	r1, #224	; 0xe0
 800478e:	00c9      	lsls	r1, r1, #3
 8004790:	430a      	orrs	r2, r1
 8004792:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004794:	4b47      	ldr	r3, [pc, #284]	; (80048b4 <HAL_RCC_ClockConfig+0x188>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	22f0      	movs	r2, #240	; 0xf0
 800479a:	4393      	bics	r3, r2
 800479c:	0019      	movs	r1, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	4b44      	ldr	r3, [pc, #272]	; (80048b4 <HAL_RCC_ClockConfig+0x188>)
 80047a4:	430a      	orrs	r2, r1
 80047a6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2201      	movs	r2, #1
 80047ae:	4013      	ands	r3, r2
 80047b0:	d040      	beq.n	8004834 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d107      	bne.n	80047ca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ba:	4b3e      	ldr	r3, [pc, #248]	; (80048b4 <HAL_RCC_ClockConfig+0x188>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	2380      	movs	r3, #128	; 0x80
 80047c0:	029b      	lsls	r3, r3, #10
 80047c2:	4013      	ands	r3, r2
 80047c4:	d114      	bne.n	80047f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e06e      	b.n	80048a8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d107      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d2:	4b38      	ldr	r3, [pc, #224]	; (80048b4 <HAL_RCC_ClockConfig+0x188>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	2380      	movs	r3, #128	; 0x80
 80047d8:	049b      	lsls	r3, r3, #18
 80047da:	4013      	ands	r3, r2
 80047dc:	d108      	bne.n	80047f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e062      	b.n	80048a8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e2:	4b34      	ldr	r3, [pc, #208]	; (80048b4 <HAL_RCC_ClockConfig+0x188>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2202      	movs	r2, #2
 80047e8:	4013      	ands	r3, r2
 80047ea:	d101      	bne.n	80047f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e05b      	b.n	80048a8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047f0:	4b30      	ldr	r3, [pc, #192]	; (80048b4 <HAL_RCC_ClockConfig+0x188>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2203      	movs	r2, #3
 80047f6:	4393      	bics	r3, r2
 80047f8:	0019      	movs	r1, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	4b2d      	ldr	r3, [pc, #180]	; (80048b4 <HAL_RCC_ClockConfig+0x188>)
 8004800:	430a      	orrs	r2, r1
 8004802:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004804:	f7fe fdac 	bl	8003360 <HAL_GetTick>
 8004808:	0003      	movs	r3, r0
 800480a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480c:	e009      	b.n	8004822 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800480e:	f7fe fda7 	bl	8003360 <HAL_GetTick>
 8004812:	0002      	movs	r2, r0
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	4a27      	ldr	r2, [pc, #156]	; (80048b8 <HAL_RCC_ClockConfig+0x18c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e042      	b.n	80048a8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004822:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <HAL_RCC_ClockConfig+0x188>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	220c      	movs	r2, #12
 8004828:	401a      	ands	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	429a      	cmp	r2, r3
 8004832:	d1ec      	bne.n	800480e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004834:	4b1e      	ldr	r3, [pc, #120]	; (80048b0 <HAL_RCC_ClockConfig+0x184>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2201      	movs	r2, #1
 800483a:	4013      	ands	r3, r2
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d211      	bcs.n	8004866 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004842:	4b1b      	ldr	r3, [pc, #108]	; (80048b0 <HAL_RCC_ClockConfig+0x184>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2201      	movs	r2, #1
 8004848:	4393      	bics	r3, r2
 800484a:	0019      	movs	r1, r3
 800484c:	4b18      	ldr	r3, [pc, #96]	; (80048b0 <HAL_RCC_ClockConfig+0x184>)
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004854:	4b16      	ldr	r3, [pc, #88]	; (80048b0 <HAL_RCC_ClockConfig+0x184>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2201      	movs	r2, #1
 800485a:	4013      	ands	r3, r2
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d001      	beq.n	8004866 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e020      	b.n	80048a8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2204      	movs	r2, #4
 800486c:	4013      	ands	r3, r2
 800486e:	d009      	beq.n	8004884 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004870:	4b10      	ldr	r3, [pc, #64]	; (80048b4 <HAL_RCC_ClockConfig+0x188>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	4a11      	ldr	r2, [pc, #68]	; (80048bc <HAL_RCC_ClockConfig+0x190>)
 8004876:	4013      	ands	r3, r2
 8004878:	0019      	movs	r1, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	4b0d      	ldr	r3, [pc, #52]	; (80048b4 <HAL_RCC_ClockConfig+0x188>)
 8004880:	430a      	orrs	r2, r1
 8004882:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004884:	f000 f820 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8004888:	0001      	movs	r1, r0
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <HAL_RCC_ClockConfig+0x188>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	091b      	lsrs	r3, r3, #4
 8004890:	220f      	movs	r2, #15
 8004892:	4013      	ands	r3, r2
 8004894:	4a0a      	ldr	r2, [pc, #40]	; (80048c0 <HAL_RCC_ClockConfig+0x194>)
 8004896:	5cd3      	ldrb	r3, [r2, r3]
 8004898:	000a      	movs	r2, r1
 800489a:	40da      	lsrs	r2, r3
 800489c:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <HAL_RCC_ClockConfig+0x198>)
 800489e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80048a0:	2000      	movs	r0, #0
 80048a2:	f7fe fd17 	bl	80032d4 <HAL_InitTick>
  
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	0018      	movs	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	b004      	add	sp, #16
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40022000 	.word	0x40022000
 80048b4:	40021000 	.word	0x40021000
 80048b8:	00001388 	.word	0x00001388
 80048bc:	fffff8ff 	.word	0xfffff8ff
 80048c0:	08006f24 	.word	0x08006f24
 80048c4:	20000000 	.word	0x20000000

080048c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c8:	b590      	push	{r4, r7, lr}
 80048ca:	b08f      	sub	sp, #60	; 0x3c
 80048cc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80048ce:	2314      	movs	r3, #20
 80048d0:	18fb      	adds	r3, r7, r3
 80048d2:	4a2b      	ldr	r2, [pc, #172]	; (8004980 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80048d6:	c313      	stmia	r3!, {r0, r1, r4}
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80048dc:	1d3b      	adds	r3, r7, #4
 80048de:	4a29      	ldr	r2, [pc, #164]	; (8004984 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80048e2:	c313      	stmia	r3!, {r0, r1, r4}
 80048e4:	6812      	ldr	r2, [r2, #0]
 80048e6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ec:	2300      	movs	r3, #0
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f0:	2300      	movs	r3, #0
 80048f2:	637b      	str	r3, [r7, #52]	; 0x34
 80048f4:	2300      	movs	r3, #0
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80048fc:	4b22      	ldr	r3, [pc, #136]	; (8004988 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	220c      	movs	r2, #12
 8004906:	4013      	ands	r3, r2
 8004908:	2b04      	cmp	r3, #4
 800490a:	d002      	beq.n	8004912 <HAL_RCC_GetSysClockFreq+0x4a>
 800490c:	2b08      	cmp	r3, #8
 800490e:	d003      	beq.n	8004918 <HAL_RCC_GetSysClockFreq+0x50>
 8004910:	e02d      	b.n	800496e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004912:	4b1e      	ldr	r3, [pc, #120]	; (800498c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004914:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004916:	e02d      	b.n	8004974 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491a:	0c9b      	lsrs	r3, r3, #18
 800491c:	220f      	movs	r2, #15
 800491e:	4013      	ands	r3, r2
 8004920:	2214      	movs	r2, #20
 8004922:	18ba      	adds	r2, r7, r2
 8004924:	5cd3      	ldrb	r3, [r2, r3]
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004928:	4b17      	ldr	r3, [pc, #92]	; (8004988 <HAL_RCC_GetSysClockFreq+0xc0>)
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	220f      	movs	r2, #15
 800492e:	4013      	ands	r3, r2
 8004930:	1d3a      	adds	r2, r7, #4
 8004932:	5cd3      	ldrb	r3, [r2, r3]
 8004934:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	025b      	lsls	r3, r3, #9
 800493c:	4013      	ands	r3, r2
 800493e:	d009      	beq.n	8004954 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004942:	4812      	ldr	r0, [pc, #72]	; (800498c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004944:	f7fb fbf2 	bl	800012c <__udivsi3>
 8004948:	0003      	movs	r3, r0
 800494a:	001a      	movs	r2, r3
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	4353      	muls	r3, r2
 8004950:	637b      	str	r3, [r7, #52]	; 0x34
 8004952:	e009      	b.n	8004968 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004956:	000a      	movs	r2, r1
 8004958:	0152      	lsls	r2, r2, #5
 800495a:	1a52      	subs	r2, r2, r1
 800495c:	0193      	lsls	r3, r2, #6
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	185b      	adds	r3, r3, r1
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800496c:	e002      	b.n	8004974 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800496e:	4b07      	ldr	r3, [pc, #28]	; (800498c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004970:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004972:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004976:	0018      	movs	r0, r3
 8004978:	46bd      	mov	sp, r7
 800497a:	b00f      	add	sp, #60	; 0x3c
 800497c:	bd90      	pop	{r4, r7, pc}
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	08006dc4 	.word	0x08006dc4
 8004984:	08006dd4 	.word	0x08006dd4
 8004988:	40021000 	.word	0x40021000
 800498c:	007a1200 	.word	0x007a1200

08004990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004994:	4b02      	ldr	r3, [pc, #8]	; (80049a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004996:	681b      	ldr	r3, [r3, #0]
}
 8004998:	0018      	movs	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	20000000 	.word	0x20000000

080049a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80049a8:	f7ff fff2 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80049ac:	0001      	movs	r1, r0
 80049ae:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	0a1b      	lsrs	r3, r3, #8
 80049b4:	2207      	movs	r2, #7
 80049b6:	4013      	ands	r3, r2
 80049b8:	4a04      	ldr	r2, [pc, #16]	; (80049cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80049ba:	5cd3      	ldrb	r3, [r2, r3]
 80049bc:	40d9      	lsrs	r1, r3
 80049be:	000b      	movs	r3, r1
}    
 80049c0:	0018      	movs	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	46c0      	nop			; (mov r8, r8)
 80049c8:	40021000 	.word	0x40021000
 80049cc:	08006f34 	.word	0x08006f34

080049d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e044      	b.n	8004a6c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d107      	bne.n	80049fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2274      	movs	r2, #116	; 0x74
 80049ee:	2100      	movs	r1, #0
 80049f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	0018      	movs	r0, r3
 80049f6:	f7fe fb83 	bl	8003100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2224      	movs	r2, #36	; 0x24
 80049fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	438a      	bics	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	0018      	movs	r0, r3
 8004a14:	f000 f8da 	bl	8004bcc <UART_SetConfig>
 8004a18:	0003      	movs	r3, r0
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e024      	b.n	8004a6c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f000 fa0d 	bl	8004e4c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	490d      	ldr	r1, [pc, #52]	; (8004a74 <HAL_UART_Init+0xa4>)
 8004a3e:	400a      	ands	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	212a      	movs	r1, #42	; 0x2a
 8004a4e:	438a      	bics	r2, r1
 8004a50:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	0018      	movs	r0, r3
 8004a66:	f000 faa5 	bl	8004fb4 <UART_CheckIdleState>
 8004a6a:	0003      	movs	r3, r0
}
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	b002      	add	sp, #8
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	ffffb7ff 	.word	0xffffb7ff

08004a78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08a      	sub	sp, #40	; 0x28
 8004a7c:	af02      	add	r7, sp, #8
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	1dbb      	adds	r3, r7, #6
 8004a86:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	d000      	beq.n	8004a92 <HAL_UART_Transmit+0x1a>
 8004a90:	e096      	b.n	8004bc0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_UART_Transmit+0x28>
 8004a98:	1dbb      	adds	r3, r7, #6
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e08e      	b.n	8004bc2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	015b      	lsls	r3, r3, #5
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d109      	bne.n	8004ac4 <HAL_UART_Transmit+0x4c>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d105      	bne.n	8004ac4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2201      	movs	r2, #1
 8004abc:	4013      	ands	r3, r2
 8004abe:	d001      	beq.n	8004ac4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e07e      	b.n	8004bc2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2274      	movs	r2, #116	; 0x74
 8004ac8:	5c9b      	ldrb	r3, [r3, r2]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_UART_Transmit+0x5a>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e077      	b.n	8004bc2 <HAL_UART_Transmit+0x14a>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2274      	movs	r2, #116	; 0x74
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2280      	movs	r2, #128	; 0x80
 8004ade:	2100      	movs	r1, #0
 8004ae0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2221      	movs	r2, #33	; 0x21
 8004ae6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ae8:	f7fe fc3a 	bl	8003360 <HAL_GetTick>
 8004aec:	0003      	movs	r3, r0
 8004aee:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	1dba      	adds	r2, r7, #6
 8004af4:	2150      	movs	r1, #80	; 0x50
 8004af6:	8812      	ldrh	r2, [r2, #0]
 8004af8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	1dba      	adds	r2, r7, #6
 8004afe:	2152      	movs	r1, #82	; 0x52
 8004b00:	8812      	ldrh	r2, [r2, #0]
 8004b02:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	015b      	lsls	r3, r3, #5
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d108      	bne.n	8004b22 <HAL_UART_Transmit+0xaa>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d104      	bne.n	8004b22 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	61bb      	str	r3, [r7, #24]
 8004b20:	e003      	b.n	8004b2a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b26:	2300      	movs	r3, #0
 8004b28:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2274      	movs	r2, #116	; 0x74
 8004b2e:	2100      	movs	r1, #0
 8004b30:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004b32:	e02d      	b.n	8004b90 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	0013      	movs	r3, r2
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2180      	movs	r1, #128	; 0x80
 8004b42:	f000 fa7f 	bl	8005044 <UART_WaitOnFlagUntilTimeout>
 8004b46:	1e03      	subs	r3, r0, #0
 8004b48:	d001      	beq.n	8004b4e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e039      	b.n	8004bc2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10b      	bne.n	8004b6c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	881a      	ldrh	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	05d2      	lsls	r2, r2, #23
 8004b5e:	0dd2      	lsrs	r2, r2, #23
 8004b60:	b292      	uxth	r2, r2
 8004b62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	3302      	adds	r3, #2
 8004b68:	61bb      	str	r3, [r7, #24]
 8004b6a:	e008      	b.n	8004b7e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	781a      	ldrb	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	b292      	uxth	r2, r2
 8004b76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2252      	movs	r2, #82	; 0x52
 8004b82:	5a9b      	ldrh	r3, [r3, r2]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b299      	uxth	r1, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2252      	movs	r2, #82	; 0x52
 8004b8e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2252      	movs	r2, #82	; 0x52
 8004b94:	5a9b      	ldrh	r3, [r3, r2]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1cb      	bne.n	8004b34 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	0013      	movs	r3, r2
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	2140      	movs	r1, #64	; 0x40
 8004baa:	f000 fa4b 	bl	8005044 <UART_WaitOnFlagUntilTimeout>
 8004bae:	1e03      	subs	r3, r0, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e005      	b.n	8004bc2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	e000      	b.n	8004bc2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004bc0:	2302      	movs	r3, #2
  }
}
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b008      	add	sp, #32
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b088      	sub	sp, #32
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bd4:	231e      	movs	r3, #30
 8004bd6:	18fb      	adds	r3, r7, r3
 8004bd8:	2200      	movs	r2, #0
 8004bda:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a8d      	ldr	r2, [pc, #564]	; (8004e30 <UART_SetConfig+0x264>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	0019      	movs	r1, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	4a88      	ldr	r2, [pc, #544]	; (8004e34 <UART_SetConfig+0x268>)
 8004c12:	4013      	ands	r3, r2
 8004c14:	0019      	movs	r1, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	4a7f      	ldr	r2, [pc, #508]	; (8004e38 <UART_SetConfig+0x26c>)
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	0019      	movs	r1, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a7b      	ldr	r2, [pc, #492]	; (8004e3c <UART_SetConfig+0x270>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d127      	bne.n	8004ca2 <UART_SetConfig+0xd6>
 8004c52:	4b7b      	ldr	r3, [pc, #492]	; (8004e40 <UART_SetConfig+0x274>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	2203      	movs	r2, #3
 8004c58:	4013      	ands	r3, r2
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d00d      	beq.n	8004c7a <UART_SetConfig+0xae>
 8004c5e:	d81b      	bhi.n	8004c98 <UART_SetConfig+0xcc>
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d014      	beq.n	8004c8e <UART_SetConfig+0xc2>
 8004c64:	d818      	bhi.n	8004c98 <UART_SetConfig+0xcc>
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <UART_SetConfig+0xa4>
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d00a      	beq.n	8004c84 <UART_SetConfig+0xb8>
 8004c6e:	e013      	b.n	8004c98 <UART_SetConfig+0xcc>
 8004c70:	231f      	movs	r3, #31
 8004c72:	18fb      	adds	r3, r7, r3
 8004c74:	2200      	movs	r2, #0
 8004c76:	701a      	strb	r2, [r3, #0]
 8004c78:	e021      	b.n	8004cbe <UART_SetConfig+0xf2>
 8004c7a:	231f      	movs	r3, #31
 8004c7c:	18fb      	adds	r3, r7, r3
 8004c7e:	2202      	movs	r2, #2
 8004c80:	701a      	strb	r2, [r3, #0]
 8004c82:	e01c      	b.n	8004cbe <UART_SetConfig+0xf2>
 8004c84:	231f      	movs	r3, #31
 8004c86:	18fb      	adds	r3, r7, r3
 8004c88:	2204      	movs	r2, #4
 8004c8a:	701a      	strb	r2, [r3, #0]
 8004c8c:	e017      	b.n	8004cbe <UART_SetConfig+0xf2>
 8004c8e:	231f      	movs	r3, #31
 8004c90:	18fb      	adds	r3, r7, r3
 8004c92:	2208      	movs	r2, #8
 8004c94:	701a      	strb	r2, [r3, #0]
 8004c96:	e012      	b.n	8004cbe <UART_SetConfig+0xf2>
 8004c98:	231f      	movs	r3, #31
 8004c9a:	18fb      	adds	r3, r7, r3
 8004c9c:	2210      	movs	r2, #16
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	e00d      	b.n	8004cbe <UART_SetConfig+0xf2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a67      	ldr	r2, [pc, #412]	; (8004e44 <UART_SetConfig+0x278>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d104      	bne.n	8004cb6 <UART_SetConfig+0xea>
 8004cac:	231f      	movs	r3, #31
 8004cae:	18fb      	adds	r3, r7, r3
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	701a      	strb	r2, [r3, #0]
 8004cb4:	e003      	b.n	8004cbe <UART_SetConfig+0xf2>
 8004cb6:	231f      	movs	r3, #31
 8004cb8:	18fb      	adds	r3, r7, r3
 8004cba:	2210      	movs	r2, #16
 8004cbc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69da      	ldr	r2, [r3, #28]
 8004cc2:	2380      	movs	r3, #128	; 0x80
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d15d      	bne.n	8004d86 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8004cca:	231f      	movs	r3, #31
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d015      	beq.n	8004d00 <UART_SetConfig+0x134>
 8004cd4:	dc18      	bgt.n	8004d08 <UART_SetConfig+0x13c>
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d00d      	beq.n	8004cf6 <UART_SetConfig+0x12a>
 8004cda:	dc15      	bgt.n	8004d08 <UART_SetConfig+0x13c>
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <UART_SetConfig+0x11a>
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d005      	beq.n	8004cf0 <UART_SetConfig+0x124>
 8004ce4:	e010      	b.n	8004d08 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce6:	f7ff fe5d 	bl	80049a4 <HAL_RCC_GetPCLK1Freq>
 8004cea:	0003      	movs	r3, r0
 8004cec:	61bb      	str	r3, [r7, #24]
        break;
 8004cee:	e012      	b.n	8004d16 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cf0:	4b55      	ldr	r3, [pc, #340]	; (8004e48 <UART_SetConfig+0x27c>)
 8004cf2:	61bb      	str	r3, [r7, #24]
        break;
 8004cf4:	e00f      	b.n	8004d16 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf6:	f7ff fde7 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8004cfa:	0003      	movs	r3, r0
 8004cfc:	61bb      	str	r3, [r7, #24]
        break;
 8004cfe:	e00a      	b.n	8004d16 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d00:	2380      	movs	r3, #128	; 0x80
 8004d02:	021b      	lsls	r3, r3, #8
 8004d04:	61bb      	str	r3, [r7, #24]
        break;
 8004d06:	e006      	b.n	8004d16 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d0c:	231e      	movs	r3, #30
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	2201      	movs	r2, #1
 8004d12:	701a      	strb	r2, [r3, #0]
        break;
 8004d14:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d100      	bne.n	8004d1e <UART_SetConfig+0x152>
 8004d1c:	e07b      	b.n	8004e16 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	005a      	lsls	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	085b      	lsrs	r3, r3, #1
 8004d28:	18d2      	adds	r2, r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	0019      	movs	r1, r3
 8004d30:	0010      	movs	r0, r2
 8004d32:	f7fb f9fb 	bl	800012c <__udivsi3>
 8004d36:	0003      	movs	r3, r0
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	2b0f      	cmp	r3, #15
 8004d40:	d91c      	bls.n	8004d7c <UART_SetConfig+0x1b0>
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	2380      	movs	r3, #128	; 0x80
 8004d46:	025b      	lsls	r3, r3, #9
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d217      	bcs.n	8004d7c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	200e      	movs	r0, #14
 8004d52:	183b      	adds	r3, r7, r0
 8004d54:	210f      	movs	r1, #15
 8004d56:	438a      	bics	r2, r1
 8004d58:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	085b      	lsrs	r3, r3, #1
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2207      	movs	r2, #7
 8004d62:	4013      	ands	r3, r2
 8004d64:	b299      	uxth	r1, r3
 8004d66:	183b      	adds	r3, r7, r0
 8004d68:	183a      	adds	r2, r7, r0
 8004d6a:	8812      	ldrh	r2, [r2, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	183a      	adds	r2, r7, r0
 8004d76:	8812      	ldrh	r2, [r2, #0]
 8004d78:	60da      	str	r2, [r3, #12]
 8004d7a:	e04c      	b.n	8004e16 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004d7c:	231e      	movs	r3, #30
 8004d7e:	18fb      	adds	r3, r7, r3
 8004d80:	2201      	movs	r2, #1
 8004d82:	701a      	strb	r2, [r3, #0]
 8004d84:	e047      	b.n	8004e16 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d86:	231f      	movs	r3, #31
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d015      	beq.n	8004dbc <UART_SetConfig+0x1f0>
 8004d90:	dc18      	bgt.n	8004dc4 <UART_SetConfig+0x1f8>
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d00d      	beq.n	8004db2 <UART_SetConfig+0x1e6>
 8004d96:	dc15      	bgt.n	8004dc4 <UART_SetConfig+0x1f8>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <UART_SetConfig+0x1d6>
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d005      	beq.n	8004dac <UART_SetConfig+0x1e0>
 8004da0:	e010      	b.n	8004dc4 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da2:	f7ff fdff 	bl	80049a4 <HAL_RCC_GetPCLK1Freq>
 8004da6:	0003      	movs	r3, r0
 8004da8:	61bb      	str	r3, [r7, #24]
        break;
 8004daa:	e012      	b.n	8004dd2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dac:	4b26      	ldr	r3, [pc, #152]	; (8004e48 <UART_SetConfig+0x27c>)
 8004dae:	61bb      	str	r3, [r7, #24]
        break;
 8004db0:	e00f      	b.n	8004dd2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004db2:	f7ff fd89 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8004db6:	0003      	movs	r3, r0
 8004db8:	61bb      	str	r3, [r7, #24]
        break;
 8004dba:	e00a      	b.n	8004dd2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dbc:	2380      	movs	r3, #128	; 0x80
 8004dbe:	021b      	lsls	r3, r3, #8
 8004dc0:	61bb      	str	r3, [r7, #24]
        break;
 8004dc2:	e006      	b.n	8004dd2 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dc8:	231e      	movs	r3, #30
 8004dca:	18fb      	adds	r3, r7, r3
 8004dcc:	2201      	movs	r2, #1
 8004dce:	701a      	strb	r2, [r3, #0]
        break;
 8004dd0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01e      	beq.n	8004e16 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	085a      	lsrs	r2, r3, #1
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	18d2      	adds	r2, r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	0019      	movs	r1, r3
 8004de8:	0010      	movs	r0, r2
 8004dea:	f7fb f99f 	bl	800012c <__udivsi3>
 8004dee:	0003      	movs	r3, r0
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	2b0f      	cmp	r3, #15
 8004df8:	d909      	bls.n	8004e0e <UART_SetConfig+0x242>
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	2380      	movs	r3, #128	; 0x80
 8004dfe:	025b      	lsls	r3, r3, #9
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d204      	bcs.n	8004e0e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	60da      	str	r2, [r3, #12]
 8004e0c:	e003      	b.n	8004e16 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004e0e:	231e      	movs	r3, #30
 8004e10:	18fb      	adds	r3, r7, r3
 8004e12:	2201      	movs	r2, #1
 8004e14:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e22:	231e      	movs	r3, #30
 8004e24:	18fb      	adds	r3, r7, r3
 8004e26:	781b      	ldrb	r3, [r3, #0]
}
 8004e28:	0018      	movs	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b008      	add	sp, #32
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	ffff69f3 	.word	0xffff69f3
 8004e34:	ffffcfff 	.word	0xffffcfff
 8004e38:	fffff4ff 	.word	0xfffff4ff
 8004e3c:	40013800 	.word	0x40013800
 8004e40:	40021000 	.word	0x40021000
 8004e44:	40004400 	.word	0x40004400
 8004e48:	007a1200 	.word	0x007a1200

08004e4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	2201      	movs	r2, #1
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	d00b      	beq.n	8004e76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	4a4a      	ldr	r2, [pc, #296]	; (8004f90 <UART_AdvFeatureConfig+0x144>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	0019      	movs	r1, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	d00b      	beq.n	8004e98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	4a43      	ldr	r2, [pc, #268]	; (8004f94 <UART_AdvFeatureConfig+0x148>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	0019      	movs	r1, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	2204      	movs	r2, #4
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	d00b      	beq.n	8004eba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	4a3b      	ldr	r2, [pc, #236]	; (8004f98 <UART_AdvFeatureConfig+0x14c>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	0019      	movs	r1, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	2208      	movs	r2, #8
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	d00b      	beq.n	8004edc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	4a34      	ldr	r2, [pc, #208]	; (8004f9c <UART_AdvFeatureConfig+0x150>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	0019      	movs	r1, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	2210      	movs	r2, #16
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d00b      	beq.n	8004efe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	4a2c      	ldr	r2, [pc, #176]	; (8004fa0 <UART_AdvFeatureConfig+0x154>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	0019      	movs	r1, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	2220      	movs	r2, #32
 8004f04:	4013      	ands	r3, r2
 8004f06:	d00b      	beq.n	8004f20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	4a25      	ldr	r2, [pc, #148]	; (8004fa4 <UART_AdvFeatureConfig+0x158>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	0019      	movs	r1, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	2240      	movs	r2, #64	; 0x40
 8004f26:	4013      	ands	r3, r2
 8004f28:	d01d      	beq.n	8004f66 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4a1d      	ldr	r2, [pc, #116]	; (8004fa8 <UART_AdvFeatureConfig+0x15c>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	0019      	movs	r1, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f46:	2380      	movs	r3, #128	; 0x80
 8004f48:	035b      	lsls	r3, r3, #13
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d10b      	bne.n	8004f66 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4a15      	ldr	r2, [pc, #84]	; (8004fac <UART_AdvFeatureConfig+0x160>)
 8004f56:	4013      	ands	r3, r2
 8004f58:	0019      	movs	r1, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	2280      	movs	r2, #128	; 0x80
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	d00b      	beq.n	8004f88 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	4a0e      	ldr	r2, [pc, #56]	; (8004fb0 <UART_AdvFeatureConfig+0x164>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	0019      	movs	r1, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	605a      	str	r2, [r3, #4]
  }
}
 8004f88:	46c0      	nop			; (mov r8, r8)
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b002      	add	sp, #8
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	fffdffff 	.word	0xfffdffff
 8004f94:	fffeffff 	.word	0xfffeffff
 8004f98:	fffbffff 	.word	0xfffbffff
 8004f9c:	ffff7fff 	.word	0xffff7fff
 8004fa0:	ffffefff 	.word	0xffffefff
 8004fa4:	ffffdfff 	.word	0xffffdfff
 8004fa8:	ffefffff 	.word	0xffefffff
 8004fac:	ff9fffff 	.word	0xff9fffff
 8004fb0:	fff7ffff 	.word	0xfff7ffff

08004fb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af02      	add	r7, sp, #8
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2280      	movs	r2, #128	; 0x80
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fc4:	f7fe f9cc 	bl	8003360 <HAL_GetTick>
 8004fc8:	0003      	movs	r3, r0
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2208      	movs	r2, #8
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d10c      	bne.n	8004ff4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2280      	movs	r2, #128	; 0x80
 8004fde:	0391      	lsls	r1, r2, #14
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	4a17      	ldr	r2, [pc, #92]	; (8005040 <UART_CheckIdleState+0x8c>)
 8004fe4:	9200      	str	r2, [sp, #0]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f000 f82c 	bl	8005044 <UART_WaitOnFlagUntilTimeout>
 8004fec:	1e03      	subs	r3, r0, #0
 8004fee:	d001      	beq.n	8004ff4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e021      	b.n	8005038 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2204      	movs	r2, #4
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d10c      	bne.n	800501c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2280      	movs	r2, #128	; 0x80
 8005006:	03d1      	lsls	r1, r2, #15
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	4a0d      	ldr	r2, [pc, #52]	; (8005040 <UART_CheckIdleState+0x8c>)
 800500c:	9200      	str	r2, [sp, #0]
 800500e:	2200      	movs	r2, #0
 8005010:	f000 f818 	bl	8005044 <UART_WaitOnFlagUntilTimeout>
 8005014:	1e03      	subs	r3, r0, #0
 8005016:	d001      	beq.n	800501c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e00d      	b.n	8005038 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2220      	movs	r2, #32
 8005020:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2220      	movs	r2, #32
 8005026:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2274      	movs	r2, #116	; 0x74
 8005032:	2100      	movs	r1, #0
 8005034:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	0018      	movs	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	b004      	add	sp, #16
 800503e:	bd80      	pop	{r7, pc}
 8005040:	01ffffff 	.word	0x01ffffff

08005044 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b094      	sub	sp, #80	; 0x50
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	603b      	str	r3, [r7, #0]
 8005050:	1dfb      	adds	r3, r7, #7
 8005052:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005054:	e0a3      	b.n	800519e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005058:	3301      	adds	r3, #1
 800505a:	d100      	bne.n	800505e <UART_WaitOnFlagUntilTimeout+0x1a>
 800505c:	e09f      	b.n	800519e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800505e:	f7fe f97f 	bl	8003360 <HAL_GetTick>
 8005062:	0002      	movs	r2, r0
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800506a:	429a      	cmp	r2, r3
 800506c:	d302      	bcc.n	8005074 <UART_WaitOnFlagUntilTimeout+0x30>
 800506e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005070:	2b00      	cmp	r3, #0
 8005072:	d13d      	bne.n	80050f0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005074:	f3ef 8310 	mrs	r3, PRIMASK
 8005078:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800507a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800507c:	647b      	str	r3, [r7, #68]	; 0x44
 800507e:	2301      	movs	r3, #1
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005084:	f383 8810 	msr	PRIMASK, r3
}
 8005088:	46c0      	nop			; (mov r8, r8)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	494c      	ldr	r1, [pc, #304]	; (80051c8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005096:	400a      	ands	r2, r1
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800509c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	f383 8810 	msr	PRIMASK, r3
}
 80050a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a6:	f3ef 8310 	mrs	r3, PRIMASK
 80050aa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80050ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ae:	643b      	str	r3, [r7, #64]	; 0x40
 80050b0:	2301      	movs	r3, #1
 80050b2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b6:	f383 8810 	msr	PRIMASK, r3
}
 80050ba:	46c0      	nop			; (mov r8, r8)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2101      	movs	r1, #1
 80050c8:	438a      	bics	r2, r1
 80050ca:	609a      	str	r2, [r3, #8]
 80050cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d2:	f383 8810 	msr	PRIMASK, r3
}
 80050d6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2274      	movs	r2, #116	; 0x74
 80050e8:	2100      	movs	r1, #0
 80050ea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e067      	b.n	80051c0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2204      	movs	r2, #4
 80050f8:	4013      	ands	r3, r2
 80050fa:	d050      	beq.n	800519e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	69da      	ldr	r2, [r3, #28]
 8005102:	2380      	movs	r3, #128	; 0x80
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	401a      	ands	r2, r3
 8005108:	2380      	movs	r3, #128	; 0x80
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	429a      	cmp	r2, r3
 800510e:	d146      	bne.n	800519e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2280      	movs	r2, #128	; 0x80
 8005116:	0112      	lsls	r2, r2, #4
 8005118:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800511a:	f3ef 8310 	mrs	r3, PRIMASK
 800511e:	613b      	str	r3, [r7, #16]
  return(result);
 8005120:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005124:	2301      	movs	r3, #1
 8005126:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f383 8810 	msr	PRIMASK, r3
}
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4923      	ldr	r1, [pc, #140]	; (80051c8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800513c:	400a      	ands	r2, r1
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005142:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	f383 8810 	msr	PRIMASK, r3
}
 800514a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800514c:	f3ef 8310 	mrs	r3, PRIMASK
 8005150:	61fb      	str	r3, [r7, #28]
  return(result);
 8005152:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005154:	64bb      	str	r3, [r7, #72]	; 0x48
 8005156:	2301      	movs	r3, #1
 8005158:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	f383 8810 	msr	PRIMASK, r3
}
 8005160:	46c0      	nop			; (mov r8, r8)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2101      	movs	r1, #1
 800516e:	438a      	bics	r2, r1
 8005170:	609a      	str	r2, [r3, #8]
 8005172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005174:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	f383 8810 	msr	PRIMASK, r3
}
 800517c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2220      	movs	r2, #32
 8005182:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2220      	movs	r2, #32
 8005188:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2280      	movs	r2, #128	; 0x80
 800518e:	2120      	movs	r1, #32
 8005190:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2274      	movs	r2, #116	; 0x74
 8005196:	2100      	movs	r1, #0
 8005198:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e010      	b.n	80051c0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	4013      	ands	r3, r2
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	425a      	negs	r2, r3
 80051ae:	4153      	adcs	r3, r2
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	001a      	movs	r2, r3
 80051b4:	1dfb      	adds	r3, r7, #7
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d100      	bne.n	80051be <UART_WaitOnFlagUntilTimeout+0x17a>
 80051bc:	e74b      	b.n	8005056 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	0018      	movs	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	b014      	add	sp, #80	; 0x50
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	fffffe5f 	.word	0xfffffe5f

080051cc <__errno>:
 80051cc:	4b01      	ldr	r3, [pc, #4]	; (80051d4 <__errno+0x8>)
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	4770      	bx	lr
 80051d2:	46c0      	nop			; (mov r8, r8)
 80051d4:	2000000c 	.word	0x2000000c

080051d8 <__libc_init_array>:
 80051d8:	b570      	push	{r4, r5, r6, lr}
 80051da:	2600      	movs	r6, #0
 80051dc:	4d0c      	ldr	r5, [pc, #48]	; (8005210 <__libc_init_array+0x38>)
 80051de:	4c0d      	ldr	r4, [pc, #52]	; (8005214 <__libc_init_array+0x3c>)
 80051e0:	1b64      	subs	r4, r4, r5
 80051e2:	10a4      	asrs	r4, r4, #2
 80051e4:	42a6      	cmp	r6, r4
 80051e6:	d109      	bne.n	80051fc <__libc_init_array+0x24>
 80051e8:	2600      	movs	r6, #0
 80051ea:	f001 fdd7 	bl	8006d9c <_init>
 80051ee:	4d0a      	ldr	r5, [pc, #40]	; (8005218 <__libc_init_array+0x40>)
 80051f0:	4c0a      	ldr	r4, [pc, #40]	; (800521c <__libc_init_array+0x44>)
 80051f2:	1b64      	subs	r4, r4, r5
 80051f4:	10a4      	asrs	r4, r4, #2
 80051f6:	42a6      	cmp	r6, r4
 80051f8:	d105      	bne.n	8005206 <__libc_init_array+0x2e>
 80051fa:	bd70      	pop	{r4, r5, r6, pc}
 80051fc:	00b3      	lsls	r3, r6, #2
 80051fe:	58eb      	ldr	r3, [r5, r3]
 8005200:	4798      	blx	r3
 8005202:	3601      	adds	r6, #1
 8005204:	e7ee      	b.n	80051e4 <__libc_init_array+0xc>
 8005206:	00b3      	lsls	r3, r6, #2
 8005208:	58eb      	ldr	r3, [r5, r3]
 800520a:	4798      	blx	r3
 800520c:	3601      	adds	r6, #1
 800520e:	e7f2      	b.n	80051f6 <__libc_init_array+0x1e>
 8005210:	08006fa0 	.word	0x08006fa0
 8005214:	08006fa0 	.word	0x08006fa0
 8005218:	08006fa0 	.word	0x08006fa0
 800521c:	08006fa4 	.word	0x08006fa4

08005220 <memcpy>:
 8005220:	2300      	movs	r3, #0
 8005222:	b510      	push	{r4, lr}
 8005224:	429a      	cmp	r2, r3
 8005226:	d100      	bne.n	800522a <memcpy+0xa>
 8005228:	bd10      	pop	{r4, pc}
 800522a:	5ccc      	ldrb	r4, [r1, r3]
 800522c:	54c4      	strb	r4, [r0, r3]
 800522e:	3301      	adds	r3, #1
 8005230:	e7f8      	b.n	8005224 <memcpy+0x4>

08005232 <memset>:
 8005232:	0003      	movs	r3, r0
 8005234:	1882      	adds	r2, r0, r2
 8005236:	4293      	cmp	r3, r2
 8005238:	d100      	bne.n	800523c <memset+0xa>
 800523a:	4770      	bx	lr
 800523c:	7019      	strb	r1, [r3, #0]
 800523e:	3301      	adds	r3, #1
 8005240:	e7f9      	b.n	8005236 <memset+0x4>
	...

08005244 <siprintf>:
 8005244:	b40e      	push	{r1, r2, r3}
 8005246:	b500      	push	{lr}
 8005248:	490b      	ldr	r1, [pc, #44]	; (8005278 <siprintf+0x34>)
 800524a:	b09c      	sub	sp, #112	; 0x70
 800524c:	ab1d      	add	r3, sp, #116	; 0x74
 800524e:	9002      	str	r0, [sp, #8]
 8005250:	9006      	str	r0, [sp, #24]
 8005252:	9107      	str	r1, [sp, #28]
 8005254:	9104      	str	r1, [sp, #16]
 8005256:	4809      	ldr	r0, [pc, #36]	; (800527c <siprintf+0x38>)
 8005258:	4909      	ldr	r1, [pc, #36]	; (8005280 <siprintf+0x3c>)
 800525a:	cb04      	ldmia	r3!, {r2}
 800525c:	9105      	str	r1, [sp, #20]
 800525e:	6800      	ldr	r0, [r0, #0]
 8005260:	a902      	add	r1, sp, #8
 8005262:	9301      	str	r3, [sp, #4]
 8005264:	f000 f870 	bl	8005348 <_svfiprintf_r>
 8005268:	2300      	movs	r3, #0
 800526a:	9a02      	ldr	r2, [sp, #8]
 800526c:	7013      	strb	r3, [r2, #0]
 800526e:	b01c      	add	sp, #112	; 0x70
 8005270:	bc08      	pop	{r3}
 8005272:	b003      	add	sp, #12
 8005274:	4718      	bx	r3
 8005276:	46c0      	nop			; (mov r8, r8)
 8005278:	7fffffff 	.word	0x7fffffff
 800527c:	2000000c 	.word	0x2000000c
 8005280:	ffff0208 	.word	0xffff0208

08005284 <__ssputs_r>:
 8005284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005286:	688e      	ldr	r6, [r1, #8]
 8005288:	b085      	sub	sp, #20
 800528a:	0007      	movs	r7, r0
 800528c:	000c      	movs	r4, r1
 800528e:	9203      	str	r2, [sp, #12]
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	429e      	cmp	r6, r3
 8005294:	d83c      	bhi.n	8005310 <__ssputs_r+0x8c>
 8005296:	2390      	movs	r3, #144	; 0x90
 8005298:	898a      	ldrh	r2, [r1, #12]
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	421a      	tst	r2, r3
 800529e:	d034      	beq.n	800530a <__ssputs_r+0x86>
 80052a0:	6909      	ldr	r1, [r1, #16]
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	6960      	ldr	r0, [r4, #20]
 80052a6:	1a5b      	subs	r3, r3, r1
 80052a8:	9302      	str	r3, [sp, #8]
 80052aa:	2303      	movs	r3, #3
 80052ac:	4343      	muls	r3, r0
 80052ae:	0fdd      	lsrs	r5, r3, #31
 80052b0:	18ed      	adds	r5, r5, r3
 80052b2:	9b01      	ldr	r3, [sp, #4]
 80052b4:	9802      	ldr	r0, [sp, #8]
 80052b6:	3301      	adds	r3, #1
 80052b8:	181b      	adds	r3, r3, r0
 80052ba:	106d      	asrs	r5, r5, #1
 80052bc:	42ab      	cmp	r3, r5
 80052be:	d900      	bls.n	80052c2 <__ssputs_r+0x3e>
 80052c0:	001d      	movs	r5, r3
 80052c2:	0553      	lsls	r3, r2, #21
 80052c4:	d532      	bpl.n	800532c <__ssputs_r+0xa8>
 80052c6:	0029      	movs	r1, r5
 80052c8:	0038      	movs	r0, r7
 80052ca:	f000 fb49 	bl	8005960 <_malloc_r>
 80052ce:	1e06      	subs	r6, r0, #0
 80052d0:	d109      	bne.n	80052e6 <__ssputs_r+0x62>
 80052d2:	230c      	movs	r3, #12
 80052d4:	603b      	str	r3, [r7, #0]
 80052d6:	2340      	movs	r3, #64	; 0x40
 80052d8:	2001      	movs	r0, #1
 80052da:	89a2      	ldrh	r2, [r4, #12]
 80052dc:	4240      	negs	r0, r0
 80052de:	4313      	orrs	r3, r2
 80052e0:	81a3      	strh	r3, [r4, #12]
 80052e2:	b005      	add	sp, #20
 80052e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052e6:	9a02      	ldr	r2, [sp, #8]
 80052e8:	6921      	ldr	r1, [r4, #16]
 80052ea:	f7ff ff99 	bl	8005220 <memcpy>
 80052ee:	89a3      	ldrh	r3, [r4, #12]
 80052f0:	4a14      	ldr	r2, [pc, #80]	; (8005344 <__ssputs_r+0xc0>)
 80052f2:	401a      	ands	r2, r3
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	4313      	orrs	r3, r2
 80052f8:	81a3      	strh	r3, [r4, #12]
 80052fa:	9b02      	ldr	r3, [sp, #8]
 80052fc:	6126      	str	r6, [r4, #16]
 80052fe:	18f6      	adds	r6, r6, r3
 8005300:	6026      	str	r6, [r4, #0]
 8005302:	6165      	str	r5, [r4, #20]
 8005304:	9e01      	ldr	r6, [sp, #4]
 8005306:	1aed      	subs	r5, r5, r3
 8005308:	60a5      	str	r5, [r4, #8]
 800530a:	9b01      	ldr	r3, [sp, #4]
 800530c:	429e      	cmp	r6, r3
 800530e:	d900      	bls.n	8005312 <__ssputs_r+0x8e>
 8005310:	9e01      	ldr	r6, [sp, #4]
 8005312:	0032      	movs	r2, r6
 8005314:	9903      	ldr	r1, [sp, #12]
 8005316:	6820      	ldr	r0, [r4, #0]
 8005318:	f000 faa3 	bl	8005862 <memmove>
 800531c:	68a3      	ldr	r3, [r4, #8]
 800531e:	2000      	movs	r0, #0
 8005320:	1b9b      	subs	r3, r3, r6
 8005322:	60a3      	str	r3, [r4, #8]
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	199e      	adds	r6, r3, r6
 8005328:	6026      	str	r6, [r4, #0]
 800532a:	e7da      	b.n	80052e2 <__ssputs_r+0x5e>
 800532c:	002a      	movs	r2, r5
 800532e:	0038      	movs	r0, r7
 8005330:	f000 fb8c 	bl	8005a4c <_realloc_r>
 8005334:	1e06      	subs	r6, r0, #0
 8005336:	d1e0      	bne.n	80052fa <__ssputs_r+0x76>
 8005338:	0038      	movs	r0, r7
 800533a:	6921      	ldr	r1, [r4, #16]
 800533c:	f000 faa4 	bl	8005888 <_free_r>
 8005340:	e7c7      	b.n	80052d2 <__ssputs_r+0x4e>
 8005342:	46c0      	nop			; (mov r8, r8)
 8005344:	fffffb7f 	.word	0xfffffb7f

08005348 <_svfiprintf_r>:
 8005348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800534a:	b0a1      	sub	sp, #132	; 0x84
 800534c:	9003      	str	r0, [sp, #12]
 800534e:	001d      	movs	r5, r3
 8005350:	898b      	ldrh	r3, [r1, #12]
 8005352:	000f      	movs	r7, r1
 8005354:	0016      	movs	r6, r2
 8005356:	061b      	lsls	r3, r3, #24
 8005358:	d511      	bpl.n	800537e <_svfiprintf_r+0x36>
 800535a:	690b      	ldr	r3, [r1, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10e      	bne.n	800537e <_svfiprintf_r+0x36>
 8005360:	2140      	movs	r1, #64	; 0x40
 8005362:	f000 fafd 	bl	8005960 <_malloc_r>
 8005366:	6038      	str	r0, [r7, #0]
 8005368:	6138      	str	r0, [r7, #16]
 800536a:	2800      	cmp	r0, #0
 800536c:	d105      	bne.n	800537a <_svfiprintf_r+0x32>
 800536e:	230c      	movs	r3, #12
 8005370:	9a03      	ldr	r2, [sp, #12]
 8005372:	3801      	subs	r0, #1
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	b021      	add	sp, #132	; 0x84
 8005378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800537a:	2340      	movs	r3, #64	; 0x40
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	2300      	movs	r3, #0
 8005380:	ac08      	add	r4, sp, #32
 8005382:	6163      	str	r3, [r4, #20]
 8005384:	3320      	adds	r3, #32
 8005386:	7663      	strb	r3, [r4, #25]
 8005388:	3310      	adds	r3, #16
 800538a:	76a3      	strb	r3, [r4, #26]
 800538c:	9507      	str	r5, [sp, #28]
 800538e:	0035      	movs	r5, r6
 8005390:	782b      	ldrb	r3, [r5, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <_svfiprintf_r+0x52>
 8005396:	2b25      	cmp	r3, #37	; 0x25
 8005398:	d147      	bne.n	800542a <_svfiprintf_r+0xe2>
 800539a:	1bab      	subs	r3, r5, r6
 800539c:	9305      	str	r3, [sp, #20]
 800539e:	42b5      	cmp	r5, r6
 80053a0:	d00c      	beq.n	80053bc <_svfiprintf_r+0x74>
 80053a2:	0032      	movs	r2, r6
 80053a4:	0039      	movs	r1, r7
 80053a6:	9803      	ldr	r0, [sp, #12]
 80053a8:	f7ff ff6c 	bl	8005284 <__ssputs_r>
 80053ac:	1c43      	adds	r3, r0, #1
 80053ae:	d100      	bne.n	80053b2 <_svfiprintf_r+0x6a>
 80053b0:	e0ae      	b.n	8005510 <_svfiprintf_r+0x1c8>
 80053b2:	6962      	ldr	r2, [r4, #20]
 80053b4:	9b05      	ldr	r3, [sp, #20]
 80053b6:	4694      	mov	ip, r2
 80053b8:	4463      	add	r3, ip
 80053ba:	6163      	str	r3, [r4, #20]
 80053bc:	782b      	ldrb	r3, [r5, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d100      	bne.n	80053c4 <_svfiprintf_r+0x7c>
 80053c2:	e0a5      	b.n	8005510 <_svfiprintf_r+0x1c8>
 80053c4:	2201      	movs	r2, #1
 80053c6:	2300      	movs	r3, #0
 80053c8:	4252      	negs	r2, r2
 80053ca:	6062      	str	r2, [r4, #4]
 80053cc:	a904      	add	r1, sp, #16
 80053ce:	3254      	adds	r2, #84	; 0x54
 80053d0:	1852      	adds	r2, r2, r1
 80053d2:	1c6e      	adds	r6, r5, #1
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	60e3      	str	r3, [r4, #12]
 80053d8:	60a3      	str	r3, [r4, #8]
 80053da:	7013      	strb	r3, [r2, #0]
 80053dc:	65a3      	str	r3, [r4, #88]	; 0x58
 80053de:	2205      	movs	r2, #5
 80053e0:	7831      	ldrb	r1, [r6, #0]
 80053e2:	4854      	ldr	r0, [pc, #336]	; (8005534 <_svfiprintf_r+0x1ec>)
 80053e4:	f000 fa32 	bl	800584c <memchr>
 80053e8:	1c75      	adds	r5, r6, #1
 80053ea:	2800      	cmp	r0, #0
 80053ec:	d11f      	bne.n	800542e <_svfiprintf_r+0xe6>
 80053ee:	6822      	ldr	r2, [r4, #0]
 80053f0:	06d3      	lsls	r3, r2, #27
 80053f2:	d504      	bpl.n	80053fe <_svfiprintf_r+0xb6>
 80053f4:	2353      	movs	r3, #83	; 0x53
 80053f6:	a904      	add	r1, sp, #16
 80053f8:	185b      	adds	r3, r3, r1
 80053fa:	2120      	movs	r1, #32
 80053fc:	7019      	strb	r1, [r3, #0]
 80053fe:	0713      	lsls	r3, r2, #28
 8005400:	d504      	bpl.n	800540c <_svfiprintf_r+0xc4>
 8005402:	2353      	movs	r3, #83	; 0x53
 8005404:	a904      	add	r1, sp, #16
 8005406:	185b      	adds	r3, r3, r1
 8005408:	212b      	movs	r1, #43	; 0x2b
 800540a:	7019      	strb	r1, [r3, #0]
 800540c:	7833      	ldrb	r3, [r6, #0]
 800540e:	2b2a      	cmp	r3, #42	; 0x2a
 8005410:	d016      	beq.n	8005440 <_svfiprintf_r+0xf8>
 8005412:	0035      	movs	r5, r6
 8005414:	2100      	movs	r1, #0
 8005416:	200a      	movs	r0, #10
 8005418:	68e3      	ldr	r3, [r4, #12]
 800541a:	782a      	ldrb	r2, [r5, #0]
 800541c:	1c6e      	adds	r6, r5, #1
 800541e:	3a30      	subs	r2, #48	; 0x30
 8005420:	2a09      	cmp	r2, #9
 8005422:	d94e      	bls.n	80054c2 <_svfiprintf_r+0x17a>
 8005424:	2900      	cmp	r1, #0
 8005426:	d111      	bne.n	800544c <_svfiprintf_r+0x104>
 8005428:	e017      	b.n	800545a <_svfiprintf_r+0x112>
 800542a:	3501      	adds	r5, #1
 800542c:	e7b0      	b.n	8005390 <_svfiprintf_r+0x48>
 800542e:	4b41      	ldr	r3, [pc, #260]	; (8005534 <_svfiprintf_r+0x1ec>)
 8005430:	6822      	ldr	r2, [r4, #0]
 8005432:	1ac0      	subs	r0, r0, r3
 8005434:	2301      	movs	r3, #1
 8005436:	4083      	lsls	r3, r0
 8005438:	4313      	orrs	r3, r2
 800543a:	002e      	movs	r6, r5
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	e7ce      	b.n	80053de <_svfiprintf_r+0x96>
 8005440:	9b07      	ldr	r3, [sp, #28]
 8005442:	1d19      	adds	r1, r3, #4
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	9107      	str	r1, [sp, #28]
 8005448:	2b00      	cmp	r3, #0
 800544a:	db01      	blt.n	8005450 <_svfiprintf_r+0x108>
 800544c:	930b      	str	r3, [sp, #44]	; 0x2c
 800544e:	e004      	b.n	800545a <_svfiprintf_r+0x112>
 8005450:	425b      	negs	r3, r3
 8005452:	60e3      	str	r3, [r4, #12]
 8005454:	2302      	movs	r3, #2
 8005456:	4313      	orrs	r3, r2
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	782b      	ldrb	r3, [r5, #0]
 800545c:	2b2e      	cmp	r3, #46	; 0x2e
 800545e:	d10a      	bne.n	8005476 <_svfiprintf_r+0x12e>
 8005460:	786b      	ldrb	r3, [r5, #1]
 8005462:	2b2a      	cmp	r3, #42	; 0x2a
 8005464:	d135      	bne.n	80054d2 <_svfiprintf_r+0x18a>
 8005466:	9b07      	ldr	r3, [sp, #28]
 8005468:	3502      	adds	r5, #2
 800546a:	1d1a      	adds	r2, r3, #4
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	9207      	str	r2, [sp, #28]
 8005470:	2b00      	cmp	r3, #0
 8005472:	db2b      	blt.n	80054cc <_svfiprintf_r+0x184>
 8005474:	9309      	str	r3, [sp, #36]	; 0x24
 8005476:	4e30      	ldr	r6, [pc, #192]	; (8005538 <_svfiprintf_r+0x1f0>)
 8005478:	2203      	movs	r2, #3
 800547a:	0030      	movs	r0, r6
 800547c:	7829      	ldrb	r1, [r5, #0]
 800547e:	f000 f9e5 	bl	800584c <memchr>
 8005482:	2800      	cmp	r0, #0
 8005484:	d006      	beq.n	8005494 <_svfiprintf_r+0x14c>
 8005486:	2340      	movs	r3, #64	; 0x40
 8005488:	1b80      	subs	r0, r0, r6
 800548a:	4083      	lsls	r3, r0
 800548c:	6822      	ldr	r2, [r4, #0]
 800548e:	3501      	adds	r5, #1
 8005490:	4313      	orrs	r3, r2
 8005492:	6023      	str	r3, [r4, #0]
 8005494:	7829      	ldrb	r1, [r5, #0]
 8005496:	2206      	movs	r2, #6
 8005498:	4828      	ldr	r0, [pc, #160]	; (800553c <_svfiprintf_r+0x1f4>)
 800549a:	1c6e      	adds	r6, r5, #1
 800549c:	7621      	strb	r1, [r4, #24]
 800549e:	f000 f9d5 	bl	800584c <memchr>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d03c      	beq.n	8005520 <_svfiprintf_r+0x1d8>
 80054a6:	4b26      	ldr	r3, [pc, #152]	; (8005540 <_svfiprintf_r+0x1f8>)
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d125      	bne.n	80054f8 <_svfiprintf_r+0x1b0>
 80054ac:	2207      	movs	r2, #7
 80054ae:	9b07      	ldr	r3, [sp, #28]
 80054b0:	3307      	adds	r3, #7
 80054b2:	4393      	bics	r3, r2
 80054b4:	3308      	adds	r3, #8
 80054b6:	9307      	str	r3, [sp, #28]
 80054b8:	6963      	ldr	r3, [r4, #20]
 80054ba:	9a04      	ldr	r2, [sp, #16]
 80054bc:	189b      	adds	r3, r3, r2
 80054be:	6163      	str	r3, [r4, #20]
 80054c0:	e765      	b.n	800538e <_svfiprintf_r+0x46>
 80054c2:	4343      	muls	r3, r0
 80054c4:	0035      	movs	r5, r6
 80054c6:	2101      	movs	r1, #1
 80054c8:	189b      	adds	r3, r3, r2
 80054ca:	e7a6      	b.n	800541a <_svfiprintf_r+0xd2>
 80054cc:	2301      	movs	r3, #1
 80054ce:	425b      	negs	r3, r3
 80054d0:	e7d0      	b.n	8005474 <_svfiprintf_r+0x12c>
 80054d2:	2300      	movs	r3, #0
 80054d4:	200a      	movs	r0, #10
 80054d6:	001a      	movs	r2, r3
 80054d8:	3501      	adds	r5, #1
 80054da:	6063      	str	r3, [r4, #4]
 80054dc:	7829      	ldrb	r1, [r5, #0]
 80054de:	1c6e      	adds	r6, r5, #1
 80054e0:	3930      	subs	r1, #48	; 0x30
 80054e2:	2909      	cmp	r1, #9
 80054e4:	d903      	bls.n	80054ee <_svfiprintf_r+0x1a6>
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0c5      	beq.n	8005476 <_svfiprintf_r+0x12e>
 80054ea:	9209      	str	r2, [sp, #36]	; 0x24
 80054ec:	e7c3      	b.n	8005476 <_svfiprintf_r+0x12e>
 80054ee:	4342      	muls	r2, r0
 80054f0:	0035      	movs	r5, r6
 80054f2:	2301      	movs	r3, #1
 80054f4:	1852      	adds	r2, r2, r1
 80054f6:	e7f1      	b.n	80054dc <_svfiprintf_r+0x194>
 80054f8:	ab07      	add	r3, sp, #28
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	003a      	movs	r2, r7
 80054fe:	0021      	movs	r1, r4
 8005500:	4b10      	ldr	r3, [pc, #64]	; (8005544 <_svfiprintf_r+0x1fc>)
 8005502:	9803      	ldr	r0, [sp, #12]
 8005504:	e000      	b.n	8005508 <_svfiprintf_r+0x1c0>
 8005506:	bf00      	nop
 8005508:	9004      	str	r0, [sp, #16]
 800550a:	9b04      	ldr	r3, [sp, #16]
 800550c:	3301      	adds	r3, #1
 800550e:	d1d3      	bne.n	80054b8 <_svfiprintf_r+0x170>
 8005510:	89bb      	ldrh	r3, [r7, #12]
 8005512:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005514:	065b      	lsls	r3, r3, #25
 8005516:	d400      	bmi.n	800551a <_svfiprintf_r+0x1d2>
 8005518:	e72d      	b.n	8005376 <_svfiprintf_r+0x2e>
 800551a:	2001      	movs	r0, #1
 800551c:	4240      	negs	r0, r0
 800551e:	e72a      	b.n	8005376 <_svfiprintf_r+0x2e>
 8005520:	ab07      	add	r3, sp, #28
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	003a      	movs	r2, r7
 8005526:	0021      	movs	r1, r4
 8005528:	4b06      	ldr	r3, [pc, #24]	; (8005544 <_svfiprintf_r+0x1fc>)
 800552a:	9803      	ldr	r0, [sp, #12]
 800552c:	f000 f87c 	bl	8005628 <_printf_i>
 8005530:	e7ea      	b.n	8005508 <_svfiprintf_r+0x1c0>
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	08006f3c 	.word	0x08006f3c
 8005538:	08006f42 	.word	0x08006f42
 800553c:	08006f46 	.word	0x08006f46
 8005540:	00000000 	.word	0x00000000
 8005544:	08005285 	.word	0x08005285

08005548 <_printf_common>:
 8005548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800554a:	0015      	movs	r5, r2
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	688a      	ldr	r2, [r1, #8]
 8005550:	690b      	ldr	r3, [r1, #16]
 8005552:	000c      	movs	r4, r1
 8005554:	9000      	str	r0, [sp, #0]
 8005556:	4293      	cmp	r3, r2
 8005558:	da00      	bge.n	800555c <_printf_common+0x14>
 800555a:	0013      	movs	r3, r2
 800555c:	0022      	movs	r2, r4
 800555e:	602b      	str	r3, [r5, #0]
 8005560:	3243      	adds	r2, #67	; 0x43
 8005562:	7812      	ldrb	r2, [r2, #0]
 8005564:	2a00      	cmp	r2, #0
 8005566:	d001      	beq.n	800556c <_printf_common+0x24>
 8005568:	3301      	adds	r3, #1
 800556a:	602b      	str	r3, [r5, #0]
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	069b      	lsls	r3, r3, #26
 8005570:	d502      	bpl.n	8005578 <_printf_common+0x30>
 8005572:	682b      	ldr	r3, [r5, #0]
 8005574:	3302      	adds	r3, #2
 8005576:	602b      	str	r3, [r5, #0]
 8005578:	6822      	ldr	r2, [r4, #0]
 800557a:	2306      	movs	r3, #6
 800557c:	0017      	movs	r7, r2
 800557e:	401f      	ands	r7, r3
 8005580:	421a      	tst	r2, r3
 8005582:	d027      	beq.n	80055d4 <_printf_common+0x8c>
 8005584:	0023      	movs	r3, r4
 8005586:	3343      	adds	r3, #67	; 0x43
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	1e5a      	subs	r2, r3, #1
 800558c:	4193      	sbcs	r3, r2
 800558e:	6822      	ldr	r2, [r4, #0]
 8005590:	0692      	lsls	r2, r2, #26
 8005592:	d430      	bmi.n	80055f6 <_printf_common+0xae>
 8005594:	0022      	movs	r2, r4
 8005596:	9901      	ldr	r1, [sp, #4]
 8005598:	9800      	ldr	r0, [sp, #0]
 800559a:	9e08      	ldr	r6, [sp, #32]
 800559c:	3243      	adds	r2, #67	; 0x43
 800559e:	47b0      	blx	r6
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d025      	beq.n	80055f0 <_printf_common+0xa8>
 80055a4:	2306      	movs	r3, #6
 80055a6:	6820      	ldr	r0, [r4, #0]
 80055a8:	682a      	ldr	r2, [r5, #0]
 80055aa:	68e1      	ldr	r1, [r4, #12]
 80055ac:	2500      	movs	r5, #0
 80055ae:	4003      	ands	r3, r0
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d103      	bne.n	80055bc <_printf_common+0x74>
 80055b4:	1a8d      	subs	r5, r1, r2
 80055b6:	43eb      	mvns	r3, r5
 80055b8:	17db      	asrs	r3, r3, #31
 80055ba:	401d      	ands	r5, r3
 80055bc:	68a3      	ldr	r3, [r4, #8]
 80055be:	6922      	ldr	r2, [r4, #16]
 80055c0:	4293      	cmp	r3, r2
 80055c2:	dd01      	ble.n	80055c8 <_printf_common+0x80>
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	18ed      	adds	r5, r5, r3
 80055c8:	2700      	movs	r7, #0
 80055ca:	42bd      	cmp	r5, r7
 80055cc:	d120      	bne.n	8005610 <_printf_common+0xc8>
 80055ce:	2000      	movs	r0, #0
 80055d0:	e010      	b.n	80055f4 <_printf_common+0xac>
 80055d2:	3701      	adds	r7, #1
 80055d4:	68e3      	ldr	r3, [r4, #12]
 80055d6:	682a      	ldr	r2, [r5, #0]
 80055d8:	1a9b      	subs	r3, r3, r2
 80055da:	42bb      	cmp	r3, r7
 80055dc:	ddd2      	ble.n	8005584 <_printf_common+0x3c>
 80055de:	0022      	movs	r2, r4
 80055e0:	2301      	movs	r3, #1
 80055e2:	9901      	ldr	r1, [sp, #4]
 80055e4:	9800      	ldr	r0, [sp, #0]
 80055e6:	9e08      	ldr	r6, [sp, #32]
 80055e8:	3219      	adds	r2, #25
 80055ea:	47b0      	blx	r6
 80055ec:	1c43      	adds	r3, r0, #1
 80055ee:	d1f0      	bne.n	80055d2 <_printf_common+0x8a>
 80055f0:	2001      	movs	r0, #1
 80055f2:	4240      	negs	r0, r0
 80055f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055f6:	2030      	movs	r0, #48	; 0x30
 80055f8:	18e1      	adds	r1, r4, r3
 80055fa:	3143      	adds	r1, #67	; 0x43
 80055fc:	7008      	strb	r0, [r1, #0]
 80055fe:	0021      	movs	r1, r4
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	3145      	adds	r1, #69	; 0x45
 8005604:	7809      	ldrb	r1, [r1, #0]
 8005606:	18a2      	adds	r2, r4, r2
 8005608:	3243      	adds	r2, #67	; 0x43
 800560a:	3302      	adds	r3, #2
 800560c:	7011      	strb	r1, [r2, #0]
 800560e:	e7c1      	b.n	8005594 <_printf_common+0x4c>
 8005610:	0022      	movs	r2, r4
 8005612:	2301      	movs	r3, #1
 8005614:	9901      	ldr	r1, [sp, #4]
 8005616:	9800      	ldr	r0, [sp, #0]
 8005618:	9e08      	ldr	r6, [sp, #32]
 800561a:	321a      	adds	r2, #26
 800561c:	47b0      	blx	r6
 800561e:	1c43      	adds	r3, r0, #1
 8005620:	d0e6      	beq.n	80055f0 <_printf_common+0xa8>
 8005622:	3701      	adds	r7, #1
 8005624:	e7d1      	b.n	80055ca <_printf_common+0x82>
	...

08005628 <_printf_i>:
 8005628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800562a:	b08b      	sub	sp, #44	; 0x2c
 800562c:	9206      	str	r2, [sp, #24]
 800562e:	000a      	movs	r2, r1
 8005630:	3243      	adds	r2, #67	; 0x43
 8005632:	9307      	str	r3, [sp, #28]
 8005634:	9005      	str	r0, [sp, #20]
 8005636:	9204      	str	r2, [sp, #16]
 8005638:	7e0a      	ldrb	r2, [r1, #24]
 800563a:	000c      	movs	r4, r1
 800563c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800563e:	2a78      	cmp	r2, #120	; 0x78
 8005640:	d807      	bhi.n	8005652 <_printf_i+0x2a>
 8005642:	2a62      	cmp	r2, #98	; 0x62
 8005644:	d809      	bhi.n	800565a <_printf_i+0x32>
 8005646:	2a00      	cmp	r2, #0
 8005648:	d100      	bne.n	800564c <_printf_i+0x24>
 800564a:	e0c1      	b.n	80057d0 <_printf_i+0x1a8>
 800564c:	2a58      	cmp	r2, #88	; 0x58
 800564e:	d100      	bne.n	8005652 <_printf_i+0x2a>
 8005650:	e08c      	b.n	800576c <_printf_i+0x144>
 8005652:	0026      	movs	r6, r4
 8005654:	3642      	adds	r6, #66	; 0x42
 8005656:	7032      	strb	r2, [r6, #0]
 8005658:	e022      	b.n	80056a0 <_printf_i+0x78>
 800565a:	0010      	movs	r0, r2
 800565c:	3863      	subs	r0, #99	; 0x63
 800565e:	2815      	cmp	r0, #21
 8005660:	d8f7      	bhi.n	8005652 <_printf_i+0x2a>
 8005662:	f7fa fd59 	bl	8000118 <__gnu_thumb1_case_shi>
 8005666:	0016      	.short	0x0016
 8005668:	fff6001f 	.word	0xfff6001f
 800566c:	fff6fff6 	.word	0xfff6fff6
 8005670:	001ffff6 	.word	0x001ffff6
 8005674:	fff6fff6 	.word	0xfff6fff6
 8005678:	fff6fff6 	.word	0xfff6fff6
 800567c:	003600a8 	.word	0x003600a8
 8005680:	fff6009a 	.word	0xfff6009a
 8005684:	00b9fff6 	.word	0x00b9fff6
 8005688:	0036fff6 	.word	0x0036fff6
 800568c:	fff6fff6 	.word	0xfff6fff6
 8005690:	009e      	.short	0x009e
 8005692:	0026      	movs	r6, r4
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	3642      	adds	r6, #66	; 0x42
 8005698:	1d11      	adds	r1, r2, #4
 800569a:	6019      	str	r1, [r3, #0]
 800569c:	6813      	ldr	r3, [r2, #0]
 800569e:	7033      	strb	r3, [r6, #0]
 80056a0:	2301      	movs	r3, #1
 80056a2:	e0a7      	b.n	80057f4 <_printf_i+0x1cc>
 80056a4:	6808      	ldr	r0, [r1, #0]
 80056a6:	6819      	ldr	r1, [r3, #0]
 80056a8:	1d0a      	adds	r2, r1, #4
 80056aa:	0605      	lsls	r5, r0, #24
 80056ac:	d50b      	bpl.n	80056c6 <_printf_i+0x9e>
 80056ae:	680d      	ldr	r5, [r1, #0]
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	2d00      	cmp	r5, #0
 80056b4:	da03      	bge.n	80056be <_printf_i+0x96>
 80056b6:	232d      	movs	r3, #45	; 0x2d
 80056b8:	9a04      	ldr	r2, [sp, #16]
 80056ba:	426d      	negs	r5, r5
 80056bc:	7013      	strb	r3, [r2, #0]
 80056be:	4b61      	ldr	r3, [pc, #388]	; (8005844 <_printf_i+0x21c>)
 80056c0:	270a      	movs	r7, #10
 80056c2:	9303      	str	r3, [sp, #12]
 80056c4:	e01b      	b.n	80056fe <_printf_i+0xd6>
 80056c6:	680d      	ldr	r5, [r1, #0]
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	0641      	lsls	r1, r0, #25
 80056cc:	d5f1      	bpl.n	80056b2 <_printf_i+0x8a>
 80056ce:	b22d      	sxth	r5, r5
 80056d0:	e7ef      	b.n	80056b2 <_printf_i+0x8a>
 80056d2:	680d      	ldr	r5, [r1, #0]
 80056d4:	6819      	ldr	r1, [r3, #0]
 80056d6:	1d08      	adds	r0, r1, #4
 80056d8:	6018      	str	r0, [r3, #0]
 80056da:	062e      	lsls	r6, r5, #24
 80056dc:	d501      	bpl.n	80056e2 <_printf_i+0xba>
 80056de:	680d      	ldr	r5, [r1, #0]
 80056e0:	e003      	b.n	80056ea <_printf_i+0xc2>
 80056e2:	066d      	lsls	r5, r5, #25
 80056e4:	d5fb      	bpl.n	80056de <_printf_i+0xb6>
 80056e6:	680d      	ldr	r5, [r1, #0]
 80056e8:	b2ad      	uxth	r5, r5
 80056ea:	4b56      	ldr	r3, [pc, #344]	; (8005844 <_printf_i+0x21c>)
 80056ec:	2708      	movs	r7, #8
 80056ee:	9303      	str	r3, [sp, #12]
 80056f0:	2a6f      	cmp	r2, #111	; 0x6f
 80056f2:	d000      	beq.n	80056f6 <_printf_i+0xce>
 80056f4:	3702      	adds	r7, #2
 80056f6:	0023      	movs	r3, r4
 80056f8:	2200      	movs	r2, #0
 80056fa:	3343      	adds	r3, #67	; 0x43
 80056fc:	701a      	strb	r2, [r3, #0]
 80056fe:	6863      	ldr	r3, [r4, #4]
 8005700:	60a3      	str	r3, [r4, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	db03      	blt.n	800570e <_printf_i+0xe6>
 8005706:	2204      	movs	r2, #4
 8005708:	6821      	ldr	r1, [r4, #0]
 800570a:	4391      	bics	r1, r2
 800570c:	6021      	str	r1, [r4, #0]
 800570e:	2d00      	cmp	r5, #0
 8005710:	d102      	bne.n	8005718 <_printf_i+0xf0>
 8005712:	9e04      	ldr	r6, [sp, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00c      	beq.n	8005732 <_printf_i+0x10a>
 8005718:	9e04      	ldr	r6, [sp, #16]
 800571a:	0028      	movs	r0, r5
 800571c:	0039      	movs	r1, r7
 800571e:	f7fa fd8b 	bl	8000238 <__aeabi_uidivmod>
 8005722:	9b03      	ldr	r3, [sp, #12]
 8005724:	3e01      	subs	r6, #1
 8005726:	5c5b      	ldrb	r3, [r3, r1]
 8005728:	7033      	strb	r3, [r6, #0]
 800572a:	002b      	movs	r3, r5
 800572c:	0005      	movs	r5, r0
 800572e:	429f      	cmp	r7, r3
 8005730:	d9f3      	bls.n	800571a <_printf_i+0xf2>
 8005732:	2f08      	cmp	r7, #8
 8005734:	d109      	bne.n	800574a <_printf_i+0x122>
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	07db      	lsls	r3, r3, #31
 800573a:	d506      	bpl.n	800574a <_printf_i+0x122>
 800573c:	6863      	ldr	r3, [r4, #4]
 800573e:	6922      	ldr	r2, [r4, #16]
 8005740:	4293      	cmp	r3, r2
 8005742:	dc02      	bgt.n	800574a <_printf_i+0x122>
 8005744:	2330      	movs	r3, #48	; 0x30
 8005746:	3e01      	subs	r6, #1
 8005748:	7033      	strb	r3, [r6, #0]
 800574a:	9b04      	ldr	r3, [sp, #16]
 800574c:	1b9b      	subs	r3, r3, r6
 800574e:	6123      	str	r3, [r4, #16]
 8005750:	9b07      	ldr	r3, [sp, #28]
 8005752:	0021      	movs	r1, r4
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	9805      	ldr	r0, [sp, #20]
 8005758:	9b06      	ldr	r3, [sp, #24]
 800575a:	aa09      	add	r2, sp, #36	; 0x24
 800575c:	f7ff fef4 	bl	8005548 <_printf_common>
 8005760:	1c43      	adds	r3, r0, #1
 8005762:	d14c      	bne.n	80057fe <_printf_i+0x1d6>
 8005764:	2001      	movs	r0, #1
 8005766:	4240      	negs	r0, r0
 8005768:	b00b      	add	sp, #44	; 0x2c
 800576a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800576c:	3145      	adds	r1, #69	; 0x45
 800576e:	700a      	strb	r2, [r1, #0]
 8005770:	4a34      	ldr	r2, [pc, #208]	; (8005844 <_printf_i+0x21c>)
 8005772:	9203      	str	r2, [sp, #12]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	6821      	ldr	r1, [r4, #0]
 8005778:	ca20      	ldmia	r2!, {r5}
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	0608      	lsls	r0, r1, #24
 800577e:	d516      	bpl.n	80057ae <_printf_i+0x186>
 8005780:	07cb      	lsls	r3, r1, #31
 8005782:	d502      	bpl.n	800578a <_printf_i+0x162>
 8005784:	2320      	movs	r3, #32
 8005786:	4319      	orrs	r1, r3
 8005788:	6021      	str	r1, [r4, #0]
 800578a:	2710      	movs	r7, #16
 800578c:	2d00      	cmp	r5, #0
 800578e:	d1b2      	bne.n	80056f6 <_printf_i+0xce>
 8005790:	2320      	movs	r3, #32
 8005792:	6822      	ldr	r2, [r4, #0]
 8005794:	439a      	bics	r2, r3
 8005796:	6022      	str	r2, [r4, #0]
 8005798:	e7ad      	b.n	80056f6 <_printf_i+0xce>
 800579a:	2220      	movs	r2, #32
 800579c:	6809      	ldr	r1, [r1, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	6022      	str	r2, [r4, #0]
 80057a2:	0022      	movs	r2, r4
 80057a4:	2178      	movs	r1, #120	; 0x78
 80057a6:	3245      	adds	r2, #69	; 0x45
 80057a8:	7011      	strb	r1, [r2, #0]
 80057aa:	4a27      	ldr	r2, [pc, #156]	; (8005848 <_printf_i+0x220>)
 80057ac:	e7e1      	b.n	8005772 <_printf_i+0x14a>
 80057ae:	0648      	lsls	r0, r1, #25
 80057b0:	d5e6      	bpl.n	8005780 <_printf_i+0x158>
 80057b2:	b2ad      	uxth	r5, r5
 80057b4:	e7e4      	b.n	8005780 <_printf_i+0x158>
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	680d      	ldr	r5, [r1, #0]
 80057ba:	1d10      	adds	r0, r2, #4
 80057bc:	6949      	ldr	r1, [r1, #20]
 80057be:	6018      	str	r0, [r3, #0]
 80057c0:	6813      	ldr	r3, [r2, #0]
 80057c2:	062e      	lsls	r6, r5, #24
 80057c4:	d501      	bpl.n	80057ca <_printf_i+0x1a2>
 80057c6:	6019      	str	r1, [r3, #0]
 80057c8:	e002      	b.n	80057d0 <_printf_i+0x1a8>
 80057ca:	066d      	lsls	r5, r5, #25
 80057cc:	d5fb      	bpl.n	80057c6 <_printf_i+0x19e>
 80057ce:	8019      	strh	r1, [r3, #0]
 80057d0:	2300      	movs	r3, #0
 80057d2:	9e04      	ldr	r6, [sp, #16]
 80057d4:	6123      	str	r3, [r4, #16]
 80057d6:	e7bb      	b.n	8005750 <_printf_i+0x128>
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	1d11      	adds	r1, r2, #4
 80057dc:	6019      	str	r1, [r3, #0]
 80057de:	6816      	ldr	r6, [r2, #0]
 80057e0:	2100      	movs	r1, #0
 80057e2:	0030      	movs	r0, r6
 80057e4:	6862      	ldr	r2, [r4, #4]
 80057e6:	f000 f831 	bl	800584c <memchr>
 80057ea:	2800      	cmp	r0, #0
 80057ec:	d001      	beq.n	80057f2 <_printf_i+0x1ca>
 80057ee:	1b80      	subs	r0, r0, r6
 80057f0:	6060      	str	r0, [r4, #4]
 80057f2:	6863      	ldr	r3, [r4, #4]
 80057f4:	6123      	str	r3, [r4, #16]
 80057f6:	2300      	movs	r3, #0
 80057f8:	9a04      	ldr	r2, [sp, #16]
 80057fa:	7013      	strb	r3, [r2, #0]
 80057fc:	e7a8      	b.n	8005750 <_printf_i+0x128>
 80057fe:	6923      	ldr	r3, [r4, #16]
 8005800:	0032      	movs	r2, r6
 8005802:	9906      	ldr	r1, [sp, #24]
 8005804:	9805      	ldr	r0, [sp, #20]
 8005806:	9d07      	ldr	r5, [sp, #28]
 8005808:	47a8      	blx	r5
 800580a:	1c43      	adds	r3, r0, #1
 800580c:	d0aa      	beq.n	8005764 <_printf_i+0x13c>
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	079b      	lsls	r3, r3, #30
 8005812:	d415      	bmi.n	8005840 <_printf_i+0x218>
 8005814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005816:	68e0      	ldr	r0, [r4, #12]
 8005818:	4298      	cmp	r0, r3
 800581a:	daa5      	bge.n	8005768 <_printf_i+0x140>
 800581c:	0018      	movs	r0, r3
 800581e:	e7a3      	b.n	8005768 <_printf_i+0x140>
 8005820:	0022      	movs	r2, r4
 8005822:	2301      	movs	r3, #1
 8005824:	9906      	ldr	r1, [sp, #24]
 8005826:	9805      	ldr	r0, [sp, #20]
 8005828:	9e07      	ldr	r6, [sp, #28]
 800582a:	3219      	adds	r2, #25
 800582c:	47b0      	blx	r6
 800582e:	1c43      	adds	r3, r0, #1
 8005830:	d098      	beq.n	8005764 <_printf_i+0x13c>
 8005832:	3501      	adds	r5, #1
 8005834:	68e3      	ldr	r3, [r4, #12]
 8005836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005838:	1a9b      	subs	r3, r3, r2
 800583a:	42ab      	cmp	r3, r5
 800583c:	dcf0      	bgt.n	8005820 <_printf_i+0x1f8>
 800583e:	e7e9      	b.n	8005814 <_printf_i+0x1ec>
 8005840:	2500      	movs	r5, #0
 8005842:	e7f7      	b.n	8005834 <_printf_i+0x20c>
 8005844:	08006f4d 	.word	0x08006f4d
 8005848:	08006f5e 	.word	0x08006f5e

0800584c <memchr>:
 800584c:	b2c9      	uxtb	r1, r1
 800584e:	1882      	adds	r2, r0, r2
 8005850:	4290      	cmp	r0, r2
 8005852:	d101      	bne.n	8005858 <memchr+0xc>
 8005854:	2000      	movs	r0, #0
 8005856:	4770      	bx	lr
 8005858:	7803      	ldrb	r3, [r0, #0]
 800585a:	428b      	cmp	r3, r1
 800585c:	d0fb      	beq.n	8005856 <memchr+0xa>
 800585e:	3001      	adds	r0, #1
 8005860:	e7f6      	b.n	8005850 <memchr+0x4>

08005862 <memmove>:
 8005862:	b510      	push	{r4, lr}
 8005864:	4288      	cmp	r0, r1
 8005866:	d902      	bls.n	800586e <memmove+0xc>
 8005868:	188b      	adds	r3, r1, r2
 800586a:	4298      	cmp	r0, r3
 800586c:	d303      	bcc.n	8005876 <memmove+0x14>
 800586e:	2300      	movs	r3, #0
 8005870:	e007      	b.n	8005882 <memmove+0x20>
 8005872:	5c8b      	ldrb	r3, [r1, r2]
 8005874:	5483      	strb	r3, [r0, r2]
 8005876:	3a01      	subs	r2, #1
 8005878:	d2fb      	bcs.n	8005872 <memmove+0x10>
 800587a:	bd10      	pop	{r4, pc}
 800587c:	5ccc      	ldrb	r4, [r1, r3]
 800587e:	54c4      	strb	r4, [r0, r3]
 8005880:	3301      	adds	r3, #1
 8005882:	429a      	cmp	r2, r3
 8005884:	d1fa      	bne.n	800587c <memmove+0x1a>
 8005886:	e7f8      	b.n	800587a <memmove+0x18>

08005888 <_free_r>:
 8005888:	b570      	push	{r4, r5, r6, lr}
 800588a:	0005      	movs	r5, r0
 800588c:	2900      	cmp	r1, #0
 800588e:	d010      	beq.n	80058b2 <_free_r+0x2a>
 8005890:	1f0c      	subs	r4, r1, #4
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	da00      	bge.n	800589a <_free_r+0x12>
 8005898:	18e4      	adds	r4, r4, r3
 800589a:	0028      	movs	r0, r5
 800589c:	f000 f918 	bl	8005ad0 <__malloc_lock>
 80058a0:	4a1d      	ldr	r2, [pc, #116]	; (8005918 <_free_r+0x90>)
 80058a2:	6813      	ldr	r3, [r2, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d105      	bne.n	80058b4 <_free_r+0x2c>
 80058a8:	6063      	str	r3, [r4, #4]
 80058aa:	6014      	str	r4, [r2, #0]
 80058ac:	0028      	movs	r0, r5
 80058ae:	f000 f917 	bl	8005ae0 <__malloc_unlock>
 80058b2:	bd70      	pop	{r4, r5, r6, pc}
 80058b4:	42a3      	cmp	r3, r4
 80058b6:	d908      	bls.n	80058ca <_free_r+0x42>
 80058b8:	6821      	ldr	r1, [r4, #0]
 80058ba:	1860      	adds	r0, r4, r1
 80058bc:	4283      	cmp	r3, r0
 80058be:	d1f3      	bne.n	80058a8 <_free_r+0x20>
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	1841      	adds	r1, r0, r1
 80058c6:	6021      	str	r1, [r4, #0]
 80058c8:	e7ee      	b.n	80058a8 <_free_r+0x20>
 80058ca:	001a      	movs	r2, r3
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <_free_r+0x4e>
 80058d2:	42a3      	cmp	r3, r4
 80058d4:	d9f9      	bls.n	80058ca <_free_r+0x42>
 80058d6:	6811      	ldr	r1, [r2, #0]
 80058d8:	1850      	adds	r0, r2, r1
 80058da:	42a0      	cmp	r0, r4
 80058dc:	d10b      	bne.n	80058f6 <_free_r+0x6e>
 80058de:	6820      	ldr	r0, [r4, #0]
 80058e0:	1809      	adds	r1, r1, r0
 80058e2:	1850      	adds	r0, r2, r1
 80058e4:	6011      	str	r1, [r2, #0]
 80058e6:	4283      	cmp	r3, r0
 80058e8:	d1e0      	bne.n	80058ac <_free_r+0x24>
 80058ea:	6818      	ldr	r0, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	1841      	adds	r1, r0, r1
 80058f0:	6011      	str	r1, [r2, #0]
 80058f2:	6053      	str	r3, [r2, #4]
 80058f4:	e7da      	b.n	80058ac <_free_r+0x24>
 80058f6:	42a0      	cmp	r0, r4
 80058f8:	d902      	bls.n	8005900 <_free_r+0x78>
 80058fa:	230c      	movs	r3, #12
 80058fc:	602b      	str	r3, [r5, #0]
 80058fe:	e7d5      	b.n	80058ac <_free_r+0x24>
 8005900:	6821      	ldr	r1, [r4, #0]
 8005902:	1860      	adds	r0, r4, r1
 8005904:	4283      	cmp	r3, r0
 8005906:	d103      	bne.n	8005910 <_free_r+0x88>
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	1841      	adds	r1, r0, r1
 800590e:	6021      	str	r1, [r4, #0]
 8005910:	6063      	str	r3, [r4, #4]
 8005912:	6054      	str	r4, [r2, #4]
 8005914:	e7ca      	b.n	80058ac <_free_r+0x24>
 8005916:	46c0      	nop			; (mov r8, r8)
 8005918:	20000178 	.word	0x20000178

0800591c <sbrk_aligned>:
 800591c:	b570      	push	{r4, r5, r6, lr}
 800591e:	4e0f      	ldr	r6, [pc, #60]	; (800595c <sbrk_aligned+0x40>)
 8005920:	000d      	movs	r5, r1
 8005922:	6831      	ldr	r1, [r6, #0]
 8005924:	0004      	movs	r4, r0
 8005926:	2900      	cmp	r1, #0
 8005928:	d102      	bne.n	8005930 <sbrk_aligned+0x14>
 800592a:	f000 f8bf 	bl	8005aac <_sbrk_r>
 800592e:	6030      	str	r0, [r6, #0]
 8005930:	0029      	movs	r1, r5
 8005932:	0020      	movs	r0, r4
 8005934:	f000 f8ba 	bl	8005aac <_sbrk_r>
 8005938:	1c43      	adds	r3, r0, #1
 800593a:	d00a      	beq.n	8005952 <sbrk_aligned+0x36>
 800593c:	2303      	movs	r3, #3
 800593e:	1cc5      	adds	r5, r0, #3
 8005940:	439d      	bics	r5, r3
 8005942:	42a8      	cmp	r0, r5
 8005944:	d007      	beq.n	8005956 <sbrk_aligned+0x3a>
 8005946:	1a29      	subs	r1, r5, r0
 8005948:	0020      	movs	r0, r4
 800594a:	f000 f8af 	bl	8005aac <_sbrk_r>
 800594e:	1c43      	adds	r3, r0, #1
 8005950:	d101      	bne.n	8005956 <sbrk_aligned+0x3a>
 8005952:	2501      	movs	r5, #1
 8005954:	426d      	negs	r5, r5
 8005956:	0028      	movs	r0, r5
 8005958:	bd70      	pop	{r4, r5, r6, pc}
 800595a:	46c0      	nop			; (mov r8, r8)
 800595c:	2000017c 	.word	0x2000017c

08005960 <_malloc_r>:
 8005960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005962:	2203      	movs	r2, #3
 8005964:	1ccb      	adds	r3, r1, #3
 8005966:	4393      	bics	r3, r2
 8005968:	3308      	adds	r3, #8
 800596a:	0006      	movs	r6, r0
 800596c:	001f      	movs	r7, r3
 800596e:	2b0c      	cmp	r3, #12
 8005970:	d232      	bcs.n	80059d8 <_malloc_r+0x78>
 8005972:	270c      	movs	r7, #12
 8005974:	42b9      	cmp	r1, r7
 8005976:	d831      	bhi.n	80059dc <_malloc_r+0x7c>
 8005978:	0030      	movs	r0, r6
 800597a:	f000 f8a9 	bl	8005ad0 <__malloc_lock>
 800597e:	4d32      	ldr	r5, [pc, #200]	; (8005a48 <_malloc_r+0xe8>)
 8005980:	682b      	ldr	r3, [r5, #0]
 8005982:	001c      	movs	r4, r3
 8005984:	2c00      	cmp	r4, #0
 8005986:	d12e      	bne.n	80059e6 <_malloc_r+0x86>
 8005988:	0039      	movs	r1, r7
 800598a:	0030      	movs	r0, r6
 800598c:	f7ff ffc6 	bl	800591c <sbrk_aligned>
 8005990:	0004      	movs	r4, r0
 8005992:	1c43      	adds	r3, r0, #1
 8005994:	d11e      	bne.n	80059d4 <_malloc_r+0x74>
 8005996:	682c      	ldr	r4, [r5, #0]
 8005998:	0025      	movs	r5, r4
 800599a:	2d00      	cmp	r5, #0
 800599c:	d14a      	bne.n	8005a34 <_malloc_r+0xd4>
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	0029      	movs	r1, r5
 80059a2:	18e3      	adds	r3, r4, r3
 80059a4:	0030      	movs	r0, r6
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	f000 f880 	bl	8005aac <_sbrk_r>
 80059ac:	9b01      	ldr	r3, [sp, #4]
 80059ae:	4283      	cmp	r3, r0
 80059b0:	d143      	bne.n	8005a3a <_malloc_r+0xda>
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	3703      	adds	r7, #3
 80059b6:	1aff      	subs	r7, r7, r3
 80059b8:	2303      	movs	r3, #3
 80059ba:	439f      	bics	r7, r3
 80059bc:	3708      	adds	r7, #8
 80059be:	2f0c      	cmp	r7, #12
 80059c0:	d200      	bcs.n	80059c4 <_malloc_r+0x64>
 80059c2:	270c      	movs	r7, #12
 80059c4:	0039      	movs	r1, r7
 80059c6:	0030      	movs	r0, r6
 80059c8:	f7ff ffa8 	bl	800591c <sbrk_aligned>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	d034      	beq.n	8005a3a <_malloc_r+0xda>
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	19df      	adds	r7, r3, r7
 80059d4:	6027      	str	r7, [r4, #0]
 80059d6:	e013      	b.n	8005a00 <_malloc_r+0xa0>
 80059d8:	2b00      	cmp	r3, #0
 80059da:	dacb      	bge.n	8005974 <_malloc_r+0x14>
 80059dc:	230c      	movs	r3, #12
 80059de:	2500      	movs	r5, #0
 80059e0:	6033      	str	r3, [r6, #0]
 80059e2:	0028      	movs	r0, r5
 80059e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059e6:	6822      	ldr	r2, [r4, #0]
 80059e8:	1bd1      	subs	r1, r2, r7
 80059ea:	d420      	bmi.n	8005a2e <_malloc_r+0xce>
 80059ec:	290b      	cmp	r1, #11
 80059ee:	d917      	bls.n	8005a20 <_malloc_r+0xc0>
 80059f0:	19e2      	adds	r2, r4, r7
 80059f2:	6027      	str	r7, [r4, #0]
 80059f4:	42a3      	cmp	r3, r4
 80059f6:	d111      	bne.n	8005a1c <_malloc_r+0xbc>
 80059f8:	602a      	str	r2, [r5, #0]
 80059fa:	6863      	ldr	r3, [r4, #4]
 80059fc:	6011      	str	r1, [r2, #0]
 80059fe:	6053      	str	r3, [r2, #4]
 8005a00:	0030      	movs	r0, r6
 8005a02:	0025      	movs	r5, r4
 8005a04:	f000 f86c 	bl	8005ae0 <__malloc_unlock>
 8005a08:	2207      	movs	r2, #7
 8005a0a:	350b      	adds	r5, #11
 8005a0c:	1d23      	adds	r3, r4, #4
 8005a0e:	4395      	bics	r5, r2
 8005a10:	1aea      	subs	r2, r5, r3
 8005a12:	429d      	cmp	r5, r3
 8005a14:	d0e5      	beq.n	80059e2 <_malloc_r+0x82>
 8005a16:	1b5b      	subs	r3, r3, r5
 8005a18:	50a3      	str	r3, [r4, r2]
 8005a1a:	e7e2      	b.n	80059e2 <_malloc_r+0x82>
 8005a1c:	605a      	str	r2, [r3, #4]
 8005a1e:	e7ec      	b.n	80059fa <_malloc_r+0x9a>
 8005a20:	6862      	ldr	r2, [r4, #4]
 8005a22:	42a3      	cmp	r3, r4
 8005a24:	d101      	bne.n	8005a2a <_malloc_r+0xca>
 8005a26:	602a      	str	r2, [r5, #0]
 8005a28:	e7ea      	b.n	8005a00 <_malloc_r+0xa0>
 8005a2a:	605a      	str	r2, [r3, #4]
 8005a2c:	e7e8      	b.n	8005a00 <_malloc_r+0xa0>
 8005a2e:	0023      	movs	r3, r4
 8005a30:	6864      	ldr	r4, [r4, #4]
 8005a32:	e7a7      	b.n	8005984 <_malloc_r+0x24>
 8005a34:	002c      	movs	r4, r5
 8005a36:	686d      	ldr	r5, [r5, #4]
 8005a38:	e7af      	b.n	800599a <_malloc_r+0x3a>
 8005a3a:	230c      	movs	r3, #12
 8005a3c:	0030      	movs	r0, r6
 8005a3e:	6033      	str	r3, [r6, #0]
 8005a40:	f000 f84e 	bl	8005ae0 <__malloc_unlock>
 8005a44:	e7cd      	b.n	80059e2 <_malloc_r+0x82>
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	20000178 	.word	0x20000178

08005a4c <_realloc_r>:
 8005a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a4e:	0007      	movs	r7, r0
 8005a50:	000e      	movs	r6, r1
 8005a52:	0014      	movs	r4, r2
 8005a54:	2900      	cmp	r1, #0
 8005a56:	d105      	bne.n	8005a64 <_realloc_r+0x18>
 8005a58:	0011      	movs	r1, r2
 8005a5a:	f7ff ff81 	bl	8005960 <_malloc_r>
 8005a5e:	0005      	movs	r5, r0
 8005a60:	0028      	movs	r0, r5
 8005a62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a64:	2a00      	cmp	r2, #0
 8005a66:	d103      	bne.n	8005a70 <_realloc_r+0x24>
 8005a68:	f7ff ff0e 	bl	8005888 <_free_r>
 8005a6c:	0025      	movs	r5, r4
 8005a6e:	e7f7      	b.n	8005a60 <_realloc_r+0x14>
 8005a70:	f000 f83e 	bl	8005af0 <_malloc_usable_size_r>
 8005a74:	9001      	str	r0, [sp, #4]
 8005a76:	4284      	cmp	r4, r0
 8005a78:	d803      	bhi.n	8005a82 <_realloc_r+0x36>
 8005a7a:	0035      	movs	r5, r6
 8005a7c:	0843      	lsrs	r3, r0, #1
 8005a7e:	42a3      	cmp	r3, r4
 8005a80:	d3ee      	bcc.n	8005a60 <_realloc_r+0x14>
 8005a82:	0021      	movs	r1, r4
 8005a84:	0038      	movs	r0, r7
 8005a86:	f7ff ff6b 	bl	8005960 <_malloc_r>
 8005a8a:	1e05      	subs	r5, r0, #0
 8005a8c:	d0e8      	beq.n	8005a60 <_realloc_r+0x14>
 8005a8e:	9b01      	ldr	r3, [sp, #4]
 8005a90:	0022      	movs	r2, r4
 8005a92:	429c      	cmp	r4, r3
 8005a94:	d900      	bls.n	8005a98 <_realloc_r+0x4c>
 8005a96:	001a      	movs	r2, r3
 8005a98:	0031      	movs	r1, r6
 8005a9a:	0028      	movs	r0, r5
 8005a9c:	f7ff fbc0 	bl	8005220 <memcpy>
 8005aa0:	0031      	movs	r1, r6
 8005aa2:	0038      	movs	r0, r7
 8005aa4:	f7ff fef0 	bl	8005888 <_free_r>
 8005aa8:	e7da      	b.n	8005a60 <_realloc_r+0x14>
	...

08005aac <_sbrk_r>:
 8005aac:	2300      	movs	r3, #0
 8005aae:	b570      	push	{r4, r5, r6, lr}
 8005ab0:	4d06      	ldr	r5, [pc, #24]	; (8005acc <_sbrk_r+0x20>)
 8005ab2:	0004      	movs	r4, r0
 8005ab4:	0008      	movs	r0, r1
 8005ab6:	602b      	str	r3, [r5, #0]
 8005ab8:	f7fd fb92 	bl	80031e0 <_sbrk>
 8005abc:	1c43      	adds	r3, r0, #1
 8005abe:	d103      	bne.n	8005ac8 <_sbrk_r+0x1c>
 8005ac0:	682b      	ldr	r3, [r5, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d000      	beq.n	8005ac8 <_sbrk_r+0x1c>
 8005ac6:	6023      	str	r3, [r4, #0]
 8005ac8:	bd70      	pop	{r4, r5, r6, pc}
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	20000180 	.word	0x20000180

08005ad0 <__malloc_lock>:
 8005ad0:	b510      	push	{r4, lr}
 8005ad2:	4802      	ldr	r0, [pc, #8]	; (8005adc <__malloc_lock+0xc>)
 8005ad4:	f000 f814 	bl	8005b00 <__retarget_lock_acquire_recursive>
 8005ad8:	bd10      	pop	{r4, pc}
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	20000184 	.word	0x20000184

08005ae0 <__malloc_unlock>:
 8005ae0:	b510      	push	{r4, lr}
 8005ae2:	4802      	ldr	r0, [pc, #8]	; (8005aec <__malloc_unlock+0xc>)
 8005ae4:	f000 f80d 	bl	8005b02 <__retarget_lock_release_recursive>
 8005ae8:	bd10      	pop	{r4, pc}
 8005aea:	46c0      	nop			; (mov r8, r8)
 8005aec:	20000184 	.word	0x20000184

08005af0 <_malloc_usable_size_r>:
 8005af0:	1f0b      	subs	r3, r1, #4
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	1f18      	subs	r0, r3, #4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	da01      	bge.n	8005afe <_malloc_usable_size_r+0xe>
 8005afa:	580b      	ldr	r3, [r1, r0]
 8005afc:	18c0      	adds	r0, r0, r3
 8005afe:	4770      	bx	lr

08005b00 <__retarget_lock_acquire_recursive>:
 8005b00:	4770      	bx	lr

08005b02 <__retarget_lock_release_recursive>:
 8005b02:	4770      	bx	lr

08005b04 <log10>:
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b06:	0004      	movs	r4, r0
 8005b08:	000d      	movs	r5, r1
 8005b0a:	f000 f89f 	bl	8005c4c <__ieee754_log10>
 8005b0e:	0022      	movs	r2, r4
 8005b10:	0006      	movs	r6, r0
 8005b12:	000f      	movs	r7, r1
 8005b14:	002b      	movs	r3, r5
 8005b16:	0020      	movs	r0, r4
 8005b18:	0029      	movs	r1, r5
 8005b1a:	f7fc fddf 	bl	80026dc <__aeabi_dcmpun>
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d115      	bne.n	8005b4e <log10+0x4a>
 8005b22:	2200      	movs	r2, #0
 8005b24:	2300      	movs	r3, #0
 8005b26:	0020      	movs	r0, r4
 8005b28:	0029      	movs	r1, r5
 8005b2a:	f7fa fbab 	bl	8000284 <__aeabi_dcmple>
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d00d      	beq.n	8005b4e <log10+0x4a>
 8005b32:	2200      	movs	r2, #0
 8005b34:	2300      	movs	r3, #0
 8005b36:	0020      	movs	r0, r4
 8005b38:	0029      	movs	r1, r5
 8005b3a:	f7fa fb93 	bl	8000264 <__aeabi_dcmpeq>
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d008      	beq.n	8005b54 <log10+0x50>
 8005b42:	f7ff fb43 	bl	80051cc <__errno>
 8005b46:	2322      	movs	r3, #34	; 0x22
 8005b48:	2600      	movs	r6, #0
 8005b4a:	4f07      	ldr	r7, [pc, #28]	; (8005b68 <log10+0x64>)
 8005b4c:	6003      	str	r3, [r0, #0]
 8005b4e:	0030      	movs	r0, r6
 8005b50:	0039      	movs	r1, r7
 8005b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b54:	f7ff fb3a 	bl	80051cc <__errno>
 8005b58:	2321      	movs	r3, #33	; 0x21
 8005b5a:	6003      	str	r3, [r0, #0]
 8005b5c:	4803      	ldr	r0, [pc, #12]	; (8005b6c <log10+0x68>)
 8005b5e:	f000 fef3 	bl	8006948 <nan>
 8005b62:	0006      	movs	r6, r0
 8005b64:	000f      	movs	r7, r1
 8005b66:	e7f2      	b.n	8005b4e <log10+0x4a>
 8005b68:	fff00000 	.word	0xfff00000
 8005b6c:	08006f41 	.word	0x08006f41

08005b70 <pow>:
 8005b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b72:	0014      	movs	r4, r2
 8005b74:	001d      	movs	r5, r3
 8005b76:	9000      	str	r0, [sp, #0]
 8005b78:	9101      	str	r1, [sp, #4]
 8005b7a:	f000 f8e9 	bl	8005d50 <__ieee754_pow>
 8005b7e:	0022      	movs	r2, r4
 8005b80:	0006      	movs	r6, r0
 8005b82:	000f      	movs	r7, r1
 8005b84:	002b      	movs	r3, r5
 8005b86:	0020      	movs	r0, r4
 8005b88:	0029      	movs	r1, r5
 8005b8a:	f7fc fda7 	bl	80026dc <__aeabi_dcmpun>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d13f      	bne.n	8005c12 <pow+0xa2>
 8005b92:	9800      	ldr	r0, [sp, #0]
 8005b94:	9901      	ldr	r1, [sp, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f7fa fb63 	bl	8000264 <__aeabi_dcmpeq>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d019      	beq.n	8005bd6 <pow+0x66>
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	0020      	movs	r0, r4
 8005ba8:	0029      	movs	r1, r5
 8005baa:	f7fa fb5b 	bl	8000264 <__aeabi_dcmpeq>
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d146      	bne.n	8005c40 <pow+0xd0>
 8005bb2:	0020      	movs	r0, r4
 8005bb4:	0029      	movs	r1, r5
 8005bb6:	f000 febf 	bl	8006938 <finite>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	d029      	beq.n	8005c12 <pow+0xa2>
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	0020      	movs	r0, r4
 8005bc4:	0029      	movs	r1, r5
 8005bc6:	f7fa fb53 	bl	8000270 <__aeabi_dcmplt>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	d021      	beq.n	8005c12 <pow+0xa2>
 8005bce:	f7ff fafd 	bl	80051cc <__errno>
 8005bd2:	2322      	movs	r3, #34	; 0x22
 8005bd4:	e01c      	b.n	8005c10 <pow+0xa0>
 8005bd6:	0030      	movs	r0, r6
 8005bd8:	0039      	movs	r1, r7
 8005bda:	f000 fead 	bl	8006938 <finite>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d11b      	bne.n	8005c1a <pow+0xaa>
 8005be2:	9800      	ldr	r0, [sp, #0]
 8005be4:	9901      	ldr	r1, [sp, #4]
 8005be6:	f000 fea7 	bl	8006938 <finite>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	d015      	beq.n	8005c1a <pow+0xaa>
 8005bee:	0020      	movs	r0, r4
 8005bf0:	0029      	movs	r1, r5
 8005bf2:	f000 fea1 	bl	8006938 <finite>
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d00f      	beq.n	8005c1a <pow+0xaa>
 8005bfa:	0032      	movs	r2, r6
 8005bfc:	003b      	movs	r3, r7
 8005bfe:	0030      	movs	r0, r6
 8005c00:	0039      	movs	r1, r7
 8005c02:	f7fc fd6b 	bl	80026dc <__aeabi_dcmpun>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d0e1      	beq.n	8005bce <pow+0x5e>
 8005c0a:	f7ff fadf 	bl	80051cc <__errno>
 8005c0e:	2321      	movs	r3, #33	; 0x21
 8005c10:	6003      	str	r3, [r0, #0]
 8005c12:	0030      	movs	r0, r6
 8005c14:	0039      	movs	r1, r7
 8005c16:	b003      	add	sp, #12
 8005c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	0030      	movs	r0, r6
 8005c20:	0039      	movs	r1, r7
 8005c22:	f7fa fb1f 	bl	8000264 <__aeabi_dcmpeq>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	d0f3      	beq.n	8005c12 <pow+0xa2>
 8005c2a:	9800      	ldr	r0, [sp, #0]
 8005c2c:	9901      	ldr	r1, [sp, #4]
 8005c2e:	f000 fe83 	bl	8006938 <finite>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	d0ed      	beq.n	8005c12 <pow+0xa2>
 8005c36:	0020      	movs	r0, r4
 8005c38:	0029      	movs	r1, r5
 8005c3a:	f000 fe7d 	bl	8006938 <finite>
 8005c3e:	e7c4      	b.n	8005bca <pow+0x5a>
 8005c40:	2600      	movs	r6, #0
 8005c42:	4f01      	ldr	r7, [pc, #4]	; (8005c48 <pow+0xd8>)
 8005c44:	e7e5      	b.n	8005c12 <pow+0xa2>
 8005c46:	46c0      	nop			; (mov r8, r8)
 8005c48:	3ff00000 	.word	0x3ff00000

08005c4c <__ieee754_log10>:
 8005c4c:	2280      	movs	r2, #128	; 0x80
 8005c4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c50:	000b      	movs	r3, r1
 8005c52:	0004      	movs	r4, r0
 8005c54:	000d      	movs	r5, r1
 8005c56:	b085      	sub	sp, #20
 8005c58:	0352      	lsls	r2, r2, #13
 8005c5a:	4291      	cmp	r1, r2
 8005c5c:	da26      	bge.n	8005cac <__ieee754_log10+0x60>
 8005c5e:	004a      	lsls	r2, r1, #1
 8005c60:	0852      	lsrs	r2, r2, #1
 8005c62:	4302      	orrs	r2, r0
 8005c64:	d107      	bne.n	8005c76 <__ieee754_log10+0x2a>
 8005c66:	2200      	movs	r2, #0
 8005c68:	2300      	movs	r3, #0
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	492d      	ldr	r1, [pc, #180]	; (8005d24 <__ieee754_log10+0xd8>)
 8005c6e:	f7fb fb35 	bl	80012dc <__aeabi_ddiv>
 8005c72:	b005      	add	sp, #20
 8005c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c76:	2900      	cmp	r1, #0
 8005c78:	da05      	bge.n	8005c86 <__ieee754_log10+0x3a>
 8005c7a:	0002      	movs	r2, r0
 8005c7c:	f7fc f99c 	bl	8001fb8 <__aeabi_dsub>
 8005c80:	2200      	movs	r2, #0
 8005c82:	2300      	movs	r3, #0
 8005c84:	e7f3      	b.n	8005c6e <__ieee754_log10+0x22>
 8005c86:	2200      	movs	r2, #0
 8005c88:	4b27      	ldr	r3, [pc, #156]	; (8005d28 <__ieee754_log10+0xdc>)
 8005c8a:	f7fb ff29 	bl	8001ae0 <__aeabi_dmul>
 8005c8e:	2236      	movs	r2, #54	; 0x36
 8005c90:	0004      	movs	r4, r0
 8005c92:	000d      	movs	r5, r1
 8005c94:	000b      	movs	r3, r1
 8005c96:	4252      	negs	r2, r2
 8005c98:	4924      	ldr	r1, [pc, #144]	; (8005d2c <__ieee754_log10+0xe0>)
 8005c9a:	428b      	cmp	r3, r1
 8005c9c:	dd08      	ble.n	8005cb0 <__ieee754_log10+0x64>
 8005c9e:	0022      	movs	r2, r4
 8005ca0:	002b      	movs	r3, r5
 8005ca2:	0020      	movs	r0, r4
 8005ca4:	0029      	movs	r1, r5
 8005ca6:	f7fa ffdd 	bl	8000c64 <__aeabi_dadd>
 8005caa:	e7e2      	b.n	8005c72 <__ieee754_log10+0x26>
 8005cac:	2200      	movs	r2, #0
 8005cae:	e7f3      	b.n	8005c98 <__ieee754_log10+0x4c>
 8005cb0:	491f      	ldr	r1, [pc, #124]	; (8005d30 <__ieee754_log10+0xe4>)
 8005cb2:	1518      	asrs	r0, r3, #20
 8005cb4:	1840      	adds	r0, r0, r1
 8005cb6:	1880      	adds	r0, r0, r2
 8005cb8:	0fc2      	lsrs	r2, r0, #31
 8005cba:	031b      	lsls	r3, r3, #12
 8005cbc:	0b1b      	lsrs	r3, r3, #12
 8005cbe:	1880      	adds	r0, r0, r2
 8005cc0:	9203      	str	r2, [sp, #12]
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	f7fc fd5e 	bl	8002784 <__aeabi_i2d>
 8005cc8:	9a03      	ldr	r2, [sp, #12]
 8005cca:	4b1a      	ldr	r3, [pc, #104]	; (8005d34 <__ieee754_log10+0xe8>)
 8005ccc:	0006      	movs	r6, r0
 8005cce:	1a9b      	subs	r3, r3, r2
 8005cd0:	9a00      	ldr	r2, [sp, #0]
 8005cd2:	051b      	lsls	r3, r3, #20
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	000f      	movs	r7, r1
 8005cd8:	0020      	movs	r0, r4
 8005cda:	0011      	movs	r1, r2
 8005cdc:	f000 feae 	bl	8006a3c <__ieee754_log>
 8005ce0:	4a15      	ldr	r2, [pc, #84]	; (8005d38 <__ieee754_log10+0xec>)
 8005ce2:	0004      	movs	r4, r0
 8005ce4:	000d      	movs	r5, r1
 8005ce6:	4b15      	ldr	r3, [pc, #84]	; (8005d3c <__ieee754_log10+0xf0>)
 8005ce8:	0030      	movs	r0, r6
 8005cea:	0039      	movs	r1, r7
 8005cec:	f7fb fef8 	bl	8001ae0 <__aeabi_dmul>
 8005cf0:	4a13      	ldr	r2, [pc, #76]	; (8005d40 <__ieee754_log10+0xf4>)
 8005cf2:	9000      	str	r0, [sp, #0]
 8005cf4:	9101      	str	r1, [sp, #4]
 8005cf6:	4b13      	ldr	r3, [pc, #76]	; (8005d44 <__ieee754_log10+0xf8>)
 8005cf8:	0020      	movs	r0, r4
 8005cfa:	0029      	movs	r1, r5
 8005cfc:	f7fb fef0 	bl	8001ae0 <__aeabi_dmul>
 8005d00:	0002      	movs	r2, r0
 8005d02:	000b      	movs	r3, r1
 8005d04:	9800      	ldr	r0, [sp, #0]
 8005d06:	9901      	ldr	r1, [sp, #4]
 8005d08:	f7fa ffac 	bl	8000c64 <__aeabi_dadd>
 8005d0c:	4a0e      	ldr	r2, [pc, #56]	; (8005d48 <__ieee754_log10+0xfc>)
 8005d0e:	4b0f      	ldr	r3, [pc, #60]	; (8005d4c <__ieee754_log10+0x100>)
 8005d10:	0004      	movs	r4, r0
 8005d12:	000d      	movs	r5, r1
 8005d14:	0030      	movs	r0, r6
 8005d16:	0039      	movs	r1, r7
 8005d18:	f7fb fee2 	bl	8001ae0 <__aeabi_dmul>
 8005d1c:	0002      	movs	r2, r0
 8005d1e:	000b      	movs	r3, r1
 8005d20:	e7bf      	b.n	8005ca2 <__ieee754_log10+0x56>
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	c3500000 	.word	0xc3500000
 8005d28:	43500000 	.word	0x43500000
 8005d2c:	7fefffff 	.word	0x7fefffff
 8005d30:	fffffc01 	.word	0xfffffc01
 8005d34:	000003ff 	.word	0x000003ff
 8005d38:	11f12b36 	.word	0x11f12b36
 8005d3c:	3d59fef3 	.word	0x3d59fef3
 8005d40:	1526e50e 	.word	0x1526e50e
 8005d44:	3fdbcb7b 	.word	0x3fdbcb7b
 8005d48:	509f6000 	.word	0x509f6000
 8005d4c:	3fd34413 	.word	0x3fd34413

08005d50 <__ieee754_pow>:
 8005d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d52:	b095      	sub	sp, #84	; 0x54
 8005d54:	9202      	str	r2, [sp, #8]
 8005d56:	9303      	str	r3, [sp, #12]
 8005d58:	9b03      	ldr	r3, [sp, #12]
 8005d5a:	9a03      	ldr	r2, [sp, #12]
 8005d5c:	9304      	str	r3, [sp, #16]
 8005d5e:	9b02      	ldr	r3, [sp, #8]
 8005d60:	0056      	lsls	r6, r2, #1
 8005d62:	001a      	movs	r2, r3
 8005d64:	0876      	lsrs	r6, r6, #1
 8005d66:	0007      	movs	r7, r0
 8005d68:	000d      	movs	r5, r1
 8005d6a:	4332      	orrs	r2, r6
 8005d6c:	d119      	bne.n	8005da2 <__ieee754_pow+0x52>
 8005d6e:	2180      	movs	r1, #128	; 0x80
 8005d70:	0309      	lsls	r1, r1, #12
 8005d72:	4069      	eors	r1, r5
 8005d74:	0002      	movs	r2, r0
 8005d76:	000b      	movs	r3, r1
 8005d78:	1892      	adds	r2, r2, r2
 8005d7a:	415b      	adcs	r3, r3
 8005d7c:	4989      	ldr	r1, [pc, #548]	; (8005fa4 <__ieee754_pow+0x254>)
 8005d7e:	428b      	cmp	r3, r1
 8005d80:	d806      	bhi.n	8005d90 <__ieee754_pow+0x40>
 8005d82:	d001      	beq.n	8005d88 <__ieee754_pow+0x38>
 8005d84:	f000 fcb6 	bl	80066f4 <__ieee754_pow+0x9a4>
 8005d88:	2a00      	cmp	r2, #0
 8005d8a:	d101      	bne.n	8005d90 <__ieee754_pow+0x40>
 8005d8c:	f000 fcb2 	bl	80066f4 <__ieee754_pow+0x9a4>
 8005d90:	9a02      	ldr	r2, [sp, #8]
 8005d92:	9b03      	ldr	r3, [sp, #12]
 8005d94:	0038      	movs	r0, r7
 8005d96:	0029      	movs	r1, r5
 8005d98:	f7fa ff64 	bl	8000c64 <__aeabi_dadd>
 8005d9c:	9000      	str	r0, [sp, #0]
 8005d9e:	9101      	str	r1, [sp, #4]
 8005da0:	e0ad      	b.n	8005efe <__ieee754_pow+0x1ae>
 8005da2:	4a81      	ldr	r2, [pc, #516]	; (8005fa8 <__ieee754_pow+0x258>)
 8005da4:	004c      	lsls	r4, r1, #1
 8005da6:	9108      	str	r1, [sp, #32]
 8005da8:	9000      	str	r0, [sp, #0]
 8005daa:	0864      	lsrs	r4, r4, #1
 8005dac:	4294      	cmp	r4, r2
 8005dae:	dc08      	bgt.n	8005dc2 <__ieee754_pow+0x72>
 8005db0:	d101      	bne.n	8005db6 <__ieee754_pow+0x66>
 8005db2:	2800      	cmp	r0, #0
 8005db4:	d1ec      	bne.n	8005d90 <__ieee754_pow+0x40>
 8005db6:	4a7c      	ldr	r2, [pc, #496]	; (8005fa8 <__ieee754_pow+0x258>)
 8005db8:	4296      	cmp	r6, r2
 8005dba:	dc02      	bgt.n	8005dc2 <__ieee754_pow+0x72>
 8005dbc:	d10c      	bne.n	8005dd8 <__ieee754_pow+0x88>
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <__ieee754_pow+0x88>
 8005dc2:	4b7a      	ldr	r3, [pc, #488]	; (8005fac <__ieee754_pow+0x25c>)
 8005dc4:	18eb      	adds	r3, r5, r3
 8005dc6:	433b      	orrs	r3, r7
 8005dc8:	d1e2      	bne.n	8005d90 <__ieee754_pow+0x40>
 8005dca:	2180      	movs	r1, #128	; 0x80
 8005dcc:	9803      	ldr	r0, [sp, #12]
 8005dce:	0309      	lsls	r1, r1, #12
 8005dd0:	4048      	eors	r0, r1
 8005dd2:	0003      	movs	r3, r0
 8005dd4:	9a02      	ldr	r2, [sp, #8]
 8005dd6:	e7cf      	b.n	8005d78 <__ieee754_pow+0x28>
 8005dd8:	2200      	movs	r2, #0
 8005dda:	9206      	str	r2, [sp, #24]
 8005ddc:	2d00      	cmp	r5, #0
 8005dde:	da69      	bge.n	8005eb4 <__ieee754_pow+0x164>
 8005de0:	4a73      	ldr	r2, [pc, #460]	; (8005fb0 <__ieee754_pow+0x260>)
 8005de2:	4296      	cmp	r6, r2
 8005de4:	dc64      	bgt.n	8005eb0 <__ieee754_pow+0x160>
 8005de6:	4a73      	ldr	r2, [pc, #460]	; (8005fb4 <__ieee754_pow+0x264>)
 8005de8:	4296      	cmp	r6, r2
 8005dea:	dd11      	ble.n	8005e10 <__ieee754_pow+0xc0>
 8005dec:	4972      	ldr	r1, [pc, #456]	; (8005fb8 <__ieee754_pow+0x268>)
 8005dee:	1532      	asrs	r2, r6, #20
 8005df0:	1852      	adds	r2, r2, r1
 8005df2:	2a14      	cmp	r2, #20
 8005df4:	dd3c      	ble.n	8005e70 <__ieee754_pow+0x120>
 8005df6:	2134      	movs	r1, #52	; 0x34
 8005df8:	1a8a      	subs	r2, r1, r2
 8005dfa:	9902      	ldr	r1, [sp, #8]
 8005dfc:	40d1      	lsrs	r1, r2
 8005dfe:	0008      	movs	r0, r1
 8005e00:	4090      	lsls	r0, r2
 8005e02:	4298      	cmp	r0, r3
 8005e04:	d104      	bne.n	8005e10 <__ieee754_pow+0xc0>
 8005e06:	2201      	movs	r2, #1
 8005e08:	4011      	ands	r1, r2
 8005e0a:	1892      	adds	r2, r2, r2
 8005e0c:	1a52      	subs	r2, r2, r1
 8005e0e:	9206      	str	r2, [sp, #24]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d03c      	beq.n	8005e8e <__ieee754_pow+0x13e>
 8005e14:	0038      	movs	r0, r7
 8005e16:	0029      	movs	r1, r5
 8005e18:	f000 fd8b 	bl	8006932 <fabs>
 8005e1c:	9000      	str	r0, [sp, #0]
 8005e1e:	9101      	str	r1, [sp, #4]
 8005e20:	2f00      	cmp	r7, #0
 8005e22:	d000      	beq.n	8005e26 <__ieee754_pow+0xd6>
 8005e24:	e094      	b.n	8005f50 <__ieee754_pow+0x200>
 8005e26:	2c00      	cmp	r4, #0
 8005e28:	d005      	beq.n	8005e36 <__ieee754_pow+0xe6>
 8005e2a:	4a64      	ldr	r2, [pc, #400]	; (8005fbc <__ieee754_pow+0x26c>)
 8005e2c:	00ab      	lsls	r3, r5, #2
 8005e2e:	089b      	lsrs	r3, r3, #2
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d000      	beq.n	8005e36 <__ieee754_pow+0xe6>
 8005e34:	e08c      	b.n	8005f50 <__ieee754_pow+0x200>
 8005e36:	9b04      	ldr	r3, [sp, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	da07      	bge.n	8005e4c <__ieee754_pow+0xfc>
 8005e3c:	9a00      	ldr	r2, [sp, #0]
 8005e3e:	9b01      	ldr	r3, [sp, #4]
 8005e40:	2000      	movs	r0, #0
 8005e42:	495e      	ldr	r1, [pc, #376]	; (8005fbc <__ieee754_pow+0x26c>)
 8005e44:	f7fb fa4a 	bl	80012dc <__aeabi_ddiv>
 8005e48:	9000      	str	r0, [sp, #0]
 8005e4a:	9101      	str	r1, [sp, #4]
 8005e4c:	9b08      	ldr	r3, [sp, #32]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	da55      	bge.n	8005efe <__ieee754_pow+0x1ae>
 8005e52:	4b56      	ldr	r3, [pc, #344]	; (8005fac <__ieee754_pow+0x25c>)
 8005e54:	18e4      	adds	r4, r4, r3
 8005e56:	9b06      	ldr	r3, [sp, #24]
 8005e58:	431c      	orrs	r4, r3
 8005e5a:	d000      	beq.n	8005e5e <__ieee754_pow+0x10e>
 8005e5c:	e06c      	b.n	8005f38 <__ieee754_pow+0x1e8>
 8005e5e:	9a00      	ldr	r2, [sp, #0]
 8005e60:	9b01      	ldr	r3, [sp, #4]
 8005e62:	0010      	movs	r0, r2
 8005e64:	0019      	movs	r1, r3
 8005e66:	f7fc f8a7 	bl	8001fb8 <__aeabi_dsub>
 8005e6a:	0002      	movs	r2, r0
 8005e6c:	000b      	movs	r3, r1
 8005e6e:	e01c      	b.n	8005eaa <__ieee754_pow+0x15a>
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1cf      	bne.n	8005e14 <__ieee754_pow+0xc4>
 8005e74:	3314      	adds	r3, #20
 8005e76:	1a9a      	subs	r2, r3, r2
 8005e78:	0033      	movs	r3, r6
 8005e7a:	4113      	asrs	r3, r2
 8005e7c:	0019      	movs	r1, r3
 8005e7e:	4091      	lsls	r1, r2
 8005e80:	42b1      	cmp	r1, r6
 8005e82:	d104      	bne.n	8005e8e <__ieee754_pow+0x13e>
 8005e84:	2201      	movs	r2, #1
 8005e86:	4013      	ands	r3, r2
 8005e88:	1892      	adds	r2, r2, r2
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	9306      	str	r3, [sp, #24]
 8005e8e:	4b4b      	ldr	r3, [pc, #300]	; (8005fbc <__ieee754_pow+0x26c>)
 8005e90:	429e      	cmp	r6, r3
 8005e92:	d138      	bne.n	8005f06 <__ieee754_pow+0x1b6>
 8005e94:	0038      	movs	r0, r7
 8005e96:	0029      	movs	r1, r5
 8005e98:	9b04      	ldr	r3, [sp, #16]
 8005e9a:	9000      	str	r0, [sp, #0]
 8005e9c:	9101      	str	r1, [sp, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	da2d      	bge.n	8005efe <__ieee754_pow+0x1ae>
 8005ea2:	003a      	movs	r2, r7
 8005ea4:	002b      	movs	r3, r5
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	4944      	ldr	r1, [pc, #272]	; (8005fbc <__ieee754_pow+0x26c>)
 8005eaa:	f7fb fa17 	bl	80012dc <__aeabi_ddiv>
 8005eae:	e775      	b.n	8005d9c <__ieee754_pow+0x4c>
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	9206      	str	r2, [sp, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1ad      	bne.n	8005e14 <__ieee754_pow+0xc4>
 8005eb8:	4b3b      	ldr	r3, [pc, #236]	; (8005fa8 <__ieee754_pow+0x258>)
 8005eba:	429e      	cmp	r6, r3
 8005ebc:	d1e7      	bne.n	8005e8e <__ieee754_pow+0x13e>
 8005ebe:	4b3b      	ldr	r3, [pc, #236]	; (8005fac <__ieee754_pow+0x25c>)
 8005ec0:	18e3      	adds	r3, r4, r3
 8005ec2:	431f      	orrs	r7, r3
 8005ec4:	d101      	bne.n	8005eca <__ieee754_pow+0x17a>
 8005ec6:	f000 fc15 	bl	80066f4 <__ieee754_pow+0x9a4>
 8005eca:	4b3a      	ldr	r3, [pc, #232]	; (8005fb4 <__ieee754_pow+0x264>)
 8005ecc:	429c      	cmp	r4, r3
 8005ece:	dd09      	ble.n	8005ee4 <__ieee754_pow+0x194>
 8005ed0:	9b04      	ldr	r3, [sp, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	da01      	bge.n	8005eda <__ieee754_pow+0x18a>
 8005ed6:	f000 fc11 	bl	80066fc <__ieee754_pow+0x9ac>
 8005eda:	9b02      	ldr	r3, [sp, #8]
 8005edc:	9c03      	ldr	r4, [sp, #12]
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	9401      	str	r4, [sp, #4]
 8005ee2:	e00c      	b.n	8005efe <__ieee754_pow+0x1ae>
 8005ee4:	9b04      	ldr	r3, [sp, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	db01      	blt.n	8005eee <__ieee754_pow+0x19e>
 8005eea:	f000 fc07 	bl	80066fc <__ieee754_pow+0x9ac>
 8005eee:	2280      	movs	r2, #128	; 0x80
 8005ef0:	0612      	lsls	r2, r2, #24
 8005ef2:	4694      	mov	ip, r2
 8005ef4:	9b02      	ldr	r3, [sp, #8]
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	9b03      	ldr	r3, [sp, #12]
 8005efa:	4463      	add	r3, ip
 8005efc:	9301      	str	r3, [sp, #4]
 8005efe:	9800      	ldr	r0, [sp, #0]
 8005f00:	9901      	ldr	r1, [sp, #4]
 8005f02:	b015      	add	sp, #84	; 0x54
 8005f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f06:	2380      	movs	r3, #128	; 0x80
 8005f08:	9a04      	ldr	r2, [sp, #16]
 8005f0a:	05db      	lsls	r3, r3, #23
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d106      	bne.n	8005f1e <__ieee754_pow+0x1ce>
 8005f10:	003a      	movs	r2, r7
 8005f12:	002b      	movs	r3, r5
 8005f14:	0038      	movs	r0, r7
 8005f16:	0029      	movs	r1, r5
 8005f18:	f7fb fde2 	bl	8001ae0 <__aeabi_dmul>
 8005f1c:	e73e      	b.n	8005d9c <__ieee754_pow+0x4c>
 8005f1e:	4b28      	ldr	r3, [pc, #160]	; (8005fc0 <__ieee754_pow+0x270>)
 8005f20:	9a04      	ldr	r2, [sp, #16]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d000      	beq.n	8005f28 <__ieee754_pow+0x1d8>
 8005f26:	e775      	b.n	8005e14 <__ieee754_pow+0xc4>
 8005f28:	2d00      	cmp	r5, #0
 8005f2a:	da00      	bge.n	8005f2e <__ieee754_pow+0x1de>
 8005f2c:	e772      	b.n	8005e14 <__ieee754_pow+0xc4>
 8005f2e:	0038      	movs	r0, r7
 8005f30:	0029      	movs	r1, r5
 8005f32:	f000 fc17 	bl	8006764 <__ieee754_sqrt>
 8005f36:	e731      	b.n	8005d9c <__ieee754_pow+0x4c>
 8005f38:	9b06      	ldr	r3, [sp, #24]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d1df      	bne.n	8005efe <__ieee754_pow+0x1ae>
 8005f3e:	9800      	ldr	r0, [sp, #0]
 8005f40:	2180      	movs	r1, #128	; 0x80
 8005f42:	0002      	movs	r2, r0
 8005f44:	9801      	ldr	r0, [sp, #4]
 8005f46:	0609      	lsls	r1, r1, #24
 8005f48:	1843      	adds	r3, r0, r1
 8005f4a:	9200      	str	r2, [sp, #0]
 8005f4c:	9301      	str	r3, [sp, #4]
 8005f4e:	e7d6      	b.n	8005efe <__ieee754_pow+0x1ae>
 8005f50:	0feb      	lsrs	r3, r5, #31
 8005f52:	3b01      	subs	r3, #1
 8005f54:	930e      	str	r3, [sp, #56]	; 0x38
 8005f56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f58:	9b06      	ldr	r3, [sp, #24]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	d104      	bne.n	8005f68 <__ieee754_pow+0x218>
 8005f5e:	003a      	movs	r2, r7
 8005f60:	002b      	movs	r3, r5
 8005f62:	0038      	movs	r0, r7
 8005f64:	0029      	movs	r1, r5
 8005f66:	e77e      	b.n	8005e66 <__ieee754_pow+0x116>
 8005f68:	4b16      	ldr	r3, [pc, #88]	; (8005fc4 <__ieee754_pow+0x274>)
 8005f6a:	429e      	cmp	r6, r3
 8005f6c:	dc00      	bgt.n	8005f70 <__ieee754_pow+0x220>
 8005f6e:	e0ef      	b.n	8006150 <__ieee754_pow+0x400>
 8005f70:	4b15      	ldr	r3, [pc, #84]	; (8005fc8 <__ieee754_pow+0x278>)
 8005f72:	429e      	cmp	r6, r3
 8005f74:	dd09      	ble.n	8005f8a <__ieee754_pow+0x23a>
 8005f76:	4b0f      	ldr	r3, [pc, #60]	; (8005fb4 <__ieee754_pow+0x264>)
 8005f78:	429c      	cmp	r4, r3
 8005f7a:	dc0c      	bgt.n	8005f96 <__ieee754_pow+0x246>
 8005f7c:	9b04      	ldr	r3, [sp, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	da0c      	bge.n	8005f9c <__ieee754_pow+0x24c>
 8005f82:	2000      	movs	r0, #0
 8005f84:	f000 fcce 	bl	8006924 <__math_oflow>
 8005f88:	e708      	b.n	8005d9c <__ieee754_pow+0x4c>
 8005f8a:	4b10      	ldr	r3, [pc, #64]	; (8005fcc <__ieee754_pow+0x27c>)
 8005f8c:	429c      	cmp	r4, r3
 8005f8e:	ddf5      	ble.n	8005f7c <__ieee754_pow+0x22c>
 8005f90:	4b0a      	ldr	r3, [pc, #40]	; (8005fbc <__ieee754_pow+0x26c>)
 8005f92:	429c      	cmp	r4, r3
 8005f94:	dd1c      	ble.n	8005fd0 <__ieee754_pow+0x280>
 8005f96:	9b04      	ldr	r3, [sp, #16]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	dcf2      	bgt.n	8005f82 <__ieee754_pow+0x232>
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	f000 fcba 	bl	8006916 <__math_uflow>
 8005fa2:	e6fb      	b.n	8005d9c <__ieee754_pow+0x4c>
 8005fa4:	fff00000 	.word	0xfff00000
 8005fa8:	7ff00000 	.word	0x7ff00000
 8005fac:	c0100000 	.word	0xc0100000
 8005fb0:	433fffff 	.word	0x433fffff
 8005fb4:	3fefffff 	.word	0x3fefffff
 8005fb8:	fffffc01 	.word	0xfffffc01
 8005fbc:	3ff00000 	.word	0x3ff00000
 8005fc0:	3fe00000 	.word	0x3fe00000
 8005fc4:	41e00000 	.word	0x41e00000
 8005fc8:	43f00000 	.word	0x43f00000
 8005fcc:	3feffffe 	.word	0x3feffffe
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	9800      	ldr	r0, [sp, #0]
 8005fd4:	9901      	ldr	r1, [sp, #4]
 8005fd6:	4b52      	ldr	r3, [pc, #328]	; (8006120 <__ieee754_pow+0x3d0>)
 8005fd8:	f7fb ffee 	bl	8001fb8 <__aeabi_dsub>
 8005fdc:	22c0      	movs	r2, #192	; 0xc0
 8005fde:	4b51      	ldr	r3, [pc, #324]	; (8006124 <__ieee754_pow+0x3d4>)
 8005fe0:	05d2      	lsls	r2, r2, #23
 8005fe2:	0004      	movs	r4, r0
 8005fe4:	000d      	movs	r5, r1
 8005fe6:	f7fb fd7b 	bl	8001ae0 <__aeabi_dmul>
 8005fea:	4a4f      	ldr	r2, [pc, #316]	; (8006128 <__ieee754_pow+0x3d8>)
 8005fec:	9000      	str	r0, [sp, #0]
 8005fee:	9101      	str	r1, [sp, #4]
 8005ff0:	4b4e      	ldr	r3, [pc, #312]	; (800612c <__ieee754_pow+0x3dc>)
 8005ff2:	0020      	movs	r0, r4
 8005ff4:	0029      	movs	r1, r5
 8005ff6:	f7fb fd73 	bl	8001ae0 <__aeabi_dmul>
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	9004      	str	r0, [sp, #16]
 8005ffe:	9105      	str	r1, [sp, #20]
 8006000:	4b4b      	ldr	r3, [pc, #300]	; (8006130 <__ieee754_pow+0x3e0>)
 8006002:	0020      	movs	r0, r4
 8006004:	0029      	movs	r1, r5
 8006006:	f7fb fd6b 	bl	8001ae0 <__aeabi_dmul>
 800600a:	0002      	movs	r2, r0
 800600c:	000b      	movs	r3, r1
 800600e:	4849      	ldr	r0, [pc, #292]	; (8006134 <__ieee754_pow+0x3e4>)
 8006010:	4949      	ldr	r1, [pc, #292]	; (8006138 <__ieee754_pow+0x3e8>)
 8006012:	f7fb ffd1 	bl	8001fb8 <__aeabi_dsub>
 8006016:	0022      	movs	r2, r4
 8006018:	002b      	movs	r3, r5
 800601a:	f7fb fd61 	bl	8001ae0 <__aeabi_dmul>
 800601e:	0002      	movs	r2, r0
 8006020:	000b      	movs	r3, r1
 8006022:	2000      	movs	r0, #0
 8006024:	4945      	ldr	r1, [pc, #276]	; (800613c <__ieee754_pow+0x3ec>)
 8006026:	f7fb ffc7 	bl	8001fb8 <__aeabi_dsub>
 800602a:	0022      	movs	r2, r4
 800602c:	0006      	movs	r6, r0
 800602e:	000f      	movs	r7, r1
 8006030:	002b      	movs	r3, r5
 8006032:	0020      	movs	r0, r4
 8006034:	0029      	movs	r1, r5
 8006036:	f7fb fd53 	bl	8001ae0 <__aeabi_dmul>
 800603a:	0002      	movs	r2, r0
 800603c:	000b      	movs	r3, r1
 800603e:	0030      	movs	r0, r6
 8006040:	0039      	movs	r1, r7
 8006042:	f7fb fd4d 	bl	8001ae0 <__aeabi_dmul>
 8006046:	4a3e      	ldr	r2, [pc, #248]	; (8006140 <__ieee754_pow+0x3f0>)
 8006048:	4b36      	ldr	r3, [pc, #216]	; (8006124 <__ieee754_pow+0x3d4>)
 800604a:	f7fb fd49 	bl	8001ae0 <__aeabi_dmul>
 800604e:	0002      	movs	r2, r0
 8006050:	000b      	movs	r3, r1
 8006052:	9804      	ldr	r0, [sp, #16]
 8006054:	9905      	ldr	r1, [sp, #20]
 8006056:	f7fb ffaf 	bl	8001fb8 <__aeabi_dsub>
 800605a:	0002      	movs	r2, r0
 800605c:	000b      	movs	r3, r1
 800605e:	0004      	movs	r4, r0
 8006060:	000d      	movs	r5, r1
 8006062:	9800      	ldr	r0, [sp, #0]
 8006064:	9901      	ldr	r1, [sp, #4]
 8006066:	f7fa fdfd 	bl	8000c64 <__aeabi_dadd>
 800606a:	9a00      	ldr	r2, [sp, #0]
 800606c:	9b01      	ldr	r3, [sp, #4]
 800606e:	2000      	movs	r0, #0
 8006070:	000f      	movs	r7, r1
 8006072:	0006      	movs	r6, r0
 8006074:	f7fb ffa0 	bl	8001fb8 <__aeabi_dsub>
 8006078:	0002      	movs	r2, r0
 800607a:	000b      	movs	r3, r1
 800607c:	0020      	movs	r0, r4
 800607e:	0029      	movs	r1, r5
 8006080:	f7fb ff9a 	bl	8001fb8 <__aeabi_dsub>
 8006084:	9b06      	ldr	r3, [sp, #24]
 8006086:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006088:	3b01      	subs	r3, #1
 800608a:	9004      	str	r0, [sp, #16]
 800608c:	9105      	str	r1, [sp, #20]
 800608e:	4313      	orrs	r3, r2
 8006090:	d000      	beq.n	8006094 <__ieee754_pow+0x344>
 8006092:	e1db      	b.n	800644c <__ieee754_pow+0x6fc>
 8006094:	2300      	movs	r3, #0
 8006096:	4c2b      	ldr	r4, [pc, #172]	; (8006144 <__ieee754_pow+0x3f4>)
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	9401      	str	r4, [sp, #4]
 800609c:	9c02      	ldr	r4, [sp, #8]
 800609e:	9d03      	ldr	r5, [sp, #12]
 80060a0:	9802      	ldr	r0, [sp, #8]
 80060a2:	9903      	ldr	r1, [sp, #12]
 80060a4:	2400      	movs	r4, #0
 80060a6:	002b      	movs	r3, r5
 80060a8:	0022      	movs	r2, r4
 80060aa:	f7fb ff85 	bl	8001fb8 <__aeabi_dsub>
 80060ae:	0032      	movs	r2, r6
 80060b0:	003b      	movs	r3, r7
 80060b2:	f7fb fd15 	bl	8001ae0 <__aeabi_dmul>
 80060b6:	9a02      	ldr	r2, [sp, #8]
 80060b8:	9b03      	ldr	r3, [sp, #12]
 80060ba:	9006      	str	r0, [sp, #24]
 80060bc:	9107      	str	r1, [sp, #28]
 80060be:	9804      	ldr	r0, [sp, #16]
 80060c0:	9905      	ldr	r1, [sp, #20]
 80060c2:	f7fb fd0d 	bl	8001ae0 <__aeabi_dmul>
 80060c6:	0002      	movs	r2, r0
 80060c8:	000b      	movs	r3, r1
 80060ca:	9806      	ldr	r0, [sp, #24]
 80060cc:	9907      	ldr	r1, [sp, #28]
 80060ce:	f7fa fdc9 	bl	8000c64 <__aeabi_dadd>
 80060d2:	0022      	movs	r2, r4
 80060d4:	002b      	movs	r3, r5
 80060d6:	9004      	str	r0, [sp, #16]
 80060d8:	9105      	str	r1, [sp, #20]
 80060da:	0030      	movs	r0, r6
 80060dc:	0039      	movs	r1, r7
 80060de:	f7fb fcff 	bl	8001ae0 <__aeabi_dmul>
 80060e2:	0006      	movs	r6, r0
 80060e4:	000f      	movs	r7, r1
 80060e6:	000b      	movs	r3, r1
 80060e8:	0002      	movs	r2, r0
 80060ea:	9804      	ldr	r0, [sp, #16]
 80060ec:	9905      	ldr	r1, [sp, #20]
 80060ee:	9606      	str	r6, [sp, #24]
 80060f0:	9707      	str	r7, [sp, #28]
 80060f2:	f7fa fdb7 	bl	8000c64 <__aeabi_dadd>
 80060f6:	4b14      	ldr	r3, [pc, #80]	; (8006148 <__ieee754_pow+0x3f8>)
 80060f8:	0005      	movs	r5, r0
 80060fa:	000c      	movs	r4, r1
 80060fc:	9108      	str	r1, [sp, #32]
 80060fe:	4299      	cmp	r1, r3
 8006100:	dc00      	bgt.n	8006104 <__ieee754_pow+0x3b4>
 8006102:	e2d6      	b.n	80066b2 <__ieee754_pow+0x962>
 8006104:	4b11      	ldr	r3, [pc, #68]	; (800614c <__ieee754_pow+0x3fc>)
 8006106:	18cb      	adds	r3, r1, r3
 8006108:	4303      	orrs	r3, r0
 800610a:	d100      	bne.n	800610e <__ieee754_pow+0x3be>
 800610c:	e1d8      	b.n	80064c0 <__ieee754_pow+0x770>
 800610e:	9800      	ldr	r0, [sp, #0]
 8006110:	9901      	ldr	r1, [sp, #4]
 8006112:	2300      	movs	r3, #0
 8006114:	2200      	movs	r2, #0
 8006116:	f7fa f8ab 	bl	8000270 <__aeabi_dcmplt>
 800611a:	1e43      	subs	r3, r0, #1
 800611c:	4198      	sbcs	r0, r3
 800611e:	e731      	b.n	8005f84 <__ieee754_pow+0x234>
 8006120:	3ff00000 	.word	0x3ff00000
 8006124:	3ff71547 	.word	0x3ff71547
 8006128:	f85ddf44 	.word	0xf85ddf44
 800612c:	3e54ae0b 	.word	0x3e54ae0b
 8006130:	3fd00000 	.word	0x3fd00000
 8006134:	55555555 	.word	0x55555555
 8006138:	3fd55555 	.word	0x3fd55555
 800613c:	3fe00000 	.word	0x3fe00000
 8006140:	652b82fe 	.word	0x652b82fe
 8006144:	bff00000 	.word	0xbff00000
 8006148:	408fffff 	.word	0x408fffff
 800614c:	bf700000 	.word	0xbf700000
 8006150:	4bc0      	ldr	r3, [pc, #768]	; (8006454 <__ieee754_pow+0x704>)
 8006152:	2200      	movs	r2, #0
 8006154:	422b      	tst	r3, r5
 8006156:	d10a      	bne.n	800616e <__ieee754_pow+0x41e>
 8006158:	9800      	ldr	r0, [sp, #0]
 800615a:	9901      	ldr	r1, [sp, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	4bbe      	ldr	r3, [pc, #760]	; (8006458 <__ieee754_pow+0x708>)
 8006160:	f7fb fcbe 	bl	8001ae0 <__aeabi_dmul>
 8006164:	2235      	movs	r2, #53	; 0x35
 8006166:	9000      	str	r0, [sp, #0]
 8006168:	9101      	str	r1, [sp, #4]
 800616a:	9c01      	ldr	r4, [sp, #4]
 800616c:	4252      	negs	r2, r2
 800616e:	49bb      	ldr	r1, [pc, #748]	; (800645c <__ieee754_pow+0x70c>)
 8006170:	1523      	asrs	r3, r4, #20
 8006172:	185b      	adds	r3, r3, r1
 8006174:	189b      	adds	r3, r3, r2
 8006176:	0324      	lsls	r4, r4, #12
 8006178:	4db9      	ldr	r5, [pc, #740]	; (8006460 <__ieee754_pow+0x710>)
 800617a:	930d      	str	r3, [sp, #52]	; 0x34
 800617c:	4bb9      	ldr	r3, [pc, #740]	; (8006464 <__ieee754_pow+0x714>)
 800617e:	0b22      	lsrs	r2, r4, #12
 8006180:	4315      	orrs	r5, r2
 8006182:	2400      	movs	r4, #0
 8006184:	429a      	cmp	r2, r3
 8006186:	dd09      	ble.n	800619c <__ieee754_pow+0x44c>
 8006188:	4bb7      	ldr	r3, [pc, #732]	; (8006468 <__ieee754_pow+0x718>)
 800618a:	3401      	adds	r4, #1
 800618c:	429a      	cmp	r2, r3
 800618e:	dd05      	ble.n	800619c <__ieee754_pow+0x44c>
 8006190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006192:	191b      	adds	r3, r3, r4
 8006194:	2400      	movs	r4, #0
 8006196:	930d      	str	r3, [sp, #52]	; 0x34
 8006198:	4bb4      	ldr	r3, [pc, #720]	; (800646c <__ieee754_pow+0x71c>)
 800619a:	18ed      	adds	r5, r5, r3
 800619c:	00e3      	lsls	r3, r4, #3
 800619e:	930f      	str	r3, [sp, #60]	; 0x3c
 80061a0:	4bb3      	ldr	r3, [pc, #716]	; (8006470 <__ieee754_pow+0x720>)
 80061a2:	00e2      	lsls	r2, r4, #3
 80061a4:	189b      	adds	r3, r3, r2
 80061a6:	9800      	ldr	r0, [sp, #0]
 80061a8:	9901      	ldr	r1, [sp, #4]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	0029      	movs	r1, r5
 80061b0:	0006      	movs	r6, r0
 80061b2:	920a      	str	r2, [sp, #40]	; 0x28
 80061b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80061b6:	f7fb feff 	bl	8001fb8 <__aeabi_dsub>
 80061ba:	0032      	movs	r2, r6
 80061bc:	002b      	movs	r3, r5
 80061be:	9010      	str	r0, [sp, #64]	; 0x40
 80061c0:	9111      	str	r1, [sp, #68]	; 0x44
 80061c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80061c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061c6:	f7fa fd4d 	bl	8000c64 <__aeabi_dadd>
 80061ca:	0002      	movs	r2, r0
 80061cc:	000b      	movs	r3, r1
 80061ce:	2000      	movs	r0, #0
 80061d0:	49a3      	ldr	r1, [pc, #652]	; (8006460 <__ieee754_pow+0x710>)
 80061d2:	f7fb f883 	bl	80012dc <__aeabi_ddiv>
 80061d6:	0002      	movs	r2, r0
 80061d8:	000b      	movs	r3, r1
 80061da:	9012      	str	r0, [sp, #72]	; 0x48
 80061dc:	9113      	str	r1, [sp, #76]	; 0x4c
 80061de:	9810      	ldr	r0, [sp, #64]	; 0x40
 80061e0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80061e2:	f7fb fc7d 	bl	8001ae0 <__aeabi_dmul>
 80061e6:	9008      	str	r0, [sp, #32]
 80061e8:	9109      	str	r1, [sp, #36]	; 0x24
 80061ea:	9a08      	ldr	r2, [sp, #32]
 80061ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ee:	2180      	movs	r1, #128	; 0x80
 80061f0:	9204      	str	r2, [sp, #16]
 80061f2:	9305      	str	r3, [sp, #20]
 80061f4:	2300      	movs	r3, #0
 80061f6:	002f      	movs	r7, r5
 80061f8:	0589      	lsls	r1, r1, #22
 80061fa:	106d      	asrs	r5, r5, #1
 80061fc:	430d      	orrs	r5, r1
 80061fe:	2180      	movs	r1, #128	; 0x80
 8006200:	9304      	str	r3, [sp, #16]
 8006202:	9a04      	ldr	r2, [sp, #16]
 8006204:	9b05      	ldr	r3, [sp, #20]
 8006206:	9200      	str	r2, [sp, #0]
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	0309      	lsls	r1, r1, #12
 800620e:	186d      	adds	r5, r5, r1
 8006210:	04a1      	lsls	r1, r4, #18
 8006212:	186b      	adds	r3, r5, r1
 8006214:	9800      	ldr	r0, [sp, #0]
 8006216:	9901      	ldr	r1, [sp, #4]
 8006218:	0014      	movs	r4, r2
 800621a:	001d      	movs	r5, r3
 800621c:	f7fb fc60 	bl	8001ae0 <__aeabi_dmul>
 8006220:	0002      	movs	r2, r0
 8006222:	000b      	movs	r3, r1
 8006224:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006226:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006228:	f7fb fec6 	bl	8001fb8 <__aeabi_dsub>
 800622c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800622e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006230:	9010      	str	r0, [sp, #64]	; 0x40
 8006232:	9111      	str	r1, [sp, #68]	; 0x44
 8006234:	0020      	movs	r0, r4
 8006236:	0029      	movs	r1, r5
 8006238:	f7fb febe 	bl	8001fb8 <__aeabi_dsub>
 800623c:	0002      	movs	r2, r0
 800623e:	000b      	movs	r3, r1
 8006240:	0030      	movs	r0, r6
 8006242:	0039      	movs	r1, r7
 8006244:	f7fb feb8 	bl	8001fb8 <__aeabi_dsub>
 8006248:	9a00      	ldr	r2, [sp, #0]
 800624a:	9b01      	ldr	r3, [sp, #4]
 800624c:	f7fb fc48 	bl	8001ae0 <__aeabi_dmul>
 8006250:	0002      	movs	r2, r0
 8006252:	000b      	movs	r3, r1
 8006254:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006256:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006258:	f7fb feae 	bl	8001fb8 <__aeabi_dsub>
 800625c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800625e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006260:	f7fb fc3e 	bl	8001ae0 <__aeabi_dmul>
 8006264:	9a08      	ldr	r2, [sp, #32]
 8006266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006268:	900a      	str	r0, [sp, #40]	; 0x28
 800626a:	910b      	str	r1, [sp, #44]	; 0x2c
 800626c:	0010      	movs	r0, r2
 800626e:	0019      	movs	r1, r3
 8006270:	f7fb fc36 	bl	8001ae0 <__aeabi_dmul>
 8006274:	0006      	movs	r6, r0
 8006276:	000f      	movs	r7, r1
 8006278:	4a7e      	ldr	r2, [pc, #504]	; (8006474 <__ieee754_pow+0x724>)
 800627a:	4b7f      	ldr	r3, [pc, #508]	; (8006478 <__ieee754_pow+0x728>)
 800627c:	f7fb fc30 	bl	8001ae0 <__aeabi_dmul>
 8006280:	4a7e      	ldr	r2, [pc, #504]	; (800647c <__ieee754_pow+0x72c>)
 8006282:	4b7f      	ldr	r3, [pc, #508]	; (8006480 <__ieee754_pow+0x730>)
 8006284:	f7fa fcee 	bl	8000c64 <__aeabi_dadd>
 8006288:	0032      	movs	r2, r6
 800628a:	003b      	movs	r3, r7
 800628c:	f7fb fc28 	bl	8001ae0 <__aeabi_dmul>
 8006290:	4a7c      	ldr	r2, [pc, #496]	; (8006484 <__ieee754_pow+0x734>)
 8006292:	4b7d      	ldr	r3, [pc, #500]	; (8006488 <__ieee754_pow+0x738>)
 8006294:	f7fa fce6 	bl	8000c64 <__aeabi_dadd>
 8006298:	0032      	movs	r2, r6
 800629a:	003b      	movs	r3, r7
 800629c:	f7fb fc20 	bl	8001ae0 <__aeabi_dmul>
 80062a0:	4a7a      	ldr	r2, [pc, #488]	; (800648c <__ieee754_pow+0x73c>)
 80062a2:	4b7b      	ldr	r3, [pc, #492]	; (8006490 <__ieee754_pow+0x740>)
 80062a4:	f7fa fcde 	bl	8000c64 <__aeabi_dadd>
 80062a8:	0032      	movs	r2, r6
 80062aa:	003b      	movs	r3, r7
 80062ac:	f7fb fc18 	bl	8001ae0 <__aeabi_dmul>
 80062b0:	4a78      	ldr	r2, [pc, #480]	; (8006494 <__ieee754_pow+0x744>)
 80062b2:	4b79      	ldr	r3, [pc, #484]	; (8006498 <__ieee754_pow+0x748>)
 80062b4:	f7fa fcd6 	bl	8000c64 <__aeabi_dadd>
 80062b8:	0032      	movs	r2, r6
 80062ba:	003b      	movs	r3, r7
 80062bc:	f7fb fc10 	bl	8001ae0 <__aeabi_dmul>
 80062c0:	4a76      	ldr	r2, [pc, #472]	; (800649c <__ieee754_pow+0x74c>)
 80062c2:	4b77      	ldr	r3, [pc, #476]	; (80064a0 <__ieee754_pow+0x750>)
 80062c4:	f7fa fcce 	bl	8000c64 <__aeabi_dadd>
 80062c8:	0032      	movs	r2, r6
 80062ca:	0004      	movs	r4, r0
 80062cc:	000d      	movs	r5, r1
 80062ce:	003b      	movs	r3, r7
 80062d0:	0030      	movs	r0, r6
 80062d2:	0039      	movs	r1, r7
 80062d4:	f7fb fc04 	bl	8001ae0 <__aeabi_dmul>
 80062d8:	0002      	movs	r2, r0
 80062da:	000b      	movs	r3, r1
 80062dc:	0020      	movs	r0, r4
 80062de:	0029      	movs	r1, r5
 80062e0:	f7fb fbfe 	bl	8001ae0 <__aeabi_dmul>
 80062e4:	9a00      	ldr	r2, [sp, #0]
 80062e6:	9b01      	ldr	r3, [sp, #4]
 80062e8:	0004      	movs	r4, r0
 80062ea:	000d      	movs	r5, r1
 80062ec:	9808      	ldr	r0, [sp, #32]
 80062ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062f0:	f7fa fcb8 	bl	8000c64 <__aeabi_dadd>
 80062f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062f8:	f7fb fbf2 	bl	8001ae0 <__aeabi_dmul>
 80062fc:	0022      	movs	r2, r4
 80062fe:	002b      	movs	r3, r5
 8006300:	f7fa fcb0 	bl	8000c64 <__aeabi_dadd>
 8006304:	9a00      	ldr	r2, [sp, #0]
 8006306:	9b01      	ldr	r3, [sp, #4]
 8006308:	9010      	str	r0, [sp, #64]	; 0x40
 800630a:	9111      	str	r1, [sp, #68]	; 0x44
 800630c:	0010      	movs	r0, r2
 800630e:	0019      	movs	r1, r3
 8006310:	f7fb fbe6 	bl	8001ae0 <__aeabi_dmul>
 8006314:	2200      	movs	r2, #0
 8006316:	4b63      	ldr	r3, [pc, #396]	; (80064a4 <__ieee754_pow+0x754>)
 8006318:	0004      	movs	r4, r0
 800631a:	000d      	movs	r5, r1
 800631c:	f7fa fca2 	bl	8000c64 <__aeabi_dadd>
 8006320:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006322:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006324:	f7fa fc9e 	bl	8000c64 <__aeabi_dadd>
 8006328:	2600      	movs	r6, #0
 800632a:	000f      	movs	r7, r1
 800632c:	0032      	movs	r2, r6
 800632e:	000b      	movs	r3, r1
 8006330:	9800      	ldr	r0, [sp, #0]
 8006332:	9901      	ldr	r1, [sp, #4]
 8006334:	f7fb fbd4 	bl	8001ae0 <__aeabi_dmul>
 8006338:	2200      	movs	r2, #0
 800633a:	9000      	str	r0, [sp, #0]
 800633c:	9101      	str	r1, [sp, #4]
 800633e:	4b59      	ldr	r3, [pc, #356]	; (80064a4 <__ieee754_pow+0x754>)
 8006340:	0030      	movs	r0, r6
 8006342:	0039      	movs	r1, r7
 8006344:	f7fb fe38 	bl	8001fb8 <__aeabi_dsub>
 8006348:	0022      	movs	r2, r4
 800634a:	002b      	movs	r3, r5
 800634c:	f7fb fe34 	bl	8001fb8 <__aeabi_dsub>
 8006350:	0002      	movs	r2, r0
 8006352:	000b      	movs	r3, r1
 8006354:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006356:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006358:	f7fb fe2e 	bl	8001fb8 <__aeabi_dsub>
 800635c:	9a08      	ldr	r2, [sp, #32]
 800635e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006360:	f7fb fbbe 	bl	8001ae0 <__aeabi_dmul>
 8006364:	0032      	movs	r2, r6
 8006366:	0004      	movs	r4, r0
 8006368:	000d      	movs	r5, r1
 800636a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800636c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800636e:	003b      	movs	r3, r7
 8006370:	f7fb fbb6 	bl	8001ae0 <__aeabi_dmul>
 8006374:	0002      	movs	r2, r0
 8006376:	000b      	movs	r3, r1
 8006378:	0020      	movs	r0, r4
 800637a:	0029      	movs	r1, r5
 800637c:	f7fa fc72 	bl	8000c64 <__aeabi_dadd>
 8006380:	0004      	movs	r4, r0
 8006382:	000d      	movs	r5, r1
 8006384:	0002      	movs	r2, r0
 8006386:	000b      	movs	r3, r1
 8006388:	9800      	ldr	r0, [sp, #0]
 800638a:	9901      	ldr	r1, [sp, #4]
 800638c:	f7fa fc6a 	bl	8000c64 <__aeabi_dadd>
 8006390:	2600      	movs	r6, #0
 8006392:	22e0      	movs	r2, #224	; 0xe0
 8006394:	4b44      	ldr	r3, [pc, #272]	; (80064a8 <__ieee754_pow+0x758>)
 8006396:	0612      	lsls	r2, r2, #24
 8006398:	0030      	movs	r0, r6
 800639a:	000f      	movs	r7, r1
 800639c:	f7fb fba0 	bl	8001ae0 <__aeabi_dmul>
 80063a0:	9008      	str	r0, [sp, #32]
 80063a2:	9109      	str	r1, [sp, #36]	; 0x24
 80063a4:	9a00      	ldr	r2, [sp, #0]
 80063a6:	9b01      	ldr	r3, [sp, #4]
 80063a8:	0039      	movs	r1, r7
 80063aa:	0030      	movs	r0, r6
 80063ac:	f7fb fe04 	bl	8001fb8 <__aeabi_dsub>
 80063b0:	0002      	movs	r2, r0
 80063b2:	000b      	movs	r3, r1
 80063b4:	0020      	movs	r0, r4
 80063b6:	0029      	movs	r1, r5
 80063b8:	f7fb fdfe 	bl	8001fb8 <__aeabi_dsub>
 80063bc:	4a3b      	ldr	r2, [pc, #236]	; (80064ac <__ieee754_pow+0x75c>)
 80063be:	4b3a      	ldr	r3, [pc, #232]	; (80064a8 <__ieee754_pow+0x758>)
 80063c0:	f7fb fb8e 	bl	8001ae0 <__aeabi_dmul>
 80063c4:	4a3a      	ldr	r2, [pc, #232]	; (80064b0 <__ieee754_pow+0x760>)
 80063c6:	0004      	movs	r4, r0
 80063c8:	000d      	movs	r5, r1
 80063ca:	4b3a      	ldr	r3, [pc, #232]	; (80064b4 <__ieee754_pow+0x764>)
 80063cc:	0039      	movs	r1, r7
 80063ce:	0030      	movs	r0, r6
 80063d0:	f7fb fb86 	bl	8001ae0 <__aeabi_dmul>
 80063d4:	0002      	movs	r2, r0
 80063d6:	000b      	movs	r3, r1
 80063d8:	0020      	movs	r0, r4
 80063da:	0029      	movs	r1, r5
 80063dc:	f7fa fc42 	bl	8000c64 <__aeabi_dadd>
 80063e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063e2:	4b35      	ldr	r3, [pc, #212]	; (80064b8 <__ieee754_pow+0x768>)
 80063e4:	189b      	adds	r3, r3, r2
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f7fa fc3b 	bl	8000c64 <__aeabi_dadd>
 80063ee:	900a      	str	r0, [sp, #40]	; 0x28
 80063f0:	910b      	str	r1, [sp, #44]	; 0x2c
 80063f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80063f4:	f7fc f9c6 	bl	8002784 <__aeabi_i2d>
 80063f8:	0004      	movs	r4, r0
 80063fa:	000d      	movs	r5, r1
 80063fc:	9808      	ldr	r0, [sp, #32]
 80063fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006400:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006402:	4b2e      	ldr	r3, [pc, #184]	; (80064bc <__ieee754_pow+0x76c>)
 8006404:	189b      	adds	r3, r3, r2
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	9200      	str	r2, [sp, #0]
 800640c:	9301      	str	r3, [sp, #4]
 800640e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006412:	f7fa fc27 	bl	8000c64 <__aeabi_dadd>
 8006416:	9a00      	ldr	r2, [sp, #0]
 8006418:	9b01      	ldr	r3, [sp, #4]
 800641a:	f7fa fc23 	bl	8000c64 <__aeabi_dadd>
 800641e:	0022      	movs	r2, r4
 8006420:	002b      	movs	r3, r5
 8006422:	f7fa fc1f 	bl	8000c64 <__aeabi_dadd>
 8006426:	0022      	movs	r2, r4
 8006428:	002b      	movs	r3, r5
 800642a:	0030      	movs	r0, r6
 800642c:	000f      	movs	r7, r1
 800642e:	f7fb fdc3 	bl	8001fb8 <__aeabi_dsub>
 8006432:	9a00      	ldr	r2, [sp, #0]
 8006434:	9b01      	ldr	r3, [sp, #4]
 8006436:	f7fb fdbf 	bl	8001fb8 <__aeabi_dsub>
 800643a:	9a08      	ldr	r2, [sp, #32]
 800643c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800643e:	f7fb fdbb 	bl	8001fb8 <__aeabi_dsub>
 8006442:	0002      	movs	r2, r0
 8006444:	000b      	movs	r3, r1
 8006446:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006448:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800644a:	e619      	b.n	8006080 <__ieee754_pow+0x330>
 800644c:	2300      	movs	r3, #0
 800644e:	4c04      	ldr	r4, [pc, #16]	; (8006460 <__ieee754_pow+0x710>)
 8006450:	e622      	b.n	8006098 <__ieee754_pow+0x348>
 8006452:	46c0      	nop			; (mov r8, r8)
 8006454:	7ff00000 	.word	0x7ff00000
 8006458:	43400000 	.word	0x43400000
 800645c:	fffffc01 	.word	0xfffffc01
 8006460:	3ff00000 	.word	0x3ff00000
 8006464:	0003988e 	.word	0x0003988e
 8006468:	000bb679 	.word	0x000bb679
 800646c:	fff00000 	.word	0xfff00000
 8006470:	08006f70 	.word	0x08006f70
 8006474:	4a454eef 	.word	0x4a454eef
 8006478:	3fca7e28 	.word	0x3fca7e28
 800647c:	93c9db65 	.word	0x93c9db65
 8006480:	3fcd864a 	.word	0x3fcd864a
 8006484:	a91d4101 	.word	0xa91d4101
 8006488:	3fd17460 	.word	0x3fd17460
 800648c:	518f264d 	.word	0x518f264d
 8006490:	3fd55555 	.word	0x3fd55555
 8006494:	db6fabff 	.word	0xdb6fabff
 8006498:	3fdb6db6 	.word	0x3fdb6db6
 800649c:	33333303 	.word	0x33333303
 80064a0:	3fe33333 	.word	0x3fe33333
 80064a4:	40080000 	.word	0x40080000
 80064a8:	3feec709 	.word	0x3feec709
 80064ac:	dc3a03fd 	.word	0xdc3a03fd
 80064b0:	145b01f5 	.word	0x145b01f5
 80064b4:	be3e2fe0 	.word	0xbe3e2fe0
 80064b8:	08006f90 	.word	0x08006f90
 80064bc:	08006f80 	.word	0x08006f80
 80064c0:	4a90      	ldr	r2, [pc, #576]	; (8006704 <__ieee754_pow+0x9b4>)
 80064c2:	4b91      	ldr	r3, [pc, #580]	; (8006708 <__ieee754_pow+0x9b8>)
 80064c4:	9804      	ldr	r0, [sp, #16]
 80064c6:	9905      	ldr	r1, [sp, #20]
 80064c8:	f7fa fbcc 	bl	8000c64 <__aeabi_dadd>
 80064cc:	0032      	movs	r2, r6
 80064ce:	9002      	str	r0, [sp, #8]
 80064d0:	9103      	str	r1, [sp, #12]
 80064d2:	003b      	movs	r3, r7
 80064d4:	0028      	movs	r0, r5
 80064d6:	0021      	movs	r1, r4
 80064d8:	f7fb fd6e 	bl	8001fb8 <__aeabi_dsub>
 80064dc:	0002      	movs	r2, r0
 80064de:	000b      	movs	r3, r1
 80064e0:	9802      	ldr	r0, [sp, #8]
 80064e2:	9903      	ldr	r1, [sp, #12]
 80064e4:	f7f9 fed8 	bl	8000298 <__aeabi_dcmpgt>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d000      	beq.n	80064ee <__ieee754_pow+0x79e>
 80064ec:	e60f      	b.n	800610e <__ieee754_pow+0x3be>
 80064ee:	2100      	movs	r1, #0
 80064f0:	4a86      	ldr	r2, [pc, #536]	; (800670c <__ieee754_pow+0x9bc>)
 80064f2:	0063      	lsls	r3, r4, #1
 80064f4:	085b      	lsrs	r3, r3, #1
 80064f6:	9102      	str	r1, [sp, #8]
 80064f8:	4293      	cmp	r3, r2
 80064fa:	dd25      	ble.n	8006548 <__ieee754_pow+0x7f8>
 80064fc:	4a84      	ldr	r2, [pc, #528]	; (8006710 <__ieee754_pow+0x9c0>)
 80064fe:	151b      	asrs	r3, r3, #20
 8006500:	189b      	adds	r3, r3, r2
 8006502:	2280      	movs	r2, #128	; 0x80
 8006504:	0352      	lsls	r2, r2, #13
 8006506:	4694      	mov	ip, r2
 8006508:	411a      	asrs	r2, r3
 800650a:	1914      	adds	r4, r2, r4
 800650c:	4b81      	ldr	r3, [pc, #516]	; (8006714 <__ieee754_pow+0x9c4>)
 800650e:	0060      	lsls	r0, r4, #1
 8006510:	4d81      	ldr	r5, [pc, #516]	; (8006718 <__ieee754_pow+0x9c8>)
 8006512:	0d40      	lsrs	r0, r0, #21
 8006514:	18c0      	adds	r0, r0, r3
 8006516:	4105      	asrs	r5, r0
 8006518:	0021      	movs	r1, r4
 800651a:	43a9      	bics	r1, r5
 800651c:	000b      	movs	r3, r1
 800651e:	4661      	mov	r1, ip
 8006520:	0324      	lsls	r4, r4, #12
 8006522:	0b24      	lsrs	r4, r4, #12
 8006524:	4321      	orrs	r1, r4
 8006526:	2414      	movs	r4, #20
 8006528:	1a20      	subs	r0, r4, r0
 800652a:	4101      	asrs	r1, r0
 800652c:	9102      	str	r1, [sp, #8]
 800652e:	9908      	ldr	r1, [sp, #32]
 8006530:	2200      	movs	r2, #0
 8006532:	2900      	cmp	r1, #0
 8006534:	da02      	bge.n	800653c <__ieee754_pow+0x7ec>
 8006536:	9902      	ldr	r1, [sp, #8]
 8006538:	4249      	negs	r1, r1
 800653a:	9102      	str	r1, [sp, #8]
 800653c:	0030      	movs	r0, r6
 800653e:	0039      	movs	r1, r7
 8006540:	f7fb fd3a 	bl	8001fb8 <__aeabi_dsub>
 8006544:	9006      	str	r0, [sp, #24]
 8006546:	9107      	str	r1, [sp, #28]
 8006548:	9a04      	ldr	r2, [sp, #16]
 800654a:	9b05      	ldr	r3, [sp, #20]
 800654c:	9806      	ldr	r0, [sp, #24]
 800654e:	9907      	ldr	r1, [sp, #28]
 8006550:	2600      	movs	r6, #0
 8006552:	f7fa fb87 	bl	8000c64 <__aeabi_dadd>
 8006556:	2200      	movs	r2, #0
 8006558:	0030      	movs	r0, r6
 800655a:	4b70      	ldr	r3, [pc, #448]	; (800671c <__ieee754_pow+0x9cc>)
 800655c:	000f      	movs	r7, r1
 800655e:	f7fb fabf 	bl	8001ae0 <__aeabi_dmul>
 8006562:	9a06      	ldr	r2, [sp, #24]
 8006564:	9b07      	ldr	r3, [sp, #28]
 8006566:	9008      	str	r0, [sp, #32]
 8006568:	9109      	str	r1, [sp, #36]	; 0x24
 800656a:	0030      	movs	r0, r6
 800656c:	0039      	movs	r1, r7
 800656e:	f7fb fd23 	bl	8001fb8 <__aeabi_dsub>
 8006572:	0002      	movs	r2, r0
 8006574:	000b      	movs	r3, r1
 8006576:	9804      	ldr	r0, [sp, #16]
 8006578:	9905      	ldr	r1, [sp, #20]
 800657a:	f7fb fd1d 	bl	8001fb8 <__aeabi_dsub>
 800657e:	4a68      	ldr	r2, [pc, #416]	; (8006720 <__ieee754_pow+0x9d0>)
 8006580:	4b68      	ldr	r3, [pc, #416]	; (8006724 <__ieee754_pow+0x9d4>)
 8006582:	f7fb faad 	bl	8001ae0 <__aeabi_dmul>
 8006586:	4a68      	ldr	r2, [pc, #416]	; (8006728 <__ieee754_pow+0x9d8>)
 8006588:	0004      	movs	r4, r0
 800658a:	000d      	movs	r5, r1
 800658c:	0030      	movs	r0, r6
 800658e:	0039      	movs	r1, r7
 8006590:	4b66      	ldr	r3, [pc, #408]	; (800672c <__ieee754_pow+0x9dc>)
 8006592:	f7fb faa5 	bl	8001ae0 <__aeabi_dmul>
 8006596:	0002      	movs	r2, r0
 8006598:	000b      	movs	r3, r1
 800659a:	0020      	movs	r0, r4
 800659c:	0029      	movs	r1, r5
 800659e:	f7fa fb61 	bl	8000c64 <__aeabi_dadd>
 80065a2:	0004      	movs	r4, r0
 80065a4:	000d      	movs	r5, r1
 80065a6:	0002      	movs	r2, r0
 80065a8:	000b      	movs	r3, r1
 80065aa:	9808      	ldr	r0, [sp, #32]
 80065ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065ae:	f7fa fb59 	bl	8000c64 <__aeabi_dadd>
 80065b2:	9a08      	ldr	r2, [sp, #32]
 80065b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b6:	0006      	movs	r6, r0
 80065b8:	000f      	movs	r7, r1
 80065ba:	f7fb fcfd 	bl	8001fb8 <__aeabi_dsub>
 80065be:	0002      	movs	r2, r0
 80065c0:	000b      	movs	r3, r1
 80065c2:	0020      	movs	r0, r4
 80065c4:	0029      	movs	r1, r5
 80065c6:	f7fb fcf7 	bl	8001fb8 <__aeabi_dsub>
 80065ca:	0032      	movs	r2, r6
 80065cc:	9004      	str	r0, [sp, #16]
 80065ce:	9105      	str	r1, [sp, #20]
 80065d0:	003b      	movs	r3, r7
 80065d2:	0030      	movs	r0, r6
 80065d4:	0039      	movs	r1, r7
 80065d6:	f7fb fa83 	bl	8001ae0 <__aeabi_dmul>
 80065da:	0004      	movs	r4, r0
 80065dc:	000d      	movs	r5, r1
 80065de:	4a54      	ldr	r2, [pc, #336]	; (8006730 <__ieee754_pow+0x9e0>)
 80065e0:	4b54      	ldr	r3, [pc, #336]	; (8006734 <__ieee754_pow+0x9e4>)
 80065e2:	f7fb fa7d 	bl	8001ae0 <__aeabi_dmul>
 80065e6:	4a54      	ldr	r2, [pc, #336]	; (8006738 <__ieee754_pow+0x9e8>)
 80065e8:	4b54      	ldr	r3, [pc, #336]	; (800673c <__ieee754_pow+0x9ec>)
 80065ea:	f7fb fce5 	bl	8001fb8 <__aeabi_dsub>
 80065ee:	0022      	movs	r2, r4
 80065f0:	002b      	movs	r3, r5
 80065f2:	f7fb fa75 	bl	8001ae0 <__aeabi_dmul>
 80065f6:	4a52      	ldr	r2, [pc, #328]	; (8006740 <__ieee754_pow+0x9f0>)
 80065f8:	4b52      	ldr	r3, [pc, #328]	; (8006744 <__ieee754_pow+0x9f4>)
 80065fa:	f7fa fb33 	bl	8000c64 <__aeabi_dadd>
 80065fe:	0022      	movs	r2, r4
 8006600:	002b      	movs	r3, r5
 8006602:	f7fb fa6d 	bl	8001ae0 <__aeabi_dmul>
 8006606:	4a50      	ldr	r2, [pc, #320]	; (8006748 <__ieee754_pow+0x9f8>)
 8006608:	4b50      	ldr	r3, [pc, #320]	; (800674c <__ieee754_pow+0x9fc>)
 800660a:	f7fb fcd5 	bl	8001fb8 <__aeabi_dsub>
 800660e:	0022      	movs	r2, r4
 8006610:	002b      	movs	r3, r5
 8006612:	f7fb fa65 	bl	8001ae0 <__aeabi_dmul>
 8006616:	4a4e      	ldr	r2, [pc, #312]	; (8006750 <__ieee754_pow+0xa00>)
 8006618:	4b4e      	ldr	r3, [pc, #312]	; (8006754 <__ieee754_pow+0xa04>)
 800661a:	f7fa fb23 	bl	8000c64 <__aeabi_dadd>
 800661e:	0022      	movs	r2, r4
 8006620:	002b      	movs	r3, r5
 8006622:	f7fb fa5d 	bl	8001ae0 <__aeabi_dmul>
 8006626:	0002      	movs	r2, r0
 8006628:	000b      	movs	r3, r1
 800662a:	0030      	movs	r0, r6
 800662c:	0039      	movs	r1, r7
 800662e:	f7fb fcc3 	bl	8001fb8 <__aeabi_dsub>
 8006632:	0004      	movs	r4, r0
 8006634:	000d      	movs	r5, r1
 8006636:	0002      	movs	r2, r0
 8006638:	000b      	movs	r3, r1
 800663a:	0030      	movs	r0, r6
 800663c:	0039      	movs	r1, r7
 800663e:	f7fb fa4f 	bl	8001ae0 <__aeabi_dmul>
 8006642:	2380      	movs	r3, #128	; 0x80
 8006644:	9006      	str	r0, [sp, #24]
 8006646:	9107      	str	r1, [sp, #28]
 8006648:	2200      	movs	r2, #0
 800664a:	0020      	movs	r0, r4
 800664c:	0029      	movs	r1, r5
 800664e:	05db      	lsls	r3, r3, #23
 8006650:	f7fb fcb2 	bl	8001fb8 <__aeabi_dsub>
 8006654:	0002      	movs	r2, r0
 8006656:	000b      	movs	r3, r1
 8006658:	9806      	ldr	r0, [sp, #24]
 800665a:	9907      	ldr	r1, [sp, #28]
 800665c:	f7fa fe3e 	bl	80012dc <__aeabi_ddiv>
 8006660:	9a04      	ldr	r2, [sp, #16]
 8006662:	9b05      	ldr	r3, [sp, #20]
 8006664:	0004      	movs	r4, r0
 8006666:	000d      	movs	r5, r1
 8006668:	0030      	movs	r0, r6
 800666a:	0039      	movs	r1, r7
 800666c:	f7fb fa38 	bl	8001ae0 <__aeabi_dmul>
 8006670:	9a04      	ldr	r2, [sp, #16]
 8006672:	9b05      	ldr	r3, [sp, #20]
 8006674:	f7fa faf6 	bl	8000c64 <__aeabi_dadd>
 8006678:	0002      	movs	r2, r0
 800667a:	000b      	movs	r3, r1
 800667c:	0020      	movs	r0, r4
 800667e:	0029      	movs	r1, r5
 8006680:	f7fb fc9a 	bl	8001fb8 <__aeabi_dsub>
 8006684:	0032      	movs	r2, r6
 8006686:	003b      	movs	r3, r7
 8006688:	f7fb fc96 	bl	8001fb8 <__aeabi_dsub>
 800668c:	0002      	movs	r2, r0
 800668e:	000b      	movs	r3, r1
 8006690:	2000      	movs	r0, #0
 8006692:	4931      	ldr	r1, [pc, #196]	; (8006758 <__ieee754_pow+0xa08>)
 8006694:	f7fb fc90 	bl	8001fb8 <__aeabi_dsub>
 8006698:	9b02      	ldr	r3, [sp, #8]
 800669a:	051b      	lsls	r3, r3, #20
 800669c:	185b      	adds	r3, r3, r1
 800669e:	151a      	asrs	r2, r3, #20
 80066a0:	2a00      	cmp	r2, #0
 80066a2:	dc25      	bgt.n	80066f0 <__ieee754_pow+0x9a0>
 80066a4:	9a02      	ldr	r2, [sp, #8]
 80066a6:	f000 f955 	bl	8006954 <scalbn>
 80066aa:	9a00      	ldr	r2, [sp, #0]
 80066ac:	9b01      	ldr	r3, [sp, #4]
 80066ae:	f7ff fc33 	bl	8005f18 <__ieee754_pow+0x1c8>
 80066b2:	4a2a      	ldr	r2, [pc, #168]	; (800675c <__ieee754_pow+0xa0c>)
 80066b4:	004b      	lsls	r3, r1, #1
 80066b6:	085b      	lsrs	r3, r3, #1
 80066b8:	4293      	cmp	r3, r2
 80066ba:	dc00      	bgt.n	80066be <__ieee754_pow+0x96e>
 80066bc:	e717      	b.n	80064ee <__ieee754_pow+0x79e>
 80066be:	4b28      	ldr	r3, [pc, #160]	; (8006760 <__ieee754_pow+0xa10>)
 80066c0:	18cb      	adds	r3, r1, r3
 80066c2:	4303      	orrs	r3, r0
 80066c4:	d008      	beq.n	80066d8 <__ieee754_pow+0x988>
 80066c6:	9800      	ldr	r0, [sp, #0]
 80066c8:	9901      	ldr	r1, [sp, #4]
 80066ca:	2300      	movs	r3, #0
 80066cc:	2200      	movs	r2, #0
 80066ce:	f7f9 fdcf 	bl	8000270 <__aeabi_dcmplt>
 80066d2:	1e43      	subs	r3, r0, #1
 80066d4:	4198      	sbcs	r0, r3
 80066d6:	e462      	b.n	8005f9e <__ieee754_pow+0x24e>
 80066d8:	0032      	movs	r2, r6
 80066da:	003b      	movs	r3, r7
 80066dc:	f7fb fc6c 	bl	8001fb8 <__aeabi_dsub>
 80066e0:	9a04      	ldr	r2, [sp, #16]
 80066e2:	9b05      	ldr	r3, [sp, #20]
 80066e4:	f7f9 fde2 	bl	80002ac <__aeabi_dcmpge>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d100      	bne.n	80066ee <__ieee754_pow+0x99e>
 80066ec:	e6ff      	b.n	80064ee <__ieee754_pow+0x79e>
 80066ee:	e7ea      	b.n	80066c6 <__ieee754_pow+0x976>
 80066f0:	0019      	movs	r1, r3
 80066f2:	e7da      	b.n	80066aa <__ieee754_pow+0x95a>
 80066f4:	2300      	movs	r3, #0
 80066f6:	4c18      	ldr	r4, [pc, #96]	; (8006758 <__ieee754_pow+0xa08>)
 80066f8:	f7ff fbf1 	bl	8005ede <__ieee754_pow+0x18e>
 80066fc:	2300      	movs	r3, #0
 80066fe:	2400      	movs	r4, #0
 8006700:	f7ff fbed 	bl	8005ede <__ieee754_pow+0x18e>
 8006704:	652b82fe 	.word	0x652b82fe
 8006708:	3c971547 	.word	0x3c971547
 800670c:	3fe00000 	.word	0x3fe00000
 8006710:	fffffc02 	.word	0xfffffc02
 8006714:	fffffc01 	.word	0xfffffc01
 8006718:	000fffff 	.word	0x000fffff
 800671c:	3fe62e43 	.word	0x3fe62e43
 8006720:	fefa39ef 	.word	0xfefa39ef
 8006724:	3fe62e42 	.word	0x3fe62e42
 8006728:	0ca86c39 	.word	0x0ca86c39
 800672c:	be205c61 	.word	0xbe205c61
 8006730:	72bea4d0 	.word	0x72bea4d0
 8006734:	3e663769 	.word	0x3e663769
 8006738:	c5d26bf1 	.word	0xc5d26bf1
 800673c:	3ebbbd41 	.word	0x3ebbbd41
 8006740:	af25de2c 	.word	0xaf25de2c
 8006744:	3f11566a 	.word	0x3f11566a
 8006748:	16bebd93 	.word	0x16bebd93
 800674c:	3f66c16c 	.word	0x3f66c16c
 8006750:	5555553e 	.word	0x5555553e
 8006754:	3fc55555 	.word	0x3fc55555
 8006758:	3ff00000 	.word	0x3ff00000
 800675c:	4090cbff 	.word	0x4090cbff
 8006760:	3f6f3400 	.word	0x3f6f3400

08006764 <__ieee754_sqrt>:
 8006764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006766:	000b      	movs	r3, r1
 8006768:	000c      	movs	r4, r1
 800676a:	4956      	ldr	r1, [pc, #344]	; (80068c4 <__ieee754_sqrt+0x160>)
 800676c:	0005      	movs	r5, r0
 800676e:	0002      	movs	r2, r0
 8006770:	0008      	movs	r0, r1
 8006772:	b085      	sub	sp, #20
 8006774:	4020      	ands	r0, r4
 8006776:	4288      	cmp	r0, r1
 8006778:	d10f      	bne.n	800679a <__ieee754_sqrt+0x36>
 800677a:	0028      	movs	r0, r5
 800677c:	0021      	movs	r1, r4
 800677e:	f7fb f9af 	bl	8001ae0 <__aeabi_dmul>
 8006782:	0002      	movs	r2, r0
 8006784:	000b      	movs	r3, r1
 8006786:	0028      	movs	r0, r5
 8006788:	0021      	movs	r1, r4
 800678a:	f7fa fa6b 	bl	8000c64 <__aeabi_dadd>
 800678e:	0005      	movs	r5, r0
 8006790:	000c      	movs	r4, r1
 8006792:	0028      	movs	r0, r5
 8006794:	0021      	movs	r1, r4
 8006796:	b005      	add	sp, #20
 8006798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800679a:	2c00      	cmp	r4, #0
 800679c:	dc10      	bgt.n	80067c0 <__ieee754_sqrt+0x5c>
 800679e:	0061      	lsls	r1, r4, #1
 80067a0:	0849      	lsrs	r1, r1, #1
 80067a2:	4329      	orrs	r1, r5
 80067a4:	d0f5      	beq.n	8006792 <__ieee754_sqrt+0x2e>
 80067a6:	2100      	movs	r1, #0
 80067a8:	428c      	cmp	r4, r1
 80067aa:	d100      	bne.n	80067ae <__ieee754_sqrt+0x4a>
 80067ac:	e080      	b.n	80068b0 <__ieee754_sqrt+0x14c>
 80067ae:	0028      	movs	r0, r5
 80067b0:	0021      	movs	r1, r4
 80067b2:	f7fb fc01 	bl	8001fb8 <__aeabi_dsub>
 80067b6:	0002      	movs	r2, r0
 80067b8:	000b      	movs	r3, r1
 80067ba:	f7fa fd8f 	bl	80012dc <__aeabi_ddiv>
 80067be:	e7e6      	b.n	800678e <__ieee754_sqrt+0x2a>
 80067c0:	1521      	asrs	r1, r4, #20
 80067c2:	d075      	beq.n	80068b0 <__ieee754_sqrt+0x14c>
 80067c4:	4840      	ldr	r0, [pc, #256]	; (80068c8 <__ieee754_sqrt+0x164>)
 80067c6:	031b      	lsls	r3, r3, #12
 80067c8:	180c      	adds	r4, r1, r0
 80067ca:	2080      	movs	r0, #128	; 0x80
 80067cc:	0b1b      	lsrs	r3, r3, #12
 80067ce:	0340      	lsls	r0, r0, #13
 80067d0:	4303      	orrs	r3, r0
 80067d2:	07c9      	lsls	r1, r1, #31
 80067d4:	d403      	bmi.n	80067de <__ieee754_sqrt+0x7a>
 80067d6:	0fd1      	lsrs	r1, r2, #31
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	185b      	adds	r3, r3, r1
 80067dc:	0052      	lsls	r2, r2, #1
 80067de:	1061      	asrs	r1, r4, #1
 80067e0:	2400      	movs	r4, #0
 80067e2:	9103      	str	r1, [sp, #12]
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	0fd1      	lsrs	r1, r2, #31
 80067e8:	185b      	adds	r3, r3, r1
 80067ea:	2180      	movs	r1, #128	; 0x80
 80067ec:	2516      	movs	r5, #22
 80067ee:	0020      	movs	r0, r4
 80067f0:	0052      	lsls	r2, r2, #1
 80067f2:	0389      	lsls	r1, r1, #14
 80067f4:	1846      	adds	r6, r0, r1
 80067f6:	429e      	cmp	r6, r3
 80067f8:	dc02      	bgt.n	8006800 <__ieee754_sqrt+0x9c>
 80067fa:	1870      	adds	r0, r6, r1
 80067fc:	1b9b      	subs	r3, r3, r6
 80067fe:	1864      	adds	r4, r4, r1
 8006800:	0fd6      	lsrs	r6, r2, #31
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	3d01      	subs	r5, #1
 8006806:	18f3      	adds	r3, r6, r3
 8006808:	0052      	lsls	r2, r2, #1
 800680a:	0849      	lsrs	r1, r1, #1
 800680c:	2d00      	cmp	r5, #0
 800680e:	d1f1      	bne.n	80067f4 <__ieee754_sqrt+0x90>
 8006810:	2620      	movs	r6, #32
 8006812:	2780      	movs	r7, #128	; 0x80
 8006814:	0029      	movs	r1, r5
 8006816:	9601      	str	r6, [sp, #4]
 8006818:	063f      	lsls	r7, r7, #24
 800681a:	197e      	adds	r6, r7, r5
 800681c:	46b4      	mov	ip, r6
 800681e:	4283      	cmp	r3, r0
 8006820:	dc02      	bgt.n	8006828 <__ieee754_sqrt+0xc4>
 8006822:	d114      	bne.n	800684e <__ieee754_sqrt+0xea>
 8006824:	4296      	cmp	r6, r2
 8006826:	d812      	bhi.n	800684e <__ieee754_sqrt+0xea>
 8006828:	4665      	mov	r5, ip
 800682a:	4666      	mov	r6, ip
 800682c:	19ed      	adds	r5, r5, r7
 800682e:	9002      	str	r0, [sp, #8]
 8006830:	2e00      	cmp	r6, #0
 8006832:	da03      	bge.n	800683c <__ieee754_sqrt+0xd8>
 8006834:	43ee      	mvns	r6, r5
 8006836:	0ff6      	lsrs	r6, r6, #31
 8006838:	1986      	adds	r6, r0, r6
 800683a:	9602      	str	r6, [sp, #8]
 800683c:	1a1b      	subs	r3, r3, r0
 800683e:	4562      	cmp	r2, ip
 8006840:	4180      	sbcs	r0, r0
 8006842:	4240      	negs	r0, r0
 8006844:	1a1b      	subs	r3, r3, r0
 8006846:	4660      	mov	r0, ip
 8006848:	1a12      	subs	r2, r2, r0
 800684a:	9802      	ldr	r0, [sp, #8]
 800684c:	19c9      	adds	r1, r1, r7
 800684e:	0fd6      	lsrs	r6, r2, #31
 8006850:	005b      	lsls	r3, r3, #1
 8006852:	199b      	adds	r3, r3, r6
 8006854:	9e01      	ldr	r6, [sp, #4]
 8006856:	0052      	lsls	r2, r2, #1
 8006858:	3e01      	subs	r6, #1
 800685a:	087f      	lsrs	r7, r7, #1
 800685c:	9601      	str	r6, [sp, #4]
 800685e:	2e00      	cmp	r6, #0
 8006860:	d1db      	bne.n	800681a <__ieee754_sqrt+0xb6>
 8006862:	4313      	orrs	r3, r2
 8006864:	d003      	beq.n	800686e <__ieee754_sqrt+0x10a>
 8006866:	1c4b      	adds	r3, r1, #1
 8006868:	d127      	bne.n	80068ba <__ieee754_sqrt+0x156>
 800686a:	0031      	movs	r1, r6
 800686c:	3401      	adds	r4, #1
 800686e:	4b17      	ldr	r3, [pc, #92]	; (80068cc <__ieee754_sqrt+0x168>)
 8006870:	1060      	asrs	r0, r4, #1
 8006872:	18c0      	adds	r0, r0, r3
 8006874:	0849      	lsrs	r1, r1, #1
 8006876:	07e3      	lsls	r3, r4, #31
 8006878:	d502      	bpl.n	8006880 <__ieee754_sqrt+0x11c>
 800687a:	2380      	movs	r3, #128	; 0x80
 800687c:	061b      	lsls	r3, r3, #24
 800687e:	4319      	orrs	r1, r3
 8006880:	9b03      	ldr	r3, [sp, #12]
 8006882:	000d      	movs	r5, r1
 8006884:	051c      	lsls	r4, r3, #20
 8006886:	1823      	adds	r3, r4, r0
 8006888:	001c      	movs	r4, r3
 800688a:	e782      	b.n	8006792 <__ieee754_sqrt+0x2e>
 800688c:	0ad3      	lsrs	r3, r2, #11
 800688e:	3815      	subs	r0, #21
 8006890:	0552      	lsls	r2, r2, #21
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0fa      	beq.n	800688c <__ieee754_sqrt+0x128>
 8006896:	2480      	movs	r4, #128	; 0x80
 8006898:	0364      	lsls	r4, r4, #13
 800689a:	4223      	tst	r3, r4
 800689c:	d00a      	beq.n	80068b4 <__ieee754_sqrt+0x150>
 800689e:	2420      	movs	r4, #32
 80068a0:	0016      	movs	r6, r2
 80068a2:	1a64      	subs	r4, r4, r1
 80068a4:	40e6      	lsrs	r6, r4
 80068a6:	1e4d      	subs	r5, r1, #1
 80068a8:	408a      	lsls	r2, r1
 80068aa:	4333      	orrs	r3, r6
 80068ac:	1b41      	subs	r1, r0, r5
 80068ae:	e789      	b.n	80067c4 <__ieee754_sqrt+0x60>
 80068b0:	2000      	movs	r0, #0
 80068b2:	e7ee      	b.n	8006892 <__ieee754_sqrt+0x12e>
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	3101      	adds	r1, #1
 80068b8:	e7ef      	b.n	800689a <__ieee754_sqrt+0x136>
 80068ba:	2301      	movs	r3, #1
 80068bc:	3101      	adds	r1, #1
 80068be:	4399      	bics	r1, r3
 80068c0:	e7d5      	b.n	800686e <__ieee754_sqrt+0x10a>
 80068c2:	46c0      	nop			; (mov r8, r8)
 80068c4:	7ff00000 	.word	0x7ff00000
 80068c8:	fffffc01 	.word	0xfffffc01
 80068cc:	3fe00000 	.word	0x3fe00000

080068d0 <with_errno>:
 80068d0:	b570      	push	{r4, r5, r6, lr}
 80068d2:	000d      	movs	r5, r1
 80068d4:	0016      	movs	r6, r2
 80068d6:	0004      	movs	r4, r0
 80068d8:	f7fe fc78 	bl	80051cc <__errno>
 80068dc:	0029      	movs	r1, r5
 80068de:	6006      	str	r6, [r0, #0]
 80068e0:	0020      	movs	r0, r4
 80068e2:	bd70      	pop	{r4, r5, r6, pc}

080068e4 <xflow>:
 80068e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068e6:	0015      	movs	r5, r2
 80068e8:	001c      	movs	r4, r3
 80068ea:	2800      	cmp	r0, #0
 80068ec:	d010      	beq.n	8006910 <xflow+0x2c>
 80068ee:	2380      	movs	r3, #128	; 0x80
 80068f0:	0010      	movs	r0, r2
 80068f2:	061b      	lsls	r3, r3, #24
 80068f4:	18e1      	adds	r1, r4, r3
 80068f6:	9000      	str	r0, [sp, #0]
 80068f8:	9101      	str	r1, [sp, #4]
 80068fa:	9a00      	ldr	r2, [sp, #0]
 80068fc:	9b01      	ldr	r3, [sp, #4]
 80068fe:	0028      	movs	r0, r5
 8006900:	0021      	movs	r1, r4
 8006902:	f7fb f8ed 	bl	8001ae0 <__aeabi_dmul>
 8006906:	2222      	movs	r2, #34	; 0x22
 8006908:	f7ff ffe2 	bl	80068d0 <with_errno>
 800690c:	b003      	add	sp, #12
 800690e:	bd30      	pop	{r4, r5, pc}
 8006910:	0010      	movs	r0, r2
 8006912:	0019      	movs	r1, r3
 8006914:	e7ef      	b.n	80068f6 <xflow+0x12>

08006916 <__math_uflow>:
 8006916:	2380      	movs	r3, #128	; 0x80
 8006918:	b510      	push	{r4, lr}
 800691a:	2200      	movs	r2, #0
 800691c:	055b      	lsls	r3, r3, #21
 800691e:	f7ff ffe1 	bl	80068e4 <xflow>
 8006922:	bd10      	pop	{r4, pc}

08006924 <__math_oflow>:
 8006924:	23e0      	movs	r3, #224	; 0xe0
 8006926:	b510      	push	{r4, lr}
 8006928:	2200      	movs	r2, #0
 800692a:	05db      	lsls	r3, r3, #23
 800692c:	f7ff ffda 	bl	80068e4 <xflow>
 8006930:	bd10      	pop	{r4, pc}

08006932 <fabs>:
 8006932:	004b      	lsls	r3, r1, #1
 8006934:	0859      	lsrs	r1, r3, #1
 8006936:	4770      	bx	lr

08006938 <finite>:
 8006938:	4b02      	ldr	r3, [pc, #8]	; (8006944 <finite+0xc>)
 800693a:	0048      	lsls	r0, r1, #1
 800693c:	0840      	lsrs	r0, r0, #1
 800693e:	18c0      	adds	r0, r0, r3
 8006940:	0fc0      	lsrs	r0, r0, #31
 8006942:	4770      	bx	lr
 8006944:	80100000 	.word	0x80100000

08006948 <nan>:
 8006948:	2000      	movs	r0, #0
 800694a:	4901      	ldr	r1, [pc, #4]	; (8006950 <nan+0x8>)
 800694c:	4770      	bx	lr
 800694e:	46c0      	nop			; (mov r8, r8)
 8006950:	7ff80000 	.word	0x7ff80000

08006954 <scalbn>:
 8006954:	004b      	lsls	r3, r1, #1
 8006956:	b570      	push	{r4, r5, r6, lr}
 8006958:	0d5b      	lsrs	r3, r3, #21
 800695a:	0014      	movs	r4, r2
 800695c:	000a      	movs	r2, r1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10d      	bne.n	800697e <scalbn+0x2a>
 8006962:	004b      	lsls	r3, r1, #1
 8006964:	085b      	lsrs	r3, r3, #1
 8006966:	4303      	orrs	r3, r0
 8006968:	d010      	beq.n	800698c <scalbn+0x38>
 800696a:	4b27      	ldr	r3, [pc, #156]	; (8006a08 <scalbn+0xb4>)
 800696c:	2200      	movs	r2, #0
 800696e:	f7fb f8b7 	bl	8001ae0 <__aeabi_dmul>
 8006972:	4b26      	ldr	r3, [pc, #152]	; (8006a0c <scalbn+0xb8>)
 8006974:	429c      	cmp	r4, r3
 8006976:	da0a      	bge.n	800698e <scalbn+0x3a>
 8006978:	4a25      	ldr	r2, [pc, #148]	; (8006a10 <scalbn+0xbc>)
 800697a:	4b26      	ldr	r3, [pc, #152]	; (8006a14 <scalbn+0xc0>)
 800697c:	e019      	b.n	80069b2 <scalbn+0x5e>
 800697e:	4d26      	ldr	r5, [pc, #152]	; (8006a18 <scalbn+0xc4>)
 8006980:	42ab      	cmp	r3, r5
 8006982:	d108      	bne.n	8006996 <scalbn+0x42>
 8006984:	0002      	movs	r2, r0
 8006986:	000b      	movs	r3, r1
 8006988:	f7fa f96c 	bl	8000c64 <__aeabi_dadd>
 800698c:	bd70      	pop	{r4, r5, r6, pc}
 800698e:	000a      	movs	r2, r1
 8006990:	004b      	lsls	r3, r1, #1
 8006992:	0d5b      	lsrs	r3, r3, #21
 8006994:	3b36      	subs	r3, #54	; 0x36
 8006996:	4d21      	ldr	r5, [pc, #132]	; (8006a1c <scalbn+0xc8>)
 8006998:	18e3      	adds	r3, r4, r3
 800699a:	42ab      	cmp	r3, r5
 800699c:	dd0c      	ble.n	80069b8 <scalbn+0x64>
 800699e:	4c20      	ldr	r4, [pc, #128]	; (8006a20 <scalbn+0xcc>)
 80069a0:	4d20      	ldr	r5, [pc, #128]	; (8006a24 <scalbn+0xd0>)
 80069a2:	2900      	cmp	r1, #0
 80069a4:	da01      	bge.n	80069aa <scalbn+0x56>
 80069a6:	4c1e      	ldr	r4, [pc, #120]	; (8006a20 <scalbn+0xcc>)
 80069a8:	4d1f      	ldr	r5, [pc, #124]	; (8006a28 <scalbn+0xd4>)
 80069aa:	0020      	movs	r0, r4
 80069ac:	0029      	movs	r1, r5
 80069ae:	4a1c      	ldr	r2, [pc, #112]	; (8006a20 <scalbn+0xcc>)
 80069b0:	4b1c      	ldr	r3, [pc, #112]	; (8006a24 <scalbn+0xd0>)
 80069b2:	f7fb f895 	bl	8001ae0 <__aeabi_dmul>
 80069b6:	e7e9      	b.n	800698c <scalbn+0x38>
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	dd05      	ble.n	80069c8 <scalbn+0x74>
 80069bc:	4c1b      	ldr	r4, [pc, #108]	; (8006a2c <scalbn+0xd8>)
 80069be:	051b      	lsls	r3, r3, #20
 80069c0:	4022      	ands	r2, r4
 80069c2:	431a      	orrs	r2, r3
 80069c4:	0011      	movs	r1, r2
 80069c6:	e7e1      	b.n	800698c <scalbn+0x38>
 80069c8:	001d      	movs	r5, r3
 80069ca:	3535      	adds	r5, #53	; 0x35
 80069cc:	da13      	bge.n	80069f6 <scalbn+0xa2>
 80069ce:	4a18      	ldr	r2, [pc, #96]	; (8006a30 <scalbn+0xdc>)
 80069d0:	0fcb      	lsrs	r3, r1, #31
 80069d2:	4294      	cmp	r4, r2
 80069d4:	dd08      	ble.n	80069e8 <scalbn+0x94>
 80069d6:	4812      	ldr	r0, [pc, #72]	; (8006a20 <scalbn+0xcc>)
 80069d8:	4912      	ldr	r1, [pc, #72]	; (8006a24 <scalbn+0xd0>)
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <scalbn+0x8e>
 80069de:	4810      	ldr	r0, [pc, #64]	; (8006a20 <scalbn+0xcc>)
 80069e0:	4911      	ldr	r1, [pc, #68]	; (8006a28 <scalbn+0xd4>)
 80069e2:	4a0f      	ldr	r2, [pc, #60]	; (8006a20 <scalbn+0xcc>)
 80069e4:	4b0f      	ldr	r3, [pc, #60]	; (8006a24 <scalbn+0xd0>)
 80069e6:	e7e4      	b.n	80069b2 <scalbn+0x5e>
 80069e8:	4809      	ldr	r0, [pc, #36]	; (8006a10 <scalbn+0xbc>)
 80069ea:	490a      	ldr	r1, [pc, #40]	; (8006a14 <scalbn+0xc0>)
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0c3      	beq.n	8006978 <scalbn+0x24>
 80069f0:	4807      	ldr	r0, [pc, #28]	; (8006a10 <scalbn+0xbc>)
 80069f2:	4910      	ldr	r1, [pc, #64]	; (8006a34 <scalbn+0xe0>)
 80069f4:	e7c0      	b.n	8006978 <scalbn+0x24>
 80069f6:	4c0d      	ldr	r4, [pc, #52]	; (8006a2c <scalbn+0xd8>)
 80069f8:	3336      	adds	r3, #54	; 0x36
 80069fa:	4022      	ands	r2, r4
 80069fc:	051b      	lsls	r3, r3, #20
 80069fe:	4313      	orrs	r3, r2
 8006a00:	0019      	movs	r1, r3
 8006a02:	2200      	movs	r2, #0
 8006a04:	4b0c      	ldr	r3, [pc, #48]	; (8006a38 <scalbn+0xe4>)
 8006a06:	e7d4      	b.n	80069b2 <scalbn+0x5e>
 8006a08:	43500000 	.word	0x43500000
 8006a0c:	ffff3cb0 	.word	0xffff3cb0
 8006a10:	c2f8f359 	.word	0xc2f8f359
 8006a14:	01a56e1f 	.word	0x01a56e1f
 8006a18:	000007ff 	.word	0x000007ff
 8006a1c:	000007fe 	.word	0x000007fe
 8006a20:	8800759c 	.word	0x8800759c
 8006a24:	7e37e43c 	.word	0x7e37e43c
 8006a28:	fe37e43c 	.word	0xfe37e43c
 8006a2c:	800fffff 	.word	0x800fffff
 8006a30:	0000c350 	.word	0x0000c350
 8006a34:	81a56e1f 	.word	0x81a56e1f
 8006a38:	3c900000 	.word	0x3c900000

08006a3c <__ieee754_log>:
 8006a3c:	2280      	movs	r2, #128	; 0x80
 8006a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a40:	000b      	movs	r3, r1
 8006a42:	b08d      	sub	sp, #52	; 0x34
 8006a44:	0352      	lsls	r2, r2, #13
 8006a46:	4291      	cmp	r1, r2
 8006a48:	da22      	bge.n	8006a90 <__ieee754_log+0x54>
 8006a4a:	004a      	lsls	r2, r1, #1
 8006a4c:	0852      	lsrs	r2, r2, #1
 8006a4e:	4302      	orrs	r2, r0
 8006a50:	d107      	bne.n	8006a62 <__ieee754_log+0x26>
 8006a52:	2200      	movs	r2, #0
 8006a54:	2300      	movs	r3, #0
 8006a56:	2000      	movs	r0, #0
 8006a58:	49b3      	ldr	r1, [pc, #716]	; (8006d28 <__ieee754_log+0x2ec>)
 8006a5a:	f7fa fc3f 	bl	80012dc <__aeabi_ddiv>
 8006a5e:	b00d      	add	sp, #52	; 0x34
 8006a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a62:	2900      	cmp	r1, #0
 8006a64:	da05      	bge.n	8006a72 <__ieee754_log+0x36>
 8006a66:	0002      	movs	r2, r0
 8006a68:	f7fb faa6 	bl	8001fb8 <__aeabi_dsub>
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	2300      	movs	r3, #0
 8006a70:	e7f3      	b.n	8006a5a <__ieee754_log+0x1e>
 8006a72:	4bae      	ldr	r3, [pc, #696]	; (8006d2c <__ieee754_log+0x2f0>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	f7fb f833 	bl	8001ae0 <__aeabi_dmul>
 8006a7a:	2436      	movs	r4, #54	; 0x36
 8006a7c:	000b      	movs	r3, r1
 8006a7e:	4264      	negs	r4, r4
 8006a80:	4aab      	ldr	r2, [pc, #684]	; (8006d30 <__ieee754_log+0x2f4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	dd06      	ble.n	8006a94 <__ieee754_log+0x58>
 8006a86:	0002      	movs	r2, r0
 8006a88:	000b      	movs	r3, r1
 8006a8a:	f7fa f8eb 	bl	8000c64 <__aeabi_dadd>
 8006a8e:	e7e6      	b.n	8006a5e <__ieee754_log+0x22>
 8006a90:	2400      	movs	r4, #0
 8006a92:	e7f5      	b.n	8006a80 <__ieee754_log+0x44>
 8006a94:	4da7      	ldr	r5, [pc, #668]	; (8006d34 <__ieee754_log+0x2f8>)
 8006a96:	151a      	asrs	r2, r3, #20
 8006a98:	1952      	adds	r2, r2, r5
 8006a9a:	1912      	adds	r2, r2, r4
 8006a9c:	031b      	lsls	r3, r3, #12
 8006a9e:	4ca6      	ldr	r4, [pc, #664]	; (8006d38 <__ieee754_log+0x2fc>)
 8006aa0:	0b1b      	lsrs	r3, r3, #12
 8006aa2:	9302      	str	r3, [sp, #8]
 8006aa4:	191c      	adds	r4, r3, r4
 8006aa6:	2380      	movs	r3, #128	; 0x80
 8006aa8:	035b      	lsls	r3, r3, #13
 8006aaa:	4023      	ands	r3, r4
 8006aac:	4ca3      	ldr	r4, [pc, #652]	; (8006d3c <__ieee754_log+0x300>)
 8006aae:	9d02      	ldr	r5, [sp, #8]
 8006ab0:	405c      	eors	r4, r3
 8006ab2:	151b      	asrs	r3, r3, #20
 8006ab4:	189b      	adds	r3, r3, r2
 8006ab6:	4325      	orrs	r5, r4
 8006ab8:	2200      	movs	r2, #0
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	0029      	movs	r1, r5
 8006abe:	4b9f      	ldr	r3, [pc, #636]	; (8006d3c <__ieee754_log+0x300>)
 8006ac0:	f7fb fa7a 	bl	8001fb8 <__aeabi_dsub>
 8006ac4:	9b02      	ldr	r3, [sp, #8]
 8006ac6:	0006      	movs	r6, r0
 8006ac8:	3302      	adds	r3, #2
 8006aca:	031b      	lsls	r3, r3, #12
 8006acc:	000f      	movs	r7, r1
 8006ace:	2200      	movs	r2, #0
 8006ad0:	0b1b      	lsrs	r3, r3, #12
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	dc64      	bgt.n	8006ba0 <__ieee754_log+0x164>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	f7f9 fbc4 	bl	8000264 <__aeabi_dcmpeq>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d019      	beq.n	8006b14 <__ieee754_log+0xd8>
 8006ae0:	9b00      	ldr	r3, [sp, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d100      	bne.n	8006ae8 <__ieee754_log+0xac>
 8006ae6:	e11c      	b.n	8006d22 <__ieee754_log+0x2e6>
 8006ae8:	0018      	movs	r0, r3
 8006aea:	f7fb fe4b 	bl	8002784 <__aeabi_i2d>
 8006aee:	4a94      	ldr	r2, [pc, #592]	; (8006d40 <__ieee754_log+0x304>)
 8006af0:	4b94      	ldr	r3, [pc, #592]	; (8006d44 <__ieee754_log+0x308>)
 8006af2:	0004      	movs	r4, r0
 8006af4:	000d      	movs	r5, r1
 8006af6:	f7fa fff3 	bl	8001ae0 <__aeabi_dmul>
 8006afa:	4a93      	ldr	r2, [pc, #588]	; (8006d48 <__ieee754_log+0x30c>)
 8006afc:	0006      	movs	r6, r0
 8006afe:	000f      	movs	r7, r1
 8006b00:	4b92      	ldr	r3, [pc, #584]	; (8006d4c <__ieee754_log+0x310>)
 8006b02:	0020      	movs	r0, r4
 8006b04:	0029      	movs	r1, r5
 8006b06:	f7fa ffeb 	bl	8001ae0 <__aeabi_dmul>
 8006b0a:	0002      	movs	r2, r0
 8006b0c:	000b      	movs	r3, r1
 8006b0e:	0030      	movs	r0, r6
 8006b10:	0039      	movs	r1, r7
 8006b12:	e7ba      	b.n	8006a8a <__ieee754_log+0x4e>
 8006b14:	4a8e      	ldr	r2, [pc, #568]	; (8006d50 <__ieee754_log+0x314>)
 8006b16:	4b8f      	ldr	r3, [pc, #572]	; (8006d54 <__ieee754_log+0x318>)
 8006b18:	0030      	movs	r0, r6
 8006b1a:	0039      	movs	r1, r7
 8006b1c:	f7fa ffe0 	bl	8001ae0 <__aeabi_dmul>
 8006b20:	0002      	movs	r2, r0
 8006b22:	000b      	movs	r3, r1
 8006b24:	2000      	movs	r0, #0
 8006b26:	498c      	ldr	r1, [pc, #560]	; (8006d58 <__ieee754_log+0x31c>)
 8006b28:	f7fb fa46 	bl	8001fb8 <__aeabi_dsub>
 8006b2c:	0032      	movs	r2, r6
 8006b2e:	0004      	movs	r4, r0
 8006b30:	000d      	movs	r5, r1
 8006b32:	003b      	movs	r3, r7
 8006b34:	0030      	movs	r0, r6
 8006b36:	0039      	movs	r1, r7
 8006b38:	f7fa ffd2 	bl	8001ae0 <__aeabi_dmul>
 8006b3c:	000b      	movs	r3, r1
 8006b3e:	0002      	movs	r2, r0
 8006b40:	0029      	movs	r1, r5
 8006b42:	0020      	movs	r0, r4
 8006b44:	f7fa ffcc 	bl	8001ae0 <__aeabi_dmul>
 8006b48:	9b00      	ldr	r3, [sp, #0]
 8006b4a:	9002      	str	r0, [sp, #8]
 8006b4c:	9103      	str	r1, [sp, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d106      	bne.n	8006b60 <__ieee754_log+0x124>
 8006b52:	0002      	movs	r2, r0
 8006b54:	000b      	movs	r3, r1
 8006b56:	0030      	movs	r0, r6
 8006b58:	0039      	movs	r1, r7
 8006b5a:	f7fb fa2d 	bl	8001fb8 <__aeabi_dsub>
 8006b5e:	e77e      	b.n	8006a5e <__ieee754_log+0x22>
 8006b60:	9800      	ldr	r0, [sp, #0]
 8006b62:	f7fb fe0f 	bl	8002784 <__aeabi_i2d>
 8006b66:	4a76      	ldr	r2, [pc, #472]	; (8006d40 <__ieee754_log+0x304>)
 8006b68:	4b76      	ldr	r3, [pc, #472]	; (8006d44 <__ieee754_log+0x308>)
 8006b6a:	0004      	movs	r4, r0
 8006b6c:	000d      	movs	r5, r1
 8006b6e:	f7fa ffb7 	bl	8001ae0 <__aeabi_dmul>
 8006b72:	4a75      	ldr	r2, [pc, #468]	; (8006d48 <__ieee754_log+0x30c>)
 8006b74:	9000      	str	r0, [sp, #0]
 8006b76:	9101      	str	r1, [sp, #4]
 8006b78:	4b74      	ldr	r3, [pc, #464]	; (8006d4c <__ieee754_log+0x310>)
 8006b7a:	0020      	movs	r0, r4
 8006b7c:	0029      	movs	r1, r5
 8006b7e:	f7fa ffaf 	bl	8001ae0 <__aeabi_dmul>
 8006b82:	0002      	movs	r2, r0
 8006b84:	000b      	movs	r3, r1
 8006b86:	9802      	ldr	r0, [sp, #8]
 8006b88:	9903      	ldr	r1, [sp, #12]
 8006b8a:	f7fb fa15 	bl	8001fb8 <__aeabi_dsub>
 8006b8e:	0032      	movs	r2, r6
 8006b90:	003b      	movs	r3, r7
 8006b92:	f7fb fa11 	bl	8001fb8 <__aeabi_dsub>
 8006b96:	0002      	movs	r2, r0
 8006b98:	000b      	movs	r3, r1
 8006b9a:	9800      	ldr	r0, [sp, #0]
 8006b9c:	9901      	ldr	r1, [sp, #4]
 8006b9e:	e7dc      	b.n	8006b5a <__ieee754_log+0x11e>
 8006ba0:	2380      	movs	r3, #128	; 0x80
 8006ba2:	05db      	lsls	r3, r3, #23
 8006ba4:	f7fa f85e 	bl	8000c64 <__aeabi_dadd>
 8006ba8:	0002      	movs	r2, r0
 8006baa:	000b      	movs	r3, r1
 8006bac:	0030      	movs	r0, r6
 8006bae:	0039      	movs	r1, r7
 8006bb0:	f7fa fb94 	bl	80012dc <__aeabi_ddiv>
 8006bb4:	9004      	str	r0, [sp, #16]
 8006bb6:	9105      	str	r1, [sp, #20]
 8006bb8:	9800      	ldr	r0, [sp, #0]
 8006bba:	f7fb fde3 	bl	8002784 <__aeabi_i2d>
 8006bbe:	9a04      	ldr	r2, [sp, #16]
 8006bc0:	9b05      	ldr	r3, [sp, #20]
 8006bc2:	9006      	str	r0, [sp, #24]
 8006bc4:	9107      	str	r1, [sp, #28]
 8006bc6:	0010      	movs	r0, r2
 8006bc8:	0019      	movs	r1, r3
 8006bca:	f7fa ff89 	bl	8001ae0 <__aeabi_dmul>
 8006bce:	4a63      	ldr	r2, [pc, #396]	; (8006d5c <__ieee754_log+0x320>)
 8006bd0:	9b02      	ldr	r3, [sp, #8]
 8006bd2:	4694      	mov	ip, r2
 8006bd4:	4463      	add	r3, ip
 8006bd6:	0002      	movs	r2, r0
 8006bd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bda:	000b      	movs	r3, r1
 8006bdc:	9008      	str	r0, [sp, #32]
 8006bde:	9109      	str	r1, [sp, #36]	; 0x24
 8006be0:	f7fa ff7e 	bl	8001ae0 <__aeabi_dmul>
 8006be4:	0004      	movs	r4, r0
 8006be6:	000d      	movs	r5, r1
 8006be8:	4a5d      	ldr	r2, [pc, #372]	; (8006d60 <__ieee754_log+0x324>)
 8006bea:	4b5e      	ldr	r3, [pc, #376]	; (8006d64 <__ieee754_log+0x328>)
 8006bec:	f7fa ff78 	bl	8001ae0 <__aeabi_dmul>
 8006bf0:	4a5d      	ldr	r2, [pc, #372]	; (8006d68 <__ieee754_log+0x32c>)
 8006bf2:	4b5e      	ldr	r3, [pc, #376]	; (8006d6c <__ieee754_log+0x330>)
 8006bf4:	f7fa f836 	bl	8000c64 <__aeabi_dadd>
 8006bf8:	0022      	movs	r2, r4
 8006bfa:	002b      	movs	r3, r5
 8006bfc:	f7fa ff70 	bl	8001ae0 <__aeabi_dmul>
 8006c00:	4a5b      	ldr	r2, [pc, #364]	; (8006d70 <__ieee754_log+0x334>)
 8006c02:	4b5c      	ldr	r3, [pc, #368]	; (8006d74 <__ieee754_log+0x338>)
 8006c04:	f7fa f82e 	bl	8000c64 <__aeabi_dadd>
 8006c08:	0022      	movs	r2, r4
 8006c0a:	002b      	movs	r3, r5
 8006c0c:	f7fa ff68 	bl	8001ae0 <__aeabi_dmul>
 8006c10:	4a59      	ldr	r2, [pc, #356]	; (8006d78 <__ieee754_log+0x33c>)
 8006c12:	4b5a      	ldr	r3, [pc, #360]	; (8006d7c <__ieee754_log+0x340>)
 8006c14:	f7fa f826 	bl	8000c64 <__aeabi_dadd>
 8006c18:	9a08      	ldr	r2, [sp, #32]
 8006c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c1c:	f7fa ff60 	bl	8001ae0 <__aeabi_dmul>
 8006c20:	4a57      	ldr	r2, [pc, #348]	; (8006d80 <__ieee754_log+0x344>)
 8006c22:	9008      	str	r0, [sp, #32]
 8006c24:	9109      	str	r1, [sp, #36]	; 0x24
 8006c26:	4b57      	ldr	r3, [pc, #348]	; (8006d84 <__ieee754_log+0x348>)
 8006c28:	0020      	movs	r0, r4
 8006c2a:	0029      	movs	r1, r5
 8006c2c:	f7fa ff58 	bl	8001ae0 <__aeabi_dmul>
 8006c30:	4a55      	ldr	r2, [pc, #340]	; (8006d88 <__ieee754_log+0x34c>)
 8006c32:	4b56      	ldr	r3, [pc, #344]	; (8006d8c <__ieee754_log+0x350>)
 8006c34:	f7fa f816 	bl	8000c64 <__aeabi_dadd>
 8006c38:	0022      	movs	r2, r4
 8006c3a:	002b      	movs	r3, r5
 8006c3c:	f7fa ff50 	bl	8001ae0 <__aeabi_dmul>
 8006c40:	4a53      	ldr	r2, [pc, #332]	; (8006d90 <__ieee754_log+0x354>)
 8006c42:	4b54      	ldr	r3, [pc, #336]	; (8006d94 <__ieee754_log+0x358>)
 8006c44:	f7fa f80e 	bl	8000c64 <__aeabi_dadd>
 8006c48:	0022      	movs	r2, r4
 8006c4a:	002b      	movs	r3, r5
 8006c4c:	f7fa ff48 	bl	8001ae0 <__aeabi_dmul>
 8006c50:	0002      	movs	r2, r0
 8006c52:	000b      	movs	r3, r1
 8006c54:	9808      	ldr	r0, [sp, #32]
 8006c56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c58:	f7fa f804 	bl	8000c64 <__aeabi_dadd>
 8006c5c:	9a02      	ldr	r2, [sp, #8]
 8006c5e:	4b4e      	ldr	r3, [pc, #312]	; (8006d98 <__ieee754_log+0x35c>)
 8006c60:	0004      	movs	r4, r0
 8006c62:	1a9b      	subs	r3, r3, r2
 8006c64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c66:	000d      	movs	r5, r1
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	dd34      	ble.n	8006cd8 <__ieee754_log+0x29c>
 8006c6e:	2200      	movs	r2, #0
 8006c70:	4b39      	ldr	r3, [pc, #228]	; (8006d58 <__ieee754_log+0x31c>)
 8006c72:	0030      	movs	r0, r6
 8006c74:	0039      	movs	r1, r7
 8006c76:	f7fa ff33 	bl	8001ae0 <__aeabi_dmul>
 8006c7a:	0032      	movs	r2, r6
 8006c7c:	003b      	movs	r3, r7
 8006c7e:	f7fa ff2f 	bl	8001ae0 <__aeabi_dmul>
 8006c82:	0002      	movs	r2, r0
 8006c84:	000b      	movs	r3, r1
 8006c86:	9002      	str	r0, [sp, #8]
 8006c88:	9103      	str	r1, [sp, #12]
 8006c8a:	0020      	movs	r0, r4
 8006c8c:	0029      	movs	r1, r5
 8006c8e:	f7f9 ffe9 	bl	8000c64 <__aeabi_dadd>
 8006c92:	9a04      	ldr	r2, [sp, #16]
 8006c94:	9b05      	ldr	r3, [sp, #20]
 8006c96:	f7fa ff23 	bl	8001ae0 <__aeabi_dmul>
 8006c9a:	9b00      	ldr	r3, [sp, #0]
 8006c9c:	0004      	movs	r4, r0
 8006c9e:	000d      	movs	r5, r1
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d106      	bne.n	8006cb2 <__ieee754_log+0x276>
 8006ca4:	0002      	movs	r2, r0
 8006ca6:	000b      	movs	r3, r1
 8006ca8:	9802      	ldr	r0, [sp, #8]
 8006caa:	9903      	ldr	r1, [sp, #12]
 8006cac:	f7fb f984 	bl	8001fb8 <__aeabi_dsub>
 8006cb0:	e74f      	b.n	8006b52 <__ieee754_log+0x116>
 8006cb2:	4a23      	ldr	r2, [pc, #140]	; (8006d40 <__ieee754_log+0x304>)
 8006cb4:	4b23      	ldr	r3, [pc, #140]	; (8006d44 <__ieee754_log+0x308>)
 8006cb6:	9806      	ldr	r0, [sp, #24]
 8006cb8:	9907      	ldr	r1, [sp, #28]
 8006cba:	f7fa ff11 	bl	8001ae0 <__aeabi_dmul>
 8006cbe:	4a22      	ldr	r2, [pc, #136]	; (8006d48 <__ieee754_log+0x30c>)
 8006cc0:	9000      	str	r0, [sp, #0]
 8006cc2:	9101      	str	r1, [sp, #4]
 8006cc4:	9806      	ldr	r0, [sp, #24]
 8006cc6:	9907      	ldr	r1, [sp, #28]
 8006cc8:	4b20      	ldr	r3, [pc, #128]	; (8006d4c <__ieee754_log+0x310>)
 8006cca:	f7fa ff09 	bl	8001ae0 <__aeabi_dmul>
 8006cce:	0022      	movs	r2, r4
 8006cd0:	002b      	movs	r3, r5
 8006cd2:	f7f9 ffc7 	bl	8000c64 <__aeabi_dadd>
 8006cd6:	e754      	b.n	8006b82 <__ieee754_log+0x146>
 8006cd8:	0002      	movs	r2, r0
 8006cda:	000b      	movs	r3, r1
 8006cdc:	0030      	movs	r0, r6
 8006cde:	0039      	movs	r1, r7
 8006ce0:	f7fb f96a 	bl	8001fb8 <__aeabi_dsub>
 8006ce4:	9a04      	ldr	r2, [sp, #16]
 8006ce6:	9b05      	ldr	r3, [sp, #20]
 8006ce8:	f7fa fefa 	bl	8001ae0 <__aeabi_dmul>
 8006cec:	9b00      	ldr	r3, [sp, #0]
 8006cee:	0004      	movs	r4, r0
 8006cf0:	000d      	movs	r5, r1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d102      	bne.n	8006cfc <__ieee754_log+0x2c0>
 8006cf6:	0002      	movs	r2, r0
 8006cf8:	000b      	movs	r3, r1
 8006cfa:	e72c      	b.n	8006b56 <__ieee754_log+0x11a>
 8006cfc:	4a10      	ldr	r2, [pc, #64]	; (8006d40 <__ieee754_log+0x304>)
 8006cfe:	4b11      	ldr	r3, [pc, #68]	; (8006d44 <__ieee754_log+0x308>)
 8006d00:	9806      	ldr	r0, [sp, #24]
 8006d02:	9907      	ldr	r1, [sp, #28]
 8006d04:	f7fa feec 	bl	8001ae0 <__aeabi_dmul>
 8006d08:	4a0f      	ldr	r2, [pc, #60]	; (8006d48 <__ieee754_log+0x30c>)
 8006d0a:	9000      	str	r0, [sp, #0]
 8006d0c:	9101      	str	r1, [sp, #4]
 8006d0e:	9806      	ldr	r0, [sp, #24]
 8006d10:	9907      	ldr	r1, [sp, #28]
 8006d12:	4b0e      	ldr	r3, [pc, #56]	; (8006d4c <__ieee754_log+0x310>)
 8006d14:	f7fa fee4 	bl	8001ae0 <__aeabi_dmul>
 8006d18:	0002      	movs	r2, r0
 8006d1a:	000b      	movs	r3, r1
 8006d1c:	0020      	movs	r0, r4
 8006d1e:	0029      	movs	r1, r5
 8006d20:	e733      	b.n	8006b8a <__ieee754_log+0x14e>
 8006d22:	2000      	movs	r0, #0
 8006d24:	2100      	movs	r1, #0
 8006d26:	e69a      	b.n	8006a5e <__ieee754_log+0x22>
 8006d28:	c3500000 	.word	0xc3500000
 8006d2c:	43500000 	.word	0x43500000
 8006d30:	7fefffff 	.word	0x7fefffff
 8006d34:	fffffc01 	.word	0xfffffc01
 8006d38:	00095f64 	.word	0x00095f64
 8006d3c:	3ff00000 	.word	0x3ff00000
 8006d40:	fee00000 	.word	0xfee00000
 8006d44:	3fe62e42 	.word	0x3fe62e42
 8006d48:	35793c76 	.word	0x35793c76
 8006d4c:	3dea39ef 	.word	0x3dea39ef
 8006d50:	55555555 	.word	0x55555555
 8006d54:	3fd55555 	.word	0x3fd55555
 8006d58:	3fe00000 	.word	0x3fe00000
 8006d5c:	fff9eb86 	.word	0xfff9eb86
 8006d60:	df3e5244 	.word	0xdf3e5244
 8006d64:	3fc2f112 	.word	0x3fc2f112
 8006d68:	96cb03de 	.word	0x96cb03de
 8006d6c:	3fc74664 	.word	0x3fc74664
 8006d70:	94229359 	.word	0x94229359
 8006d74:	3fd24924 	.word	0x3fd24924
 8006d78:	55555593 	.word	0x55555593
 8006d7c:	3fe55555 	.word	0x3fe55555
 8006d80:	d078c69f 	.word	0xd078c69f
 8006d84:	3fc39a09 	.word	0x3fc39a09
 8006d88:	1d8e78af 	.word	0x1d8e78af
 8006d8c:	3fcc71c5 	.word	0x3fcc71c5
 8006d90:	9997fa04 	.word	0x9997fa04
 8006d94:	3fd99999 	.word	0x3fd99999
 8006d98:	0006b851 	.word	0x0006b851

08006d9c <_init>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	46c0      	nop			; (mov r8, r8)
 8006da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da2:	bc08      	pop	{r3}
 8006da4:	469e      	mov	lr, r3
 8006da6:	4770      	bx	lr

08006da8 <_fini>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	46c0      	nop			; (mov r8, r8)
 8006dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dae:	bc08      	pop	{r3}
 8006db0:	469e      	mov	lr, r3
 8006db2:	4770      	bx	lr
