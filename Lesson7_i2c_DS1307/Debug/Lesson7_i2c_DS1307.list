
Lesson7_i2c_DS1307.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c84  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003d44  08003d44  00013d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de4  08003de4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003de4  08003de4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003de4  08003de4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003de4  08003de4  00013de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003de8  08003de8  00013de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000070  08003e5c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08003e5c  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abcf  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001850  00000000  00000000  0002ac67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  0002c4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000880  00000000  00000000  0002cde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011df9  00000000  00000000  0002d660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4a2  00000000  00000000  0003f459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069f15  00000000  00000000  0004b8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b5810  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023fc  00000000  00000000  000b5860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d2c 	.word	0x08003d2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003d2c 	.word	0x08003d2c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <dec_to_bin>:

#define DS1307_SLAVE_ADRESS 0xD0//адреса годинника реального часу

//службова функція для переводу чисел з 10 в 2-у
uint8_t dec_to_bin(int val)
{
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 return (uint8_t)( (val/10*16) + (val % 10) );
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	210a      	movs	r1, #10
 8000424:	0018      	movs	r0, r3
 8000426:	f7ff ff0b 	bl	8000240 <__divsi3>
 800042a:	0003      	movs	r3, r0
 800042c:	b2db      	uxtb	r3, r3
 800042e:	011b      	lsls	r3, r3, #4
 8000430:	b2dc      	uxtb	r4, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	210a      	movs	r1, #10
 8000436:	0018      	movs	r0, r3
 8000438:	f7ff ffe8 	bl	800040c <__aeabi_idivmod>
 800043c:	000b      	movs	r3, r1
 800043e:	b2db      	uxtb	r3, r3
 8000440:	18e3      	adds	r3, r4, r3
 8000442:	b2db      	uxtb	r3, r3
}
 8000444:	0018      	movs	r0, r3
 8000446:	46bd      	mov	sp, r7
 8000448:	b003      	add	sp, #12
 800044a:	bd90      	pop	{r4, r7, pc}

0800044c <bin_to_dec>:

//службова функція для переводу чисел з 2 в 10-у
int bin_to_dec(uint8_t val)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	0002      	movs	r2, r0
 8000454:	1dfb      	adds	r3, r7, #7
 8000456:	701a      	strb	r2, [r3, #0]
 return (int)( (val/16*10) + (val % 16) );
 8000458:	1dfb      	adds	r3, r7, #7
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	091b      	lsrs	r3, r3, #4
 800045e:	b2db      	uxtb	r3, r3
 8000460:	001a      	movs	r2, r3
 8000462:	0013      	movs	r3, r2
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	189b      	adds	r3, r3, r2
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	0019      	movs	r1, r3
 800046c:	1dfb      	adds	r3, r7, #7
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	220f      	movs	r2, #15
 8000472:	4013      	ands	r3, r2
 8000474:	18cb      	adds	r3, r1, r3
}
 8000476:	0018      	movs	r0, r3
 8000478:	46bd      	mov	sp, r7
 800047a:	b002      	add	sp, #8
 800047c:	bd80      	pop	{r7, pc}
	...

08000480 <set_time>:
TIME time;// створюємо змінну типу TIME

//Функція для встановлення часу
void set_time(uint8_t sec, uint8_t min, uint8_t hr, uint8_t dow,
	       uint8_t dom, uint8_t mon, uint8_t yr)
{
 8000480:	b5b0      	push	{r4, r5, r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af04      	add	r7, sp, #16
 8000486:	0005      	movs	r5, r0
 8000488:	000c      	movs	r4, r1
 800048a:	0010      	movs	r0, r2
 800048c:	0019      	movs	r1, r3
 800048e:	1dfb      	adds	r3, r7, #7
 8000490:	1c2a      	adds	r2, r5, #0
 8000492:	701a      	strb	r2, [r3, #0]
 8000494:	1dbb      	adds	r3, r7, #6
 8000496:	1c22      	adds	r2, r4, #0
 8000498:	701a      	strb	r2, [r3, #0]
 800049a:	1d7b      	adds	r3, r7, #5
 800049c:	1c02      	adds	r2, r0, #0
 800049e:	701a      	strb	r2, [r3, #0]
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	1c0a      	adds	r2, r1, #0
 80004a4:	701a      	strb	r2, [r3, #0]
  uint8_t time_block[7];//масив для даних з часових регістрів RTC

  //звертаємось до кожного елементу масиву time_block
  // значення з переводимо з 10 в 1, оскільки
  time_block[0] = dec_to_bin(sec);
 80004a6:	1dfb      	adds	r3, r7, #7
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	0018      	movs	r0, r3
 80004ac:	f7ff ffb4 	bl	8000418 <dec_to_bin>
 80004b0:	0003      	movs	r3, r0
 80004b2:	001a      	movs	r2, r3
 80004b4:	2408      	movs	r4, #8
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	701a      	strb	r2, [r3, #0]
  time_block[1] = dec_to_bin(min);
 80004ba:	1dbb      	adds	r3, r7, #6
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	0018      	movs	r0, r3
 80004c0:	f7ff ffaa 	bl	8000418 <dec_to_bin>
 80004c4:	0003      	movs	r3, r0
 80004c6:	001a      	movs	r2, r3
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	705a      	strb	r2, [r3, #1]
  time_block[2] = dec_to_bin(hr);
 80004cc:	1d7b      	adds	r3, r7, #5
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	0018      	movs	r0, r3
 80004d2:	f7ff ffa1 	bl	8000418 <dec_to_bin>
 80004d6:	0003      	movs	r3, r0
 80004d8:	001a      	movs	r2, r3
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	709a      	strb	r2, [r3, #2]
  time_block[3] = dec_to_bin(dow);
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	0018      	movs	r0, r3
 80004e4:	f7ff ff98 	bl	8000418 <dec_to_bin>
 80004e8:	0003      	movs	r3, r0
 80004ea:	001a      	movs	r2, r3
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	70da      	strb	r2, [r3, #3]
  time_block[4] = dec_to_bin(dom);
 80004f0:	2320      	movs	r3, #32
 80004f2:	18fb      	adds	r3, r7, r3
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	0018      	movs	r0, r3
 80004f8:	f7ff ff8e 	bl	8000418 <dec_to_bin>
 80004fc:	0003      	movs	r3, r0
 80004fe:	001a      	movs	r2, r3
 8000500:	193b      	adds	r3, r7, r4
 8000502:	711a      	strb	r2, [r3, #4]
  time_block[5] = dec_to_bin(mon);
 8000504:	2324      	movs	r3, #36	; 0x24
 8000506:	18fb      	adds	r3, r7, r3
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	0018      	movs	r0, r3
 800050c:	f7ff ff84 	bl	8000418 <dec_to_bin>
 8000510:	0003      	movs	r3, r0
 8000512:	001a      	movs	r2, r3
 8000514:	193b      	adds	r3, r7, r4
 8000516:	715a      	strb	r2, [r3, #5]
  time_block[6] = dec_to_bin(yr);
 8000518:	2328      	movs	r3, #40	; 0x28
 800051a:	18fb      	adds	r3, r7, r3
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	0018      	movs	r0, r3
 8000520:	f7ff ff7a 	bl	8000418 <dec_to_bin>
 8000524:	0003      	movs	r3, r0
 8000526:	001a      	movs	r2, r3
 8000528:	193b      	adds	r3, r7, r4
 800052a:	719a      	strb	r2, [r3, #6]

  HAL_I2C_Mem_Write(&hi2c1, DS1307_SLAVE_ADRESS, 0x00, 1, time_block, 7, 1000);//функція для запису даних через I2C
 800052c:	4808      	ldr	r0, [pc, #32]	; (8000550 <set_time+0xd0>)
 800052e:	23fa      	movs	r3, #250	; 0xfa
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	9302      	str	r3, [sp, #8]
 8000534:	2307      	movs	r3, #7
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	193b      	adds	r3, r7, r4
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	2301      	movs	r3, #1
 800053e:	2200      	movs	r2, #0
 8000540:	21d0      	movs	r1, #208	; 0xd0
 8000542:	f001 f8c3 	bl	80016cc <HAL_I2C_Mem_Write>
}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b004      	add	sp, #16
 800054c:	bdb0      	pop	{r4, r5, r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	2000008c 	.word	0x2000008c

08000554 <get_time>:

//функція для получення часу
void get_time(TIME * t)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b089      	sub	sp, #36	; 0x24
 8000558:	af04      	add	r7, sp, #16
 800055a:	6078      	str	r0, [r7, #4]
  uint8_t time_block[7];//масив для даних з часових регістрів RTC

  HAL_I2C_Mem_Read(&hi2c1, DS1307_SLAVE_ADRESS, 0x00, 1, time_block, 7, 1000);// функція для читання даних через I2C
 800055c:	4828      	ldr	r0, [pc, #160]	; (8000600 <get_time+0xac>)
 800055e:	23fa      	movs	r3, #250	; 0xfa
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	9302      	str	r3, [sp, #8]
 8000564:	2307      	movs	r3, #7
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	2408      	movs	r4, #8
 800056a:	193b      	adds	r3, r7, r4
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2301      	movs	r3, #1
 8000570:	2200      	movs	r2, #0
 8000572:	21d0      	movs	r1, #208	; 0xd0
 8000574:	f001 f9d8 	bl	8001928 <HAL_I2C_Mem_Read>

  // звертайємось до кожного елемента структури TIME через вказівник ->
  t->seconds = bin_to_dec(time_block[0]);
 8000578:	193b      	adds	r3, r7, r4
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	0018      	movs	r0, r3
 800057e:	f7ff ff65 	bl	800044c <bin_to_dec>
 8000582:	0003      	movs	r3, r0
 8000584:	b2da      	uxtb	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	701a      	strb	r2, [r3, #0]
  t->minutes = bin_to_dec(time_block[1]);
 800058a:	193b      	adds	r3, r7, r4
 800058c:	785b      	ldrb	r3, [r3, #1]
 800058e:	0018      	movs	r0, r3
 8000590:	f7ff ff5c 	bl	800044c <bin_to_dec>
 8000594:	0003      	movs	r3, r0
 8000596:	b2da      	uxtb	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	705a      	strb	r2, [r3, #1]
  t->hours = bin_to_dec(time_block[2]);
 800059c:	193b      	adds	r3, r7, r4
 800059e:	789b      	ldrb	r3, [r3, #2]
 80005a0:	0018      	movs	r0, r3
 80005a2:	f7ff ff53 	bl	800044c <bin_to_dec>
 80005a6:	0003      	movs	r3, r0
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	709a      	strb	r2, [r3, #2]
  t->daysofweek = bin_to_dec(time_block[3]);
 80005ae:	193b      	adds	r3, r7, r4
 80005b0:	78db      	ldrb	r3, [r3, #3]
 80005b2:	0018      	movs	r0, r3
 80005b4:	f7ff ff4a 	bl	800044c <bin_to_dec>
 80005b8:	0003      	movs	r3, r0
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	70da      	strb	r2, [r3, #3]
  t->daysofmonth = bin_to_dec(time_block[4]);
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	0018      	movs	r0, r3
 80005c6:	f7ff ff41 	bl	800044c <bin_to_dec>
 80005ca:	0003      	movs	r3, r0
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	711a      	strb	r2, [r3, #4]
  t->months = bin_to_dec(time_block[5]);
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	795b      	ldrb	r3, [r3, #5]
 80005d6:	0018      	movs	r0, r3
 80005d8:	f7ff ff38 	bl	800044c <bin_to_dec>
 80005dc:	0003      	movs	r3, r0
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	715a      	strb	r2, [r3, #5]
  t->years = bin_to_dec(time_block[6]);
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	799b      	ldrb	r3, [r3, #6]
 80005e8:	0018      	movs	r0, r3
 80005ea:	f7ff ff2f 	bl	800044c <bin_to_dec>
 80005ee:	0003      	movs	r3, r0
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	719a      	strb	r2, [r3, #6]
}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b005      	add	sp, #20
 80005fc:	bd90      	pop	{r4, r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	2000008c 	.word	0x2000008c

08000604 <lcd_send_cmd>:


// функція відправки символів
void lcd_send_cmd(uint8_t cmd, I2C_HandleTypeDef * i2c_type)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b087      	sub	sp, #28
 8000608:	af02      	add	r7, sp, #8
 800060a:	0002      	movs	r2, r0
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	701a      	strb	r2, [r3, #0]
	uint8_t upper_half_byte;
	uint8_t lower_half_byte;
	uint8_t data[4];

	upper_half_byte = cmd & 0xf0; //0xf0 = 11110000
 8000612:	200f      	movs	r0, #15
 8000614:	183b      	adds	r3, r7, r0
 8000616:	1dfa      	adds	r2, r7, #7
 8000618:	7812      	ldrb	r2, [r2, #0]
 800061a:	210f      	movs	r1, #15
 800061c:	438a      	bics	r2, r1
 800061e:	701a      	strb	r2, [r3, #0]
	lower_half_byte = (cmd << 4) & 0xf0;
 8000620:	1dfb      	adds	r3, r7, #7
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	011a      	lsls	r2, r3, #4
 8000626:	240e      	movs	r4, #14
 8000628:	193b      	adds	r3, r7, r4
 800062a:	701a      	strb	r2, [r3, #0]
	data[0] = upper_half_byte | 0x0C; //0x0C = 0000 1100, rs = 0, en = 1
 800062c:	183b      	adds	r3, r7, r0
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	220c      	movs	r2, #12
 8000632:	4313      	orrs	r3, r2
 8000634:	b2da      	uxtb	r2, r3
 8000636:	2108      	movs	r1, #8
 8000638:	187b      	adds	r3, r7, r1
 800063a:	701a      	strb	r2, [r3, #0]
	data[1] = upper_half_byte | 0x08; //0x08 = 0000 1000, rs = 0, en = 0
 800063c:	183b      	adds	r3, r7, r0
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2208      	movs	r2, #8
 8000642:	4313      	orrs	r3, r2
 8000644:	b2da      	uxtb	r2, r3
 8000646:	187b      	adds	r3, r7, r1
 8000648:	705a      	strb	r2, [r3, #1]
	data[2] = lower_half_byte | 0x0C; //0x0C = 0000 1100, rs = 0, en = 1
 800064a:	193b      	adds	r3, r7, r4
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	220c      	movs	r2, #12
 8000650:	4313      	orrs	r3, r2
 8000652:	b2da      	uxtb	r2, r3
 8000654:	187b      	adds	r3, r7, r1
 8000656:	709a      	strb	r2, [r3, #2]
	data[3] = lower_half_byte | 0x08; //0x08 = 0000 1000, rs = 0, en = 0
 8000658:	193b      	adds	r3, r7, r4
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2208      	movs	r2, #8
 800065e:	4313      	orrs	r3, r2
 8000660:	b2da      	uxtb	r2, r3
 8000662:	187b      	adds	r3, r7, r1
 8000664:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit(i2c_type, LCD_1602_SLAVE_ADRESS, data, 4, 100);
 8000666:	187a      	adds	r2, r7, r1
 8000668:	6838      	ldr	r0, [r7, #0]
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2304      	movs	r3, #4
 8000670:	214e      	movs	r1, #78	; 0x4e
 8000672:	f000 ff23 	bl	80014bc <HAL_I2C_Master_Transmit>
}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b005      	add	sp, #20
 800067c:	bd90      	pop	{r4, r7, pc}

0800067e <lcd_send_data>:

void lcd_send_data(uint8_t dat, I2C_HandleTypeDef * i2c_type)
{
 800067e:	b590      	push	{r4, r7, lr}
 8000680:	b087      	sub	sp, #28
 8000682:	af02      	add	r7, sp, #8
 8000684:	0002      	movs	r2, r0
 8000686:	6039      	str	r1, [r7, #0]
 8000688:	1dfb      	adds	r3, r7, #7
 800068a:	701a      	strb	r2, [r3, #0]
	//dat &= ~0x08; //display off, cursor off
	uint8_t upper_half_byte;
	uint8_t lower_half_byte;
	uint8_t data[4];

	upper_half_byte = dat & 0xf0; //0xf0 = 11110000
 800068c:	200f      	movs	r0, #15
 800068e:	183b      	adds	r3, r7, r0
 8000690:	1dfa      	adds	r2, r7, #7
 8000692:	7812      	ldrb	r2, [r2, #0]
 8000694:	210f      	movs	r1, #15
 8000696:	438a      	bics	r2, r1
 8000698:	701a      	strb	r2, [r3, #0]
	lower_half_byte = (dat << 4) & 0xf0;
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	011a      	lsls	r2, r3, #4
 80006a0:	240e      	movs	r4, #14
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	701a      	strb	r2, [r3, #0]
	data[0] = upper_half_byte | 0x0D; // rs = 1, en = 1
 80006a6:	183b      	adds	r3, r7, r0
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	220d      	movs	r2, #13
 80006ac:	4313      	orrs	r3, r2
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	2108      	movs	r1, #8
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	701a      	strb	r2, [r3, #0]
	data[1] = upper_half_byte | 0x09; // rs = 1, en = 0
 80006b6:	183b      	adds	r3, r7, r0
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2209      	movs	r2, #9
 80006bc:	4313      	orrs	r3, r2
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	705a      	strb	r2, [r3, #1]
	data[2] = lower_half_byte | 0x0D; // rs = 1, en = 1
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	220d      	movs	r2, #13
 80006ca:	4313      	orrs	r3, r2
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	709a      	strb	r2, [r3, #2]
	data[3] = lower_half_byte | 0x09;  //rs = 1, en = 0
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2209      	movs	r2, #9
 80006d8:	4313      	orrs	r3, r2
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit(i2c_type, LCD_1602_SLAVE_ADRESS, data, 4, 100);
 80006e0:	187a      	adds	r2, r7, r1
 80006e2:	6838      	ldr	r0, [r7, #0]
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2304      	movs	r3, #4
 80006ea:	214e      	movs	r1, #78	; 0x4e
 80006ec:	f000 fee6 	bl	80014bc <HAL_I2C_Master_Transmit>
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b005      	add	sp, #20
 80006f6:	bd90      	pop	{r4, r7, pc}

080006f8 <lcd_init>:

//фунція ініціалізації дисплея на лінії I2C
void lcd_init(I2C_HandleTypeDef * i2c_type)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	//4-bit initialisation

	HAL_Delay(50); //wait for more than 40 ms
 8000700:	2032      	movs	r0, #50	; 0x32
 8000702:	f000 fbdf 	bl	8000ec4 <HAL_Delay>
	lcd_send_cmd(0x30, i2c_type);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	0019      	movs	r1, r3
 800070a:	2030      	movs	r0, #48	; 0x30
 800070c:	f7ff ff7a 	bl	8000604 <lcd_send_cmd>
	HAL_Delay(5);
 8000710:	2005      	movs	r0, #5
 8000712:	f000 fbd7 	bl	8000ec4 <HAL_Delay>
	lcd_send_cmd(0x30, i2c_type);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	0019      	movs	r1, r3
 800071a:	2030      	movs	r0, #48	; 0x30
 800071c:	f7ff ff72 	bl	8000604 <lcd_send_cmd>
	HAL_Delay(1); //wait for 100 us
 8000720:	2001      	movs	r0, #1
 8000722:	f000 fbcf 	bl	8000ec4 <HAL_Delay>
	lcd_send_cmd(0x30, i2c_type);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	0019      	movs	r1, r3
 800072a:	2030      	movs	r0, #48	; 0x30
 800072c:	f7ff ff6a 	bl	8000604 <lcd_send_cmd>

	HAL_Delay(1);
 8000730:	2001      	movs	r0, #1
 8000732:	f000 fbc7 	bl	8000ec4 <HAL_Delay>
	lcd_send_cmd(0x20, i2c_type);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	0019      	movs	r1, r3
 800073a:	2020      	movs	r0, #32
 800073c:	f7ff ff62 	bl	8000604 <lcd_send_cmd>
	HAL_Delay(1);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fbbf 	bl	8000ec4 <HAL_Delay>
	lcd_send_cmd(0x20, i2c_type);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	0019      	movs	r1, r3
 800074a:	2020      	movs	r0, #32
 800074c:	f7ff ff5a 	bl	8000604 <lcd_send_cmd>
	HAL_Delay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f000 fbb7 	bl	8000ec4 <HAL_Delay>
	lcd_send_cmd(0x80, i2c_type); //function set
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	0019      	movs	r1, r3
 800075a:	2080      	movs	r0, #128	; 0x80
 800075c:	f7ff ff52 	bl	8000604 <lcd_send_cmd>
	HAL_Delay(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f000 fbaf 	bl	8000ec4 <HAL_Delay>
	lcd_send_cmd(0x00, i2c_type); //display off
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	0019      	movs	r1, r3
 800076a:	2000      	movs	r0, #0
 800076c:	f7ff ff4a 	bl	8000604 <lcd_send_cmd>
	HAL_Delay(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 fba7 	bl	8000ec4 <HAL_Delay>
	lcd_send_cmd(0x80, i2c_type); //display clear
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	0019      	movs	r1, r3
 800077a:	2080      	movs	r0, #128	; 0x80
 800077c:	f7ff ff42 	bl	8000604 <lcd_send_cmd>
	HAL_Delay(1);
 8000780:	2001      	movs	r0, #1
 8000782:	f000 fb9f 	bl	8000ec4 <HAL_Delay>
	lcd_send_cmd(0x00, i2c_type); //display off
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	0019      	movs	r1, r3
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff ff3a 	bl	8000604 <lcd_send_cmd>
	HAL_Delay(1);
 8000790:	2001      	movs	r0, #1
 8000792:	f000 fb97 	bl	8000ec4 <HAL_Delay>
	lcd_send_cmd(0x10, i2c_type);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	0019      	movs	r1, r3
 800079a:	2010      	movs	r0, #16
 800079c:	f7ff ff32 	bl	8000604 <lcd_send_cmd>
	HAL_Delay(1);
 80007a0:	2001      	movs	r0, #1
 80007a2:	f000 fb8f 	bl	8000ec4 <HAL_Delay>
	lcd_send_cmd(0x00, i2c_type); //display off
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	0019      	movs	r1, r3
 80007aa:	2000      	movs	r0, #0
 80007ac:	f7ff ff2a 	bl	8000604 <lcd_send_cmd>
	HAL_Delay(1);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 fb87 	bl	8000ec4 <HAL_Delay>
	lcd_send_cmd(0xC0, i2c_type);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	0019      	movs	r1, r3
 80007ba:	20c0      	movs	r0, #192	; 0xc0
 80007bc:	f7ff ff22 	bl	8000604 <lcd_send_cmd>
}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b002      	add	sp, #8
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <lcd_send_string>:

//функція відправки рядка
void lcd_send_string (char *str, I2C_HandleTypeDef * i2c_type)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	while (*str) lcd_send_data (*str++, i2c_type);
 80007d2:	e008      	b.n	80007e6 <lcd_send_string+0x1e>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	1c5a      	adds	r2, r3, #1
 80007d8:	607a      	str	r2, [r7, #4]
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	0011      	movs	r1, r2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff ff4c 	bl	800067e <lcd_send_data>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1f2      	bne.n	80007d4 <lcd_send_string+0xc>
}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b002      	add	sp, #8
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007fa:	46c6      	mov	lr, r8
 80007fc:	b500      	push	{lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f000 fafb 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 f86f 	bl	80008e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080a:	f000 f93d 	bl	8000a88 <MX_GPIO_Init>
  MX_I2C1_Init();
 800080e:	f000 f8cb 	bl	80009a8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000812:	f000 f909 	bl	8000a28 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



  //задаємо час( секунди, хвилини, години, день тижня, день місяця, місяць, рік)
  set_time(0, 03, 20, 2, 3, 1, 23);
 8000816:	2317      	movs	r3, #23
 8000818:	9302      	str	r3, [sp, #8]
 800081a:	2301      	movs	r3, #1
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	2303      	movs	r3, #3
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2302      	movs	r3, #2
 8000824:	2214      	movs	r2, #20
 8000826:	2103      	movs	r1, #3
 8000828:	2000      	movs	r0, #0
 800082a:	f7ff fe29 	bl	8000480 <set_time>
  /* USER CODE END 2 */

    lcd_init(&hi2c1);//ініціалізуємо дисплей на 1-ому i2c
 800082e:	4b27      	ldr	r3, [pc, #156]	; (80008cc <main+0xd4>)
 8000830:	0018      	movs	r0, r3
 8000832:	f7ff ff61 	bl	80006f8 <lcd_init>

	lcd_send_string("HELLO WORLD",&hi2c1);
 8000836:	4a25      	ldr	r2, [pc, #148]	; (80008cc <main+0xd4>)
 8000838:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <main+0xd8>)
 800083a:	0011      	movs	r1, r2
 800083c:	0018      	movs	r0, r3
 800083e:	f7ff ffc3 	bl	80007c8 <lcd_send_string>

	HAL_Delay(1000);
 8000842:	23fa      	movs	r3, #250	; 0xfa
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	0018      	movs	r0, r3
 8000848:	f000 fb3c 	bl	8000ec4 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  get_time(&time);
 800084c:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <main+0xdc>)
 800084e:	0018      	movs	r0, r3
 8000850:	f7ff fe80 	bl	8000554 <get_time>
	  sprintf(buf, "%02d:%02d:%02d %02d-%02d-%02d-%02d", time.seconds, time.minutes,
 8000854:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <main+0xdc>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	469c      	mov	ip, r3
 800085a:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <main+0xdc>)
 800085c:	785b      	ldrb	r3, [r3, #1]
 800085e:	4698      	mov	r8, r3
														 time.hours, time.daysofweek,
 8000860:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <main+0xdc>)
 8000862:	789b      	ldrb	r3, [r3, #2]
	  sprintf(buf, "%02d:%02d:%02d %02d-%02d-%02d-%02d", time.seconds, time.minutes,
 8000864:	001a      	movs	r2, r3
														 time.hours, time.daysofweek,
 8000866:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <main+0xdc>)
 8000868:	78db      	ldrb	r3, [r3, #3]
	  sprintf(buf, "%02d:%02d:%02d %02d-%02d-%02d-%02d", time.seconds, time.minutes,
 800086a:	001c      	movs	r4, r3
														 time.daysofmonth,time.months,
 800086c:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <main+0xdc>)
 800086e:	791b      	ldrb	r3, [r3, #4]
	  sprintf(buf, "%02d:%02d:%02d %02d-%02d-%02d-%02d", time.seconds, time.minutes,
 8000870:	001d      	movs	r5, r3
														 time.daysofmonth,time.months,
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <main+0xdc>)
 8000874:	795b      	ldrb	r3, [r3, #5]
	  sprintf(buf, "%02d:%02d:%02d %02d-%02d-%02d-%02d", time.seconds, time.minutes,
 8000876:	001e      	movs	r6, r3
														 time.years);
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <main+0xdc>)
 800087a:	799b      	ldrb	r3, [r3, #6]
	  sprintf(buf, "%02d:%02d:%02d %02d-%02d-%02d-%02d", time.seconds, time.minutes,
 800087c:	4916      	ldr	r1, [pc, #88]	; (80008d8 <main+0xe0>)
 800087e:	4817      	ldr	r0, [pc, #92]	; (80008dc <main+0xe4>)
 8000880:	9304      	str	r3, [sp, #16]
 8000882:	9603      	str	r6, [sp, #12]
 8000884:	9502      	str	r5, [sp, #8]
 8000886:	9401      	str	r4, [sp, #4]
 8000888:	9200      	str	r2, [sp, #0]
 800088a:	4643      	mov	r3, r8
 800088c:	4662      	mov	r2, ip
 800088e:	f002 fded 	bl	800346c <siprintf>
	  strcat(buf, "\n");
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <main+0xe4>)
 8000894:	0018      	movs	r0, r3
 8000896:	f7ff fc37 	bl	8000108 <strlen>
 800089a:	0003      	movs	r3, r0
 800089c:	001a      	movs	r2, r3
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <main+0xe4>)
 80008a0:	18d2      	adds	r2, r2, r3
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <main+0xe8>)
 80008a4:	0010      	movs	r0, r2
 80008a6:	0019      	movs	r1, r3
 80008a8:	2302      	movs	r3, #2
 80008aa:	001a      	movs	r2, r3
 80008ac:	f002 fdcc 	bl	8003448 <memcpy>
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, sizeof(buf), 1000);
 80008b0:	23fa      	movs	r3, #250	; 0xfa
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	4909      	ldr	r1, [pc, #36]	; (80008dc <main+0xe4>)
 80008b6:	480b      	ldr	r0, [pc, #44]	; (80008e4 <main+0xec>)
 80008b8:	2215      	movs	r2, #21
 80008ba:	f002 f9f1 	bl	8002ca0 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80008be:	23fa      	movs	r3, #250	; 0xfa
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fafe 	bl	8000ec4 <HAL_Delay>
	  get_time(&time);
 80008c8:	e7c0      	b.n	800084c <main+0x54>
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	2000008c 	.word	0x2000008c
 80008d0:	08003d44 	.word	0x08003d44
 80008d4:	20000174 	.word	0x20000174
 80008d8:	08003d50 	.word	0x08003d50
 80008dc:	2000015c 	.word	0x2000015c
 80008e0:	08003d74 	.word	0x08003d74
 80008e4:	200000d8 	.word	0x200000d8

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b097      	sub	sp, #92	; 0x5c
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	2428      	movs	r4, #40	; 0x28
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	0018      	movs	r0, r3
 80008f4:	2330      	movs	r3, #48	; 0x30
 80008f6:	001a      	movs	r2, r3
 80008f8:	2100      	movs	r1, #0
 80008fa:	f002 fdae 	bl	800345a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fe:	2318      	movs	r3, #24
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	0018      	movs	r0, r3
 8000904:	2310      	movs	r3, #16
 8000906:	001a      	movs	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f002 fda6 	bl	800345a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	0018      	movs	r0, r3
 8000912:	2314      	movs	r3, #20
 8000914:	001a      	movs	r2, r3
 8000916:	2100      	movs	r1, #0
 8000918:	f002 fd9f 	bl	800345a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091c:	0021      	movs	r1, r4
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2201      	movs	r2, #1
 8000922:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2201      	movs	r2, #1
 8000928:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2202      	movs	r2, #2
 800092e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2280      	movs	r2, #128	; 0x80
 8000934:	0252      	lsls	r2, r2, #9
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	0352      	lsls	r2, r2, #13
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2200      	movs	r2, #0
 8000944:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000946:	187b      	adds	r3, r7, r1
 8000948:	0018      	movs	r0, r3
 800094a:	f001 fc0b 	bl	8002164 <HAL_RCC_OscConfig>
 800094e:	1e03      	subs	r3, r0, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000952:	f000 f911 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000956:	2118      	movs	r1, #24
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2207      	movs	r2, #7
 800095c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2202      	movs	r2, #2
 8000962:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2101      	movs	r1, #1
 8000974:	0018      	movs	r0, r3
 8000976:	f001 ff0f 	bl	8002798 <HAL_RCC_ClockConfig>
 800097a:	1e03      	subs	r3, r0, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800097e:	f000 f8fb 	bl	8000b78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2220      	movs	r2, #32
 8000986:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2210      	movs	r2, #16
 800098c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	0018      	movs	r0, r3
 8000992:	f002 f853 	bl	8002a3c <HAL_RCCEx_PeriphCLKConfig>
 8000996:	1e03      	subs	r3, r0, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800099a:	f000 f8ed 	bl	8000b78 <Error_Handler>
  }
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b017      	add	sp, #92	; 0x5c
 80009a4:	bd90      	pop	{r4, r7, pc}
	...

080009a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009ae:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <MX_I2C1_Init+0x78>)
 80009b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009b4:	4a1b      	ldr	r2, [pc, #108]	; (8000a24 <MX_I2C1_Init+0x7c>)
 80009b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 fcd3 	bl	8001390 <HAL_I2C_Init>
 80009ea:	1e03      	subs	r3, r0, #0
 80009ec:	d001      	beq.n	80009f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ee:	f000 f8c3 	bl	8000b78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009f4:	2100      	movs	r1, #0
 80009f6:	0018      	movs	r0, r3
 80009f8:	f001 fb1c 	bl	8002034 <HAL_I2CEx_ConfigAnalogFilter>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d001      	beq.n	8000a04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a00:	f000 f8ba 	bl	8000b78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <MX_I2C1_Init+0x74>)
 8000a06:	2100      	movs	r1, #0
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f001 fb5f 	bl	80020cc <HAL_I2CEx_ConfigDigitalFilter>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d001      	beq.n	8000a16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a12:	f000 f8b1 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000008c 	.word	0x2000008c
 8000a20:	40005400 	.word	0x40005400
 8000a24:	2010091a 	.word	0x2010091a

08000a28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a2e:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <MX_USART2_UART_Init+0x5c>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a34:	2296      	movs	r2, #150	; 0x96
 8000a36:	0192      	lsls	r2, r2, #6
 8000a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f002 f8c3 	bl	8002bf8 <HAL_UART_Init>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a76:	f000 f87f 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200000d8 	.word	0x200000d8
 8000a84:	40004400 	.word	0x40004400

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b08b      	sub	sp, #44	; 0x2c
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	2414      	movs	r4, #20
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	0018      	movs	r0, r3
 8000a94:	2314      	movs	r3, #20
 8000a96:	001a      	movs	r2, r3
 8000a98:	2100      	movs	r1, #0
 8000a9a:	f002 fcde 	bl	800345a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a9e:	4b34      	ldr	r3, [pc, #208]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000aa0:	695a      	ldr	r2, [r3, #20]
 8000aa2:	4b33      	ldr	r3, [pc, #204]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000aa4:	2180      	movs	r1, #128	; 0x80
 8000aa6:	03c9      	lsls	r1, r1, #15
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	615a      	str	r2, [r3, #20]
 8000aac:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000aae:	695a      	ldr	r2, [r3, #20]
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	03db      	lsls	r3, r3, #15
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000abc:	695a      	ldr	r2, [r3, #20]
 8000abe:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	0289      	lsls	r1, r1, #10
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	615a      	str	r2, [r3, #20]
 8000ac8:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000aca:	695a      	ldr	r2, [r3, #20]
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	029b      	lsls	r3, r3, #10
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000ad8:	695a      	ldr	r2, [r3, #20]
 8000ada:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	0309      	lsls	r1, r1, #12
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	615a      	str	r2, [r3, #20]
 8000ae4:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000ae6:	695a      	ldr	r2, [r3, #20]
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	031b      	lsls	r3, r3, #12
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000af4:	695a      	ldr	r2, [r3, #20]
 8000af6:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	02c9      	lsls	r1, r1, #11
 8000afc:	430a      	orrs	r2, r1
 8000afe:	615a      	str	r2, [r3, #20]
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <MX_GPIO_Init+0xe8>)
 8000b02:	695a      	ldr	r2, [r3, #20]
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	02db      	lsls	r3, r3, #11
 8000b08:	4013      	ands	r3, r2
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b0e:	23c0      	movs	r3, #192	; 0xc0
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4818      	ldr	r0, [pc, #96]	; (8000b74 <MX_GPIO_Init+0xec>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	0019      	movs	r1, r3
 8000b18:	f000 fc1c 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	2201      	movs	r2, #1
 8000b20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	2290      	movs	r2, #144	; 0x90
 8000b26:	0352      	lsls	r2, r2, #13
 8000b28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b30:	193a      	adds	r2, r7, r4
 8000b32:	2390      	movs	r3, #144	; 0x90
 8000b34:	05db      	lsls	r3, r3, #23
 8000b36:	0011      	movs	r1, r2
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f000 fa9b 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000b3e:	0021      	movs	r1, r4
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	22c0      	movs	r2, #192	; 0xc0
 8000b44:	0092      	lsls	r2, r2, #2
 8000b46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <MX_GPIO_Init+0xec>)
 8000b5e:	0019      	movs	r1, r3
 8000b60:	0010      	movs	r0, r2
 8000b62:	f000 fa87 	bl	8001074 <HAL_GPIO_Init>

}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b00b      	add	sp, #44	; 0x2c
 8000b6c:	bd90      	pop	{r4, r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	40021000 	.word	0x40021000
 8000b74:	48000800 	.word	0x48000800

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <Error_Handler+0x8>
	...

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_MspInit+0x44>)
 8000b8c:	699a      	ldr	r2, [r3, #24]
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_MspInit+0x44>)
 8000b90:	2101      	movs	r1, #1
 8000b92:	430a      	orrs	r2, r1
 8000b94:	619a      	str	r2, [r3, #24]
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_MspInit+0x44>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_MspInit+0x44>)
 8000ba4:	69da      	ldr	r2, [r3, #28]
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_MspInit+0x44>)
 8000ba8:	2180      	movs	r1, #128	; 0x80
 8000baa:	0549      	lsls	r1, r1, #21
 8000bac:	430a      	orrs	r2, r1
 8000bae:	61da      	str	r2, [r3, #28]
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_MspInit+0x44>)
 8000bb2:	69da      	ldr	r2, [r3, #28]
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	055b      	lsls	r3, r3, #21
 8000bb8:	4013      	ands	r3, r2
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	40021000 	.word	0x40021000

08000bcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b08b      	sub	sp, #44	; 0x2c
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	2414      	movs	r4, #20
 8000bd6:	193b      	adds	r3, r7, r4
 8000bd8:	0018      	movs	r0, r3
 8000bda:	2314      	movs	r3, #20
 8000bdc:	001a      	movs	r2, r3
 8000bde:	2100      	movs	r1, #0
 8000be0:	f002 fc3b 	bl	800345a <memset>
  if(hi2c->Instance==I2C1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a1c      	ldr	r2, [pc, #112]	; (8000c5c <HAL_I2C_MspInit+0x90>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d131      	bne.n	8000c52 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <HAL_I2C_MspInit+0x94>)
 8000bf0:	695a      	ldr	r2, [r3, #20]
 8000bf2:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <HAL_I2C_MspInit+0x94>)
 8000bf4:	2180      	movs	r1, #128	; 0x80
 8000bf6:	02c9      	lsls	r1, r1, #11
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	615a      	str	r2, [r3, #20]
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <HAL_I2C_MspInit+0x94>)
 8000bfe:	695a      	ldr	r2, [r3, #20]
 8000c00:	2380      	movs	r3, #128	; 0x80
 8000c02:	02db      	lsls	r3, r3, #11
 8000c04:	4013      	ands	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c0a:	0021      	movs	r1, r4
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	22c0      	movs	r2, #192	; 0xc0
 8000c10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2212      	movs	r2, #18
 8000c16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2203      	movs	r2, #3
 8000c22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2201      	movs	r2, #1
 8000c28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <HAL_I2C_MspInit+0x98>)
 8000c2e:	0019      	movs	r1, r3
 8000c30:	0010      	movs	r0, r2
 8000c32:	f000 fa1f 	bl	8001074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_I2C_MspInit+0x94>)
 8000c38:	69da      	ldr	r2, [r3, #28]
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_I2C_MspInit+0x94>)
 8000c3c:	2180      	movs	r1, #128	; 0x80
 8000c3e:	0389      	lsls	r1, r1, #14
 8000c40:	430a      	orrs	r2, r1
 8000c42:	61da      	str	r2, [r3, #28]
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_I2C_MspInit+0x94>)
 8000c46:	69da      	ldr	r2, [r3, #28]
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	039b      	lsls	r3, r3, #14
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b00b      	add	sp, #44	; 0x2c
 8000c58:	bd90      	pop	{r4, r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	40021000 	.word	0x40021000
 8000c64:	48000400 	.word	0x48000400

08000c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b08b      	sub	sp, #44	; 0x2c
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	2414      	movs	r4, #20
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	0018      	movs	r0, r3
 8000c76:	2314      	movs	r3, #20
 8000c78:	001a      	movs	r2, r3
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	f002 fbed 	bl	800345a <memset>
  if(huart->Instance==USART2)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a1c      	ldr	r2, [pc, #112]	; (8000cf8 <HAL_UART_MspInit+0x90>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d132      	bne.n	8000cf0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <HAL_UART_MspInit+0x94>)
 8000c8c:	69da      	ldr	r2, [r3, #28]
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <HAL_UART_MspInit+0x94>)
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	0289      	lsls	r1, r1, #10
 8000c94:	430a      	orrs	r2, r1
 8000c96:	61da      	str	r2, [r3, #28]
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_UART_MspInit+0x94>)
 8000c9a:	69da      	ldr	r2, [r3, #28]
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	029b      	lsls	r3, r3, #10
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_UART_MspInit+0x94>)
 8000ca8:	695a      	ldr	r2, [r3, #20]
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_UART_MspInit+0x94>)
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	0289      	lsls	r1, r1, #10
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	615a      	str	r2, [r3, #20]
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_UART_MspInit+0x94>)
 8000cb6:	695a      	ldr	r2, [r3, #20]
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	029b      	lsls	r3, r3, #10
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cc2:	0021      	movs	r1, r4
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2202      	movs	r2, #2
 8000cce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2203      	movs	r2, #3
 8000cda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2201      	movs	r2, #1
 8000ce0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	187a      	adds	r2, r7, r1
 8000ce4:	2390      	movs	r3, #144	; 0x90
 8000ce6:	05db      	lsls	r3, r3, #23
 8000ce8:	0011      	movs	r1, r2
 8000cea:	0018      	movs	r0, r3
 8000cec:	f000 f9c2 	bl	8001074 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b00b      	add	sp, #44	; 0x2c
 8000cf6:	bd90      	pop	{r4, r7, pc}
 8000cf8:	40004400 	.word	0x40004400
 8000cfc:	40021000 	.word	0x40021000

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <NMI_Handler+0x4>

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d24:	f000 f8b2 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	18d3      	adds	r3, r2, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d60:	f002 fb48 	bl	80033f4 <__errno>
 8000d64:	0003      	movs	r3, r0
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	425b      	negs	r3, r3
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	18d2      	adds	r2, r2, r3
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <_sbrk+0x64>)
 8000d80:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	0018      	movs	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b006      	add	sp, #24
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20002000 	.word	0x20002000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	2000017c 	.word	0x2000017c
 8000d98:	20000198 	.word	0x20000198

08000d9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000da8:	480d      	ldr	r0, [pc, #52]	; (8000de0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000daa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dac:	480d      	ldr	r0, [pc, #52]	; (8000de4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dae:	490e      	ldr	r1, [pc, #56]	; (8000de8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db0:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <LoopForever+0xe>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc4:	4c0b      	ldr	r4, [pc, #44]	; (8000df4 <LoopForever+0x16>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dd2:	f7ff ffe3 	bl	8000d9c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000dd6:	f002 fb13 	bl	8003400 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dda:	f7ff fd0d 	bl	80007f8 <main>

08000dde <LoopForever>:

LoopForever:
    b LoopForever
 8000dde:	e7fe      	b.n	8000dde <LoopForever>
  ldr   r0, =_estack
 8000de0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dec:	08003dec 	.word	0x08003dec
  ldr r2, =_sbss
 8000df0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000df4:	20000194 	.word	0x20000194

08000df8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC1_COMP_IRQHandler>
	...

08000dfc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <HAL_Init+0x24>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_Init+0x24>)
 8000e06:	2110      	movs	r1, #16
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f000 f809 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e12:	f7ff feb7 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	0018      	movs	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	40022000 	.word	0x40022000

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_InitTick+0x5c>)
 8000e2e:	681c      	ldr	r4, [r3, #0]
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <HAL_InitTick+0x60>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	0019      	movs	r1, r3
 8000e36:	23fa      	movs	r3, #250	; 0xfa
 8000e38:	0098      	lsls	r0, r3, #2
 8000e3a:	f7ff f977 	bl	800012c <__udivsi3>
 8000e3e:	0003      	movs	r3, r0
 8000e40:	0019      	movs	r1, r3
 8000e42:	0020      	movs	r0, r4
 8000e44:	f7ff f972 	bl	800012c <__udivsi3>
 8000e48:	0003      	movs	r3, r0
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f000 f905 	bl	800105a <HAL_SYSTICK_Config>
 8000e50:	1e03      	subs	r3, r0, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e00f      	b.n	8000e78 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d80b      	bhi.n	8000e76 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	2301      	movs	r3, #1
 8000e62:	425b      	negs	r3, r3
 8000e64:	2200      	movs	r2, #0
 8000e66:	0018      	movs	r0, r3
 8000e68:	f000 f8e2 	bl	8001030 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_InitTick+0x64>)
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b003      	add	sp, #12
 8000e7e:	bd90      	pop	{r4, r7, pc}
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_IncTick+0x1c>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	001a      	movs	r2, r3
 8000e96:	4b05      	ldr	r3, [pc, #20]	; (8000eac <HAL_IncTick+0x20>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	18d2      	adds	r2, r2, r3
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_IncTick+0x20>)
 8000e9e:	601a      	str	r2, [r3, #0]
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000180 	.word	0x20000180

08000eb0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb4:	4b02      	ldr	r3, [pc, #8]	; (8000ec0 <HAL_GetTick+0x10>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
}
 8000eb8:	0018      	movs	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	20000180 	.word	0x20000180

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff fff0 	bl	8000eb0 <HAL_GetTick>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	3301      	adds	r3, #1
 8000edc:	d005      	beq.n	8000eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_Delay+0x44>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	001a      	movs	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	189b      	adds	r3, r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	f7ff ffe0 	bl	8000eb0 <HAL_GetTick>
 8000ef0:	0002      	movs	r2, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f7      	bhi.n	8000eec <HAL_Delay+0x28>
  {
  }
}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b004      	add	sp, #16
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	20000008 	.word	0x20000008

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	0002      	movs	r2, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f20:	d828      	bhi.n	8000f74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f22:	4a2f      	ldr	r2, [pc, #188]	; (8000fe0 <__NVIC_SetPriority+0xd4>)
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	33c0      	adds	r3, #192	; 0xc0
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	589b      	ldr	r3, [r3, r2]
 8000f32:	1dfa      	adds	r2, r7, #7
 8000f34:	7812      	ldrb	r2, [r2, #0]
 8000f36:	0011      	movs	r1, r2
 8000f38:	2203      	movs	r2, #3
 8000f3a:	400a      	ands	r2, r1
 8000f3c:	00d2      	lsls	r2, r2, #3
 8000f3e:	21ff      	movs	r1, #255	; 0xff
 8000f40:	4091      	lsls	r1, r2
 8000f42:	000a      	movs	r2, r1
 8000f44:	43d2      	mvns	r2, r2
 8000f46:	401a      	ands	r2, r3
 8000f48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	019b      	lsls	r3, r3, #6
 8000f4e:	22ff      	movs	r2, #255	; 0xff
 8000f50:	401a      	ands	r2, r3
 8000f52:	1dfb      	adds	r3, r7, #7
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	0018      	movs	r0, r3
 8000f58:	2303      	movs	r3, #3
 8000f5a:	4003      	ands	r3, r0
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f60:	481f      	ldr	r0, [pc, #124]	; (8000fe0 <__NVIC_SetPriority+0xd4>)
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b25b      	sxtb	r3, r3
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	33c0      	adds	r3, #192	; 0xc0
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f72:	e031      	b.n	8000fd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f74:	4a1b      	ldr	r2, [pc, #108]	; (8000fe4 <__NVIC_SetPriority+0xd8>)
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	0019      	movs	r1, r3
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	400b      	ands	r3, r1
 8000f80:	3b08      	subs	r3, #8
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3306      	adds	r3, #6
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	18d3      	adds	r3, r2, r3
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	1dfa      	adds	r2, r7, #7
 8000f90:	7812      	ldrb	r2, [r2, #0]
 8000f92:	0011      	movs	r1, r2
 8000f94:	2203      	movs	r2, #3
 8000f96:	400a      	ands	r2, r1
 8000f98:	00d2      	lsls	r2, r2, #3
 8000f9a:	21ff      	movs	r1, #255	; 0xff
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	000a      	movs	r2, r1
 8000fa0:	43d2      	mvns	r2, r2
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	019b      	lsls	r3, r3, #6
 8000faa:	22ff      	movs	r2, #255	; 0xff
 8000fac:	401a      	ands	r2, r3
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	4003      	ands	r3, r0
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fbc:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <__NVIC_SetPriority+0xd8>)
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	001c      	movs	r4, r3
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	4023      	ands	r3, r4
 8000fc8:	3b08      	subs	r3, #8
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	3306      	adds	r3, #6
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	18c3      	adds	r3, r0, r3
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	601a      	str	r2, [r3, #0]
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b003      	add	sp, #12
 8000fde:	bd90      	pop	{r4, r7, pc}
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	1e5a      	subs	r2, r3, #1
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	045b      	lsls	r3, r3, #17
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d301      	bcc.n	8001000 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e010      	b.n	8001022 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <SysTick_Config+0x44>)
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	3a01      	subs	r2, #1
 8001006:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001008:	2301      	movs	r3, #1
 800100a:	425b      	negs	r3, r3
 800100c:	2103      	movs	r1, #3
 800100e:	0018      	movs	r0, r3
 8001010:	f7ff ff7c 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <SysTick_Config+0x44>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <SysTick_Config+0x44>)
 800101c:	2207      	movs	r2, #7
 800101e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001020:	2300      	movs	r3, #0
}
 8001022:	0018      	movs	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	e000e010 	.word	0xe000e010

08001030 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	210f      	movs	r1, #15
 800103c:	187b      	adds	r3, r7, r1
 800103e:	1c02      	adds	r2, r0, #0
 8001040:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	187b      	adds	r3, r7, r1
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b25b      	sxtb	r3, r3
 800104a:	0011      	movs	r1, r2
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff ff5d 	bl	8000f0c <__NVIC_SetPriority>
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b004      	add	sp, #16
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff ffbf 	bl	8000fe8 <SysTick_Config>
 800106a:	0003      	movs	r3, r0
}
 800106c:	0018      	movs	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	b002      	add	sp, #8
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001082:	e14f      	b.n	8001324 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2101      	movs	r1, #1
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4091      	lsls	r1, r2
 800108e:	000a      	movs	r2, r1
 8001090:	4013      	ands	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d100      	bne.n	800109c <HAL_GPIO_Init+0x28>
 800109a:	e140      	b.n	800131e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2203      	movs	r2, #3
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d005      	beq.n	80010b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2203      	movs	r2, #3
 80010ae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d130      	bne.n	8001116 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	409a      	lsls	r2, r3
 80010c2:	0013      	movs	r3, r2
 80010c4:	43da      	mvns	r2, r3
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	409a      	lsls	r2, r3
 80010d6:	0013      	movs	r3, r2
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ea:	2201      	movs	r2, #1
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	43da      	mvns	r2, r3
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	091b      	lsrs	r3, r3, #4
 8001100:	2201      	movs	r2, #1
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2203      	movs	r2, #3
 800111c:	4013      	ands	r3, r2
 800111e:	2b03      	cmp	r3, #3
 8001120:	d017      	beq.n	8001152 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	43da      	mvns	r2, r3
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	409a      	lsls	r2, r3
 8001144:	0013      	movs	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2203      	movs	r2, #3
 8001158:	4013      	ands	r3, r2
 800115a:	2b02      	cmp	r3, #2
 800115c:	d123      	bne.n	80011a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3208      	adds	r2, #8
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	58d3      	ldr	r3, [r2, r3]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	2207      	movs	r2, #7
 8001170:	4013      	ands	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	409a      	lsls	r2, r3
 8001178:	0013      	movs	r3, r2
 800117a:	43da      	mvns	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	691a      	ldr	r2, [r3, #16]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2107      	movs	r1, #7
 800118a:	400b      	ands	r3, r1
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	409a      	lsls	r2, r3
 8001190:	0013      	movs	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3208      	adds	r2, #8
 80011a0:	0092      	lsls	r2, r2, #2
 80011a2:	6939      	ldr	r1, [r7, #16]
 80011a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	409a      	lsls	r2, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	43da      	mvns	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2203      	movs	r2, #3
 80011c4:	401a      	ands	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	23c0      	movs	r3, #192	; 0xc0
 80011e0:	029b      	lsls	r3, r3, #10
 80011e2:	4013      	ands	r3, r2
 80011e4:	d100      	bne.n	80011e8 <HAL_GPIO_Init+0x174>
 80011e6:	e09a      	b.n	800131e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e8:	4b54      	ldr	r3, [pc, #336]	; (800133c <HAL_GPIO_Init+0x2c8>)
 80011ea:	699a      	ldr	r2, [r3, #24]
 80011ec:	4b53      	ldr	r3, [pc, #332]	; (800133c <HAL_GPIO_Init+0x2c8>)
 80011ee:	2101      	movs	r1, #1
 80011f0:	430a      	orrs	r2, r1
 80011f2:	619a      	str	r2, [r3, #24]
 80011f4:	4b51      	ldr	r3, [pc, #324]	; (800133c <HAL_GPIO_Init+0x2c8>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	2201      	movs	r2, #1
 80011fa:	4013      	ands	r3, r2
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001200:	4a4f      	ldr	r2, [pc, #316]	; (8001340 <HAL_GPIO_Init+0x2cc>)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	589b      	ldr	r3, [r3, r2]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	2203      	movs	r2, #3
 8001212:	4013      	ands	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	409a      	lsls	r2, r3
 800121a:	0013      	movs	r3, r2
 800121c:	43da      	mvns	r2, r3
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	2390      	movs	r3, #144	; 0x90
 8001228:	05db      	lsls	r3, r3, #23
 800122a:	429a      	cmp	r2, r3
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x1e2>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a44      	ldr	r2, [pc, #272]	; (8001344 <HAL_GPIO_Init+0x2d0>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x1de>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a43      	ldr	r2, [pc, #268]	; (8001348 <HAL_GPIO_Init+0x2d4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x1da>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a42      	ldr	r2, [pc, #264]	; (800134c <HAL_GPIO_Init+0x2d8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x1d6>
 8001246:	2303      	movs	r3, #3
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x1e4>
 800124a:	2305      	movs	r3, #5
 800124c:	e004      	b.n	8001258 <HAL_GPIO_Init+0x1e4>
 800124e:	2302      	movs	r3, #2
 8001250:	e002      	b.n	8001258 <HAL_GPIO_Init+0x1e4>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x1e4>
 8001256:	2300      	movs	r3, #0
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	2103      	movs	r1, #3
 800125c:	400a      	ands	r2, r1
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4093      	lsls	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001268:	4935      	ldr	r1, [pc, #212]	; (8001340 <HAL_GPIO_Init+0x2cc>)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001276:	4b36      	ldr	r3, [pc, #216]	; (8001350 <HAL_GPIO_Init+0x2dc>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43da      	mvns	r2, r3
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	025b      	lsls	r3, r3, #9
 800128e:	4013      	ands	r3, r2
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800129a:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <HAL_GPIO_Init+0x2dc>)
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012a0:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <HAL_GPIO_Init+0x2dc>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43da      	mvns	r2, r3
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	029b      	lsls	r3, r3, #10
 80012b8:	4013      	ands	r3, r2
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012c4:	4b22      	ldr	r3, [pc, #136]	; (8001350 <HAL_GPIO_Init+0x2dc>)
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ca:	4b21      	ldr	r3, [pc, #132]	; (8001350 <HAL_GPIO_Init+0x2dc>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43da      	mvns	r2, r3
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	035b      	lsls	r3, r3, #13
 80012e2:	4013      	ands	r3, r2
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_GPIO_Init+0x2dc>)
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_GPIO_Init+0x2dc>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	43da      	mvns	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	039b      	lsls	r3, r3, #14
 800130c:	4013      	ands	r3, r2
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <HAL_GPIO_Init+0x2dc>)
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	40da      	lsrs	r2, r3
 800132c:	1e13      	subs	r3, r2, #0
 800132e:	d000      	beq.n	8001332 <HAL_GPIO_Init+0x2be>
 8001330:	e6a8      	b.n	8001084 <HAL_GPIO_Init+0x10>
  } 
}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	46c0      	nop			; (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b006      	add	sp, #24
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40021000 	.word	0x40021000
 8001340:	40010000 	.word	0x40010000
 8001344:	48000400 	.word	0x48000400
 8001348:	48000800 	.word	0x48000800
 800134c:	48000c00 	.word	0x48000c00
 8001350:	40010400 	.word	0x40010400

08001354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	0008      	movs	r0, r1
 800135e:	0011      	movs	r1, r2
 8001360:	1cbb      	adds	r3, r7, #2
 8001362:	1c02      	adds	r2, r0, #0
 8001364:	801a      	strh	r2, [r3, #0]
 8001366:	1c7b      	adds	r3, r7, #1
 8001368:	1c0a      	adds	r2, r1, #0
 800136a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800136c:	1c7b      	adds	r3, r7, #1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d004      	beq.n	800137e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001374:	1cbb      	adds	r3, r7, #2
 8001376:	881a      	ldrh	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800137c:	e003      	b.n	8001386 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800137e:	1cbb      	adds	r3, r7, #2
 8001380:	881a      	ldrh	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	46bd      	mov	sp, r7
 800138a:	b002      	add	sp, #8
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e082      	b.n	80014a8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2241      	movs	r2, #65	; 0x41
 80013a6:	5c9b      	ldrb	r3, [r3, r2]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d107      	bne.n	80013be <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2240      	movs	r2, #64	; 0x40
 80013b2:	2100      	movs	r1, #0
 80013b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff fc07 	bl	8000bcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2241      	movs	r2, #65	; 0x41
 80013c2:	2124      	movs	r1, #36	; 0x24
 80013c4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2101      	movs	r1, #1
 80013d2:	438a      	bics	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4934      	ldr	r1, [pc, #208]	; (80014b0 <HAL_I2C_Init+0x120>)
 80013e0:	400a      	ands	r2, r1
 80013e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4931      	ldr	r1, [pc, #196]	; (80014b4 <HAL_I2C_Init+0x124>)
 80013f0:	400a      	ands	r2, r1
 80013f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d108      	bne.n	800140e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	0209      	lsls	r1, r1, #8
 8001408:	430a      	orrs	r2, r1
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	e007      	b.n	800141e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2184      	movs	r1, #132	; 0x84
 8001418:	0209      	lsls	r1, r1, #8
 800141a:	430a      	orrs	r2, r1
 800141c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d104      	bne.n	8001430 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	491f      	ldr	r1, [pc, #124]	; (80014b8 <HAL_I2C_Init+0x128>)
 800143c:	430a      	orrs	r2, r1
 800143e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	491a      	ldr	r1, [pc, #104]	; (80014b4 <HAL_I2C_Init+0x124>)
 800144c:	400a      	ands	r2, r1
 800144e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	431a      	orrs	r2, r3
 800145a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69d9      	ldr	r1, [r3, #28]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a1a      	ldr	r2, [r3, #32]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	430a      	orrs	r2, r1
 8001488:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2241      	movs	r2, #65	; 0x41
 8001494:	2120      	movs	r1, #32
 8001496:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2242      	movs	r2, #66	; 0x42
 80014a2:	2100      	movs	r1, #0
 80014a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	f0ffffff 	.word	0xf0ffffff
 80014b4:	ffff7fff 	.word	0xffff7fff
 80014b8:	02008000 	.word	0x02008000

080014bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	0008      	movs	r0, r1
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	0019      	movs	r1, r3
 80014ca:	230a      	movs	r3, #10
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	1c02      	adds	r2, r0, #0
 80014d0:	801a      	strh	r2, [r3, #0]
 80014d2:	2308      	movs	r3, #8
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	1c0a      	adds	r2, r1, #0
 80014d8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2241      	movs	r2, #65	; 0x41
 80014de:	5c9b      	ldrb	r3, [r3, r2]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b20      	cmp	r3, #32
 80014e4:	d000      	beq.n	80014e8 <HAL_I2C_Master_Transmit+0x2c>
 80014e6:	e0e7      	b.n	80016b8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2240      	movs	r2, #64	; 0x40
 80014ec:	5c9b      	ldrb	r3, [r3, r2]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <HAL_I2C_Master_Transmit+0x3a>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e0e1      	b.n	80016ba <HAL_I2C_Master_Transmit+0x1fe>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2240      	movs	r2, #64	; 0x40
 80014fa:	2101      	movs	r1, #1
 80014fc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014fe:	f7ff fcd7 	bl	8000eb0 <HAL_GetTick>
 8001502:	0003      	movs	r3, r0
 8001504:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	0219      	lsls	r1, r3, #8
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2319      	movs	r3, #25
 8001512:	2201      	movs	r2, #1
 8001514:	f000 fc24 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 8001518:	1e03      	subs	r3, r0, #0
 800151a:	d001      	beq.n	8001520 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0cc      	b.n	80016ba <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2241      	movs	r2, #65	; 0x41
 8001524:	2121      	movs	r1, #33	; 0x21
 8001526:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2242      	movs	r2, #66	; 0x42
 800152c:	2110      	movs	r1, #16
 800152e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2200      	movs	r2, #0
 8001534:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2208      	movs	r2, #8
 8001540:	18ba      	adds	r2, r7, r2
 8001542:	8812      	ldrh	r2, [r2, #0]
 8001544:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001550:	b29b      	uxth	r3, r3
 8001552:	2bff      	cmp	r3, #255	; 0xff
 8001554:	d911      	bls.n	800157a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	22ff      	movs	r2, #255	; 0xff
 800155a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001560:	b2da      	uxtb	r2, r3
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	045c      	lsls	r4, r3, #17
 8001566:	230a      	movs	r3, #10
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	8819      	ldrh	r1, [r3, #0]
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	4b55      	ldr	r3, [pc, #340]	; (80016c4 <HAL_I2C_Master_Transmit+0x208>)
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	0023      	movs	r3, r4
 8001574:	f000 fd28 	bl	8001fc8 <I2C_TransferConfig>
 8001578:	e075      	b.n	8001666 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800157e:	b29a      	uxth	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001588:	b2da      	uxtb	r2, r3
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	049c      	lsls	r4, r3, #18
 800158e:	230a      	movs	r3, #10
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	8819      	ldrh	r1, [r3, #0]
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	4b4b      	ldr	r3, [pc, #300]	; (80016c4 <HAL_I2C_Master_Transmit+0x208>)
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	0023      	movs	r3, r4
 800159c:	f000 fd14 	bl	8001fc8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80015a0:	e061      	b.n	8001666 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	0018      	movs	r0, r3
 80015aa:	f000 fc18 	bl	8001dde <I2C_WaitOnTXISFlagUntilTimeout>
 80015ae:	1e03      	subs	r3, r0, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e081      	b.n	80016ba <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	781a      	ldrb	r2, [r3, #0]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	3b01      	subs	r3, #1
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015de:	3b01      	subs	r3, #1
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d03a      	beq.n	8001666 <HAL_I2C_Master_Transmit+0x1aa>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d136      	bne.n	8001666 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	0013      	movs	r3, r2
 8001602:	2200      	movs	r2, #0
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	f000 fbab 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 800160a:	1e03      	subs	r3, r0, #0
 800160c:	d001      	beq.n	8001612 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e053      	b.n	80016ba <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001616:	b29b      	uxth	r3, r3
 8001618:	2bff      	cmp	r3, #255	; 0xff
 800161a:	d911      	bls.n	8001640 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	22ff      	movs	r2, #255	; 0xff
 8001620:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001626:	b2da      	uxtb	r2, r3
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	045c      	lsls	r4, r3, #17
 800162c:	230a      	movs	r3, #10
 800162e:	18fb      	adds	r3, r7, r3
 8001630:	8819      	ldrh	r1, [r3, #0]
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	2300      	movs	r3, #0
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	0023      	movs	r3, r4
 800163a:	f000 fcc5 	bl	8001fc8 <I2C_TransferConfig>
 800163e:	e012      	b.n	8001666 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001644:	b29a      	uxth	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164e:	b2da      	uxtb	r2, r3
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	049c      	lsls	r4, r3, #18
 8001654:	230a      	movs	r3, #10
 8001656:	18fb      	adds	r3, r7, r3
 8001658:	8819      	ldrh	r1, [r3, #0]
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	2300      	movs	r3, #0
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	0023      	movs	r3, r4
 8001662:	f000 fcb1 	bl	8001fc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166a:	b29b      	uxth	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d198      	bne.n	80015a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	0018      	movs	r0, r3
 8001678:	f000 fbf0 	bl	8001e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 800167c:	1e03      	subs	r3, r0, #0
 800167e:	d001      	beq.n	8001684 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e01a      	b.n	80016ba <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2220      	movs	r2, #32
 800168a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	490c      	ldr	r1, [pc, #48]	; (80016c8 <HAL_I2C_Master_Transmit+0x20c>)
 8001698:	400a      	ands	r2, r1
 800169a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2241      	movs	r2, #65	; 0x41
 80016a0:	2120      	movs	r1, #32
 80016a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2242      	movs	r2, #66	; 0x42
 80016a8:	2100      	movs	r1, #0
 80016aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2240      	movs	r2, #64	; 0x40
 80016b0:	2100      	movs	r1, #0
 80016b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	e000      	b.n	80016ba <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80016b8:	2302      	movs	r3, #2
  }
}
 80016ba:	0018      	movs	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	b007      	add	sp, #28
 80016c0:	bd90      	pop	{r4, r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	80002000 	.word	0x80002000
 80016c8:	fe00e800 	.word	0xfe00e800

080016cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	000c      	movs	r4, r1
 80016d6:	0010      	movs	r0, r2
 80016d8:	0019      	movs	r1, r3
 80016da:	230a      	movs	r3, #10
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	1c22      	adds	r2, r4, #0
 80016e0:	801a      	strh	r2, [r3, #0]
 80016e2:	2308      	movs	r3, #8
 80016e4:	18fb      	adds	r3, r7, r3
 80016e6:	1c02      	adds	r2, r0, #0
 80016e8:	801a      	strh	r2, [r3, #0]
 80016ea:	1dbb      	adds	r3, r7, #6
 80016ec:	1c0a      	adds	r2, r1, #0
 80016ee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2241      	movs	r2, #65	; 0x41
 80016f4:	5c9b      	ldrb	r3, [r3, r2]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b20      	cmp	r3, #32
 80016fa:	d000      	beq.n	80016fe <HAL_I2C_Mem_Write+0x32>
 80016fc:	e10c      	b.n	8001918 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80016fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001700:	2b00      	cmp	r3, #0
 8001702:	d004      	beq.n	800170e <HAL_I2C_Mem_Write+0x42>
 8001704:	232c      	movs	r3, #44	; 0x2c
 8001706:	18fb      	adds	r3, r7, r3
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d105      	bne.n	800171a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2280      	movs	r2, #128	; 0x80
 8001712:	0092      	lsls	r2, r2, #2
 8001714:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e0ff      	b.n	800191a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2240      	movs	r2, #64	; 0x40
 800171e:	5c9b      	ldrb	r3, [r3, r2]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_I2C_Mem_Write+0x5c>
 8001724:	2302      	movs	r3, #2
 8001726:	e0f8      	b.n	800191a <HAL_I2C_Mem_Write+0x24e>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2240      	movs	r2, #64	; 0x40
 800172c:	2101      	movs	r1, #1
 800172e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001730:	f7ff fbbe 	bl	8000eb0 <HAL_GetTick>
 8001734:	0003      	movs	r3, r0
 8001736:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	0219      	lsls	r1, r3, #8
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	2319      	movs	r3, #25
 8001744:	2201      	movs	r2, #1
 8001746:	f000 fb0b 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 800174a:	1e03      	subs	r3, r0, #0
 800174c:	d001      	beq.n	8001752 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e0e3      	b.n	800191a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2241      	movs	r2, #65	; 0x41
 8001756:	2121      	movs	r1, #33	; 0x21
 8001758:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2242      	movs	r2, #66	; 0x42
 800175e:	2140      	movs	r1, #64	; 0x40
 8001760:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	222c      	movs	r2, #44	; 0x2c
 8001772:	18ba      	adds	r2, r7, r2
 8001774:	8812      	ldrh	r2, [r2, #0]
 8001776:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800177e:	1dbb      	adds	r3, r7, #6
 8001780:	881c      	ldrh	r4, [r3, #0]
 8001782:	2308      	movs	r3, #8
 8001784:	18fb      	adds	r3, r7, r3
 8001786:	881a      	ldrh	r2, [r3, #0]
 8001788:	230a      	movs	r3, #10
 800178a:	18fb      	adds	r3, r7, r3
 800178c:	8819      	ldrh	r1, [r3, #0]
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	0023      	movs	r3, r4
 800179a:	f000 f9f9 	bl	8001b90 <I2C_RequestMemoryWrite>
 800179e:	1e03      	subs	r3, r0, #0
 80017a0:	d005      	beq.n	80017ae <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2240      	movs	r2, #64	; 0x40
 80017a6:	2100      	movs	r1, #0
 80017a8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e0b5      	b.n	800191a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	2bff      	cmp	r3, #255	; 0xff
 80017b6:	d911      	bls.n	80017dc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	22ff      	movs	r2, #255	; 0xff
 80017bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	045c      	lsls	r4, r3, #17
 80017c8:	230a      	movs	r3, #10
 80017ca:	18fb      	adds	r3, r7, r3
 80017cc:	8819      	ldrh	r1, [r3, #0]
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	2300      	movs	r3, #0
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	0023      	movs	r3, r4
 80017d6:	f000 fbf7 	bl	8001fc8 <I2C_TransferConfig>
 80017da:	e012      	b.n	8001802 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	049c      	lsls	r4, r3, #18
 80017f0:	230a      	movs	r3, #10
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	8819      	ldrh	r1, [r3, #0]
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	2300      	movs	r3, #0
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	0023      	movs	r3, r4
 80017fe:	f000 fbe3 	bl	8001fc8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	0018      	movs	r0, r3
 800180a:	f000 fae8 	bl	8001dde <I2C_WaitOnTXISFlagUntilTimeout>
 800180e:	1e03      	subs	r3, r0, #0
 8001810:	d001      	beq.n	8001816 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e081      	b.n	800191a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	781a      	ldrb	r2, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001830:	b29b      	uxth	r3, r3
 8001832:	3b01      	subs	r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183e:	3b01      	subs	r3, #1
 8001840:	b29a      	uxth	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184a:	b29b      	uxth	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d03a      	beq.n	80018c6 <HAL_I2C_Mem_Write+0x1fa>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001854:	2b00      	cmp	r3, #0
 8001856:	d136      	bne.n	80018c6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	0013      	movs	r3, r2
 8001862:	2200      	movs	r2, #0
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	f000 fa7b 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 800186a:	1e03      	subs	r3, r0, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e053      	b.n	800191a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001876:	b29b      	uxth	r3, r3
 8001878:	2bff      	cmp	r3, #255	; 0xff
 800187a:	d911      	bls.n	80018a0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	22ff      	movs	r2, #255	; 0xff
 8001880:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001886:	b2da      	uxtb	r2, r3
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	045c      	lsls	r4, r3, #17
 800188c:	230a      	movs	r3, #10
 800188e:	18fb      	adds	r3, r7, r3
 8001890:	8819      	ldrh	r1, [r3, #0]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	2300      	movs	r3, #0
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	0023      	movs	r3, r4
 800189a:	f000 fb95 	bl	8001fc8 <I2C_TransferConfig>
 800189e:	e012      	b.n	80018c6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	049c      	lsls	r4, r3, #18
 80018b4:	230a      	movs	r3, #10
 80018b6:	18fb      	adds	r3, r7, r3
 80018b8:	8819      	ldrh	r1, [r3, #0]
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	2300      	movs	r3, #0
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	0023      	movs	r3, r4
 80018c2:	f000 fb81 	bl	8001fc8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d198      	bne.n	8001802 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	0018      	movs	r0, r3
 80018d8:	f000 fac0 	bl	8001e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 80018dc:	1e03      	subs	r3, r0, #0
 80018de:	d001      	beq.n	80018e4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e01a      	b.n	800191a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2220      	movs	r2, #32
 80018ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	490b      	ldr	r1, [pc, #44]	; (8001924 <HAL_I2C_Mem_Write+0x258>)
 80018f8:	400a      	ands	r2, r1
 80018fa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2241      	movs	r2, #65	; 0x41
 8001900:	2120      	movs	r1, #32
 8001902:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2242      	movs	r2, #66	; 0x42
 8001908:	2100      	movs	r1, #0
 800190a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2240      	movs	r2, #64	; 0x40
 8001910:	2100      	movs	r1, #0
 8001912:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	e000      	b.n	800191a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001918:	2302      	movs	r3, #2
  }
}
 800191a:	0018      	movs	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	b007      	add	sp, #28
 8001920:	bd90      	pop	{r4, r7, pc}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	fe00e800 	.word	0xfe00e800

08001928 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af02      	add	r7, sp, #8
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	000c      	movs	r4, r1
 8001932:	0010      	movs	r0, r2
 8001934:	0019      	movs	r1, r3
 8001936:	230a      	movs	r3, #10
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	1c22      	adds	r2, r4, #0
 800193c:	801a      	strh	r2, [r3, #0]
 800193e:	2308      	movs	r3, #8
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	1c02      	adds	r2, r0, #0
 8001944:	801a      	strh	r2, [r3, #0]
 8001946:	1dbb      	adds	r3, r7, #6
 8001948:	1c0a      	adds	r2, r1, #0
 800194a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2241      	movs	r2, #65	; 0x41
 8001950:	5c9b      	ldrb	r3, [r3, r2]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b20      	cmp	r3, #32
 8001956:	d000      	beq.n	800195a <HAL_I2C_Mem_Read+0x32>
 8001958:	e110      	b.n	8001b7c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800195a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195c:	2b00      	cmp	r3, #0
 800195e:	d004      	beq.n	800196a <HAL_I2C_Mem_Read+0x42>
 8001960:	232c      	movs	r3, #44	; 0x2c
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d105      	bne.n	8001976 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2280      	movs	r2, #128	; 0x80
 800196e:	0092      	lsls	r2, r2, #2
 8001970:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e103      	b.n	8001b7e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2240      	movs	r2, #64	; 0x40
 800197a:	5c9b      	ldrb	r3, [r3, r2]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <HAL_I2C_Mem_Read+0x5c>
 8001980:	2302      	movs	r3, #2
 8001982:	e0fc      	b.n	8001b7e <HAL_I2C_Mem_Read+0x256>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2240      	movs	r2, #64	; 0x40
 8001988:	2101      	movs	r1, #1
 800198a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800198c:	f7ff fa90 	bl	8000eb0 <HAL_GetTick>
 8001990:	0003      	movs	r3, r0
 8001992:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	0219      	lsls	r1, r3, #8
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2319      	movs	r3, #25
 80019a0:	2201      	movs	r2, #1
 80019a2:	f000 f9dd 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 80019a6:	1e03      	subs	r3, r0, #0
 80019a8:	d001      	beq.n	80019ae <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e0e7      	b.n	8001b7e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2241      	movs	r2, #65	; 0x41
 80019b2:	2122      	movs	r1, #34	; 0x22
 80019b4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2242      	movs	r2, #66	; 0x42
 80019ba:	2140      	movs	r1, #64	; 0x40
 80019bc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	222c      	movs	r2, #44	; 0x2c
 80019ce:	18ba      	adds	r2, r7, r2
 80019d0:	8812      	ldrh	r2, [r2, #0]
 80019d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019da:	1dbb      	adds	r3, r7, #6
 80019dc:	881c      	ldrh	r4, [r3, #0]
 80019de:	2308      	movs	r3, #8
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	881a      	ldrh	r2, [r3, #0]
 80019e4:	230a      	movs	r3, #10
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	8819      	ldrh	r1, [r3, #0]
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	0023      	movs	r3, r4
 80019f6:	f000 f92f 	bl	8001c58 <I2C_RequestMemoryRead>
 80019fa:	1e03      	subs	r3, r0, #0
 80019fc:	d005      	beq.n	8001a0a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2240      	movs	r2, #64	; 0x40
 8001a02:	2100      	movs	r1, #0
 8001a04:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0b9      	b.n	8001b7e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	2bff      	cmp	r3, #255	; 0xff
 8001a12:	d911      	bls.n	8001a38 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	22ff      	movs	r2, #255	; 0xff
 8001a18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	045c      	lsls	r4, r3, #17
 8001a24:	230a      	movs	r3, #10
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	8819      	ldrh	r1, [r3, #0]
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	4b56      	ldr	r3, [pc, #344]	; (8001b88 <HAL_I2C_Mem_Read+0x260>)
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	0023      	movs	r3, r4
 8001a32:	f000 fac9 	bl	8001fc8 <I2C_TransferConfig>
 8001a36:	e012      	b.n	8001a5e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	049c      	lsls	r4, r3, #18
 8001a4c:	230a      	movs	r3, #10
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	8819      	ldrh	r1, [r3, #0]
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	4b4c      	ldr	r3, [pc, #304]	; (8001b88 <HAL_I2C_Mem_Read+0x260>)
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	0023      	movs	r3, r4
 8001a5a:	f000 fab5 	bl	8001fc8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	0013      	movs	r3, r2
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2104      	movs	r1, #4
 8001a6c:	f000 f978 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 8001a70:	1e03      	subs	r3, r0, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e082      	b.n	8001b7e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d03a      	beq.n	8001b2a <HAL_I2C_Mem_Read+0x202>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d136      	bne.n	8001b2a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	0013      	movs	r3, r2
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	f000 f949 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 8001ace:	1e03      	subs	r3, r0, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e053      	b.n	8001b7e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	2bff      	cmp	r3, #255	; 0xff
 8001ade:	d911      	bls.n	8001b04 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	22ff      	movs	r2, #255	; 0xff
 8001ae4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	045c      	lsls	r4, r3, #17
 8001af0:	230a      	movs	r3, #10
 8001af2:	18fb      	adds	r3, r7, r3
 8001af4:	8819      	ldrh	r1, [r3, #0]
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	2300      	movs	r3, #0
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	0023      	movs	r3, r4
 8001afe:	f000 fa63 	bl	8001fc8 <I2C_TransferConfig>
 8001b02:	e012      	b.n	8001b2a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	049c      	lsls	r4, r3, #18
 8001b18:	230a      	movs	r3, #10
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	8819      	ldrh	r1, [r3, #0]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	2300      	movs	r3, #0
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	0023      	movs	r3, r4
 8001b26:	f000 fa4f 	bl	8001fc8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d194      	bne.n	8001a5e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f000 f98e 	bl	8001e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b40:	1e03      	subs	r3, r0, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e01a      	b.n	8001b7e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	490c      	ldr	r1, [pc, #48]	; (8001b8c <HAL_I2C_Mem_Read+0x264>)
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2241      	movs	r2, #65	; 0x41
 8001b64:	2120      	movs	r1, #32
 8001b66:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2242      	movs	r2, #66	; 0x42
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2240      	movs	r2, #64	; 0x40
 8001b74:	2100      	movs	r1, #0
 8001b76:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e000      	b.n	8001b7e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001b7c:	2302      	movs	r3, #2
  }
}
 8001b7e:	0018      	movs	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b007      	add	sp, #28
 8001b84:	bd90      	pop	{r4, r7, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	80002400 	.word	0x80002400
 8001b8c:	fe00e800 	.word	0xfe00e800

08001b90 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001b90:	b5b0      	push	{r4, r5, r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af02      	add	r7, sp, #8
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	000c      	movs	r4, r1
 8001b9a:	0010      	movs	r0, r2
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	250a      	movs	r5, #10
 8001ba0:	197b      	adds	r3, r7, r5
 8001ba2:	1c22      	adds	r2, r4, #0
 8001ba4:	801a      	strh	r2, [r3, #0]
 8001ba6:	2308      	movs	r3, #8
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	1c02      	adds	r2, r0, #0
 8001bac:	801a      	strh	r2, [r3, #0]
 8001bae:	1dbb      	adds	r3, r7, #6
 8001bb0:	1c0a      	adds	r2, r1, #0
 8001bb2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001bb4:	1dbb      	adds	r3, r7, #6
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	045c      	lsls	r4, r3, #17
 8001bbe:	197b      	adds	r3, r7, r5
 8001bc0:	8819      	ldrh	r1, [r3, #0]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <I2C_RequestMemoryWrite+0xc4>)
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	0023      	movs	r3, r4
 8001bca:	f000 f9fd 	bl	8001fc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd0:	6a39      	ldr	r1, [r7, #32]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f000 f902 	bl	8001dde <I2C_WaitOnTXISFlagUntilTimeout>
 8001bda:	1e03      	subs	r3, r0, #0
 8001bdc:	d001      	beq.n	8001be2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e033      	b.n	8001c4a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001be2:	1dbb      	adds	r3, r7, #6
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d107      	bne.n	8001bfa <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bea:	2308      	movs	r3, #8
 8001bec:	18fb      	adds	r3, r7, r3
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	629a      	str	r2, [r3, #40]	; 0x28
 8001bf8:	e019      	b.n	8001c2e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bfa:	2308      	movs	r3, #8
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0e:	6a39      	ldr	r1, [r7, #32]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	0018      	movs	r0, r3
 8001c14:	f000 f8e3 	bl	8001dde <I2C_WaitOnTXISFlagUntilTimeout>
 8001c18:	1e03      	subs	r3, r0, #0
 8001c1a:	d001      	beq.n	8001c20 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e014      	b.n	8001c4a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c20:	2308      	movs	r3, #8
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001c2e:	6a3a      	ldr	r2, [r7, #32]
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	0013      	movs	r3, r2
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	f000 f890 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 8001c40:	1e03      	subs	r3, r0, #0
 8001c42:	d001      	beq.n	8001c48 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b004      	add	sp, #16
 8001c50:	bdb0      	pop	{r4, r5, r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	80002000 	.word	0x80002000

08001c58 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af02      	add	r7, sp, #8
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	000c      	movs	r4, r1
 8001c62:	0010      	movs	r0, r2
 8001c64:	0019      	movs	r1, r3
 8001c66:	250a      	movs	r5, #10
 8001c68:	197b      	adds	r3, r7, r5
 8001c6a:	1c22      	adds	r2, r4, #0
 8001c6c:	801a      	strh	r2, [r3, #0]
 8001c6e:	2308      	movs	r3, #8
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	1c02      	adds	r2, r0, #0
 8001c74:	801a      	strh	r2, [r3, #0]
 8001c76:	1dbb      	adds	r3, r7, #6
 8001c78:	1c0a      	adds	r2, r1, #0
 8001c7a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c7c:	1dbb      	adds	r3, r7, #6
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	197b      	adds	r3, r7, r5
 8001c84:	8819      	ldrh	r1, [r3, #0]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <I2C_RequestMemoryRead+0xc0>)
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f000 f99b 	bl	8001fc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c94:	6a39      	ldr	r1, [r7, #32]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f000 f8a0 	bl	8001dde <I2C_WaitOnTXISFlagUntilTimeout>
 8001c9e:	1e03      	subs	r3, r0, #0
 8001ca0:	d001      	beq.n	8001ca6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e033      	b.n	8001d0e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ca6:	1dbb      	adds	r3, r7, #6
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d107      	bne.n	8001cbe <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cae:	2308      	movs	r3, #8
 8001cb0:	18fb      	adds	r3, r7, r3
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
 8001cbc:	e019      	b.n	8001cf2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001cbe:	2308      	movs	r3, #8
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd2:	6a39      	ldr	r1, [r7, #32]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f000 f881 	bl	8001dde <I2C_WaitOnTXISFlagUntilTimeout>
 8001cdc:	1e03      	subs	r3, r0, #0
 8001cde:	d001      	beq.n	8001ce4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e014      	b.n	8001d0e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	18fb      	adds	r3, r7, r3
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001cf2:	6a3a      	ldr	r2, [r7, #32]
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	0013      	movs	r3, r2
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2140      	movs	r1, #64	; 0x40
 8001d00:	f000 f82e 	bl	8001d60 <I2C_WaitOnFlagUntilTimeout>
 8001d04:	1e03      	subs	r3, r0, #0
 8001d06:	d001      	beq.n	8001d0c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	0018      	movs	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b004      	add	sp, #16
 8001d14:	bdb0      	pop	{r4, r5, r7, pc}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	80002000 	.word	0x80002000

08001d1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d103      	bne.n	8001d3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2200      	movs	r2, #0
 8001d38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	2201      	movs	r2, #1
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d007      	beq.n	8001d58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699a      	ldr	r2, [r3, #24]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2101      	movs	r1, #1
 8001d54:	430a      	orrs	r2, r1
 8001d56:	619a      	str	r2, [r3, #24]
  }
}
 8001d58:	46c0      	nop			; (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b002      	add	sp, #8
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	1dfb      	adds	r3, r7, #7
 8001d6e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d70:	e021      	b.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	3301      	adds	r3, #1
 8001d76:	d01e      	beq.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d78:	f7ff f89a 	bl	8000eb0 <HAL_GetTick>
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d302      	bcc.n	8001d8e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d113      	bne.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	2220      	movs	r2, #32
 8001d94:	431a      	orrs	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2241      	movs	r2, #65	; 0x41
 8001d9e:	2120      	movs	r1, #32
 8001da0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2242      	movs	r2, #66	; 0x42
 8001da6:	2100      	movs	r1, #0
 8001da8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2240      	movs	r2, #64	; 0x40
 8001dae:	2100      	movs	r1, #0
 8001db0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00f      	b.n	8001dd6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	425a      	negs	r2, r3
 8001dc6:	4153      	adcs	r3, r2
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	001a      	movs	r2, r3
 8001dcc:	1dfb      	adds	r3, r7, #7
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d0ce      	beq.n	8001d72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b004      	add	sp, #16
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b084      	sub	sp, #16
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dea:	e02b      	b.n	8001e44 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	0018      	movs	r0, r3
 8001df4:	f000 f86e 	bl	8001ed4 <I2C_IsAcknowledgeFailed>
 8001df8:	1e03      	subs	r3, r0, #0
 8001dfa:	d001      	beq.n	8001e00 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e029      	b.n	8001e54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	3301      	adds	r3, #1
 8001e04:	d01e      	beq.n	8001e44 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e06:	f7ff f853 	bl	8000eb0 <HAL_GetTick>
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d302      	bcc.n	8001e1c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d113      	bne.n	8001e44 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e20:	2220      	movs	r2, #32
 8001e22:	431a      	orrs	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2241      	movs	r2, #65	; 0x41
 8001e2c:	2120      	movs	r1, #32
 8001e2e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2242      	movs	r2, #66	; 0x42
 8001e34:	2100      	movs	r1, #0
 8001e36:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2240      	movs	r2, #64	; 0x40
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e007      	b.n	8001e54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d1cc      	bne.n	8001dec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	0018      	movs	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b004      	add	sp, #16
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e68:	e028      	b.n	8001ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	0018      	movs	r0, r3
 8001e72:	f000 f82f 	bl	8001ed4 <I2C_IsAcknowledgeFailed>
 8001e76:	1e03      	subs	r3, r0, #0
 8001e78:	d001      	beq.n	8001e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e026      	b.n	8001ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e7e:	f7ff f817 	bl	8000eb0 <HAL_GetTick>
 8001e82:	0002      	movs	r2, r0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d302      	bcc.n	8001e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d113      	bne.n	8001ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e98:	2220      	movs	r2, #32
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2241      	movs	r2, #65	; 0x41
 8001ea4:	2120      	movs	r1, #32
 8001ea6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2242      	movs	r2, #66	; 0x42
 8001eac:	2100      	movs	r1, #0
 8001eae:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2240      	movs	r2, #64	; 0x40
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e007      	b.n	8001ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	d1cf      	bne.n	8001e6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	0018      	movs	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b004      	add	sp, #16
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2210      	movs	r2, #16
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d164      	bne.n	8001fb8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	049b      	lsls	r3, r3, #18
 8001ef8:	401a      	ands	r2, r3
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	049b      	lsls	r3, r3, #18
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d02b      	beq.n	8001f5a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2180      	movs	r1, #128	; 0x80
 8001f0e:	01c9      	lsls	r1, r1, #7
 8001f10:	430a      	orrs	r2, r1
 8001f12:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f14:	e021      	b.n	8001f5a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	d01e      	beq.n	8001f5a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f1c:	f7fe ffc8 	bl	8000eb0 <HAL_GetTick>
 8001f20:	0002      	movs	r2, r0
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d302      	bcc.n	8001f32 <I2C_IsAcknowledgeFailed+0x5e>
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d113      	bne.n	8001f5a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	2220      	movs	r2, #32
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2241      	movs	r2, #65	; 0x41
 8001f42:	2120      	movs	r1, #32
 8001f44:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2242      	movs	r2, #66	; 0x42
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2240      	movs	r2, #64	; 0x40
 8001f52:	2100      	movs	r1, #0
 8001f54:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e02f      	b.n	8001fba <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	2220      	movs	r2, #32
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	d1d6      	bne.n	8001f16 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2210      	movs	r2, #16
 8001f6e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2220      	movs	r2, #32
 8001f76:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f7ff fece 	bl	8001d1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	490e      	ldr	r1, [pc, #56]	; (8001fc4 <I2C_IsAcknowledgeFailed+0xf0>)
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f94:	2204      	movs	r2, #4
 8001f96:	431a      	orrs	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2241      	movs	r2, #65	; 0x41
 8001fa0:	2120      	movs	r1, #32
 8001fa2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2242      	movs	r2, #66	; 0x42
 8001fa8:	2100      	movs	r1, #0
 8001faa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2240      	movs	r2, #64	; 0x40
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	0018      	movs	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b004      	add	sp, #16
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	fe00e800 	.word	0xfe00e800

08001fc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	0008      	movs	r0, r1
 8001fd2:	0011      	movs	r1, r2
 8001fd4:	607b      	str	r3, [r7, #4]
 8001fd6:	240a      	movs	r4, #10
 8001fd8:	193b      	adds	r3, r7, r4
 8001fda:	1c02      	adds	r2, r0, #0
 8001fdc:	801a      	strh	r2, [r3, #0]
 8001fde:	2009      	movs	r0, #9
 8001fe0:	183b      	adds	r3, r7, r0
 8001fe2:	1c0a      	adds	r2, r1, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	6a3a      	ldr	r2, [r7, #32]
 8001fee:	0d51      	lsrs	r1, r2, #21
 8001ff0:	2280      	movs	r2, #128	; 0x80
 8001ff2:	00d2      	lsls	r2, r2, #3
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	490e      	ldr	r1, [pc, #56]	; (8002030 <I2C_TransferConfig+0x68>)
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	43d2      	mvns	r2, r2
 8001ffc:	401a      	ands	r2, r3
 8001ffe:	0011      	movs	r1, r2
 8002000:	193b      	adds	r3, r7, r4
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	059b      	lsls	r3, r3, #22
 8002006:	0d9a      	lsrs	r2, r3, #22
 8002008:	183b      	adds	r3, r7, r0
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	0418      	lsls	r0, r3, #16
 800200e:	23ff      	movs	r3, #255	; 0xff
 8002010:	041b      	lsls	r3, r3, #16
 8002012:	4003      	ands	r3, r0
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	431a      	orrs	r2, r3
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	431a      	orrs	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	b005      	add	sp, #20
 800202c:	bd90      	pop	{r4, r7, pc}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	03ff63ff 	.word	0x03ff63ff

08002034 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2241      	movs	r2, #65	; 0x41
 8002042:	5c9b      	ldrb	r3, [r3, r2]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b20      	cmp	r3, #32
 8002048:	d138      	bne.n	80020bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2240      	movs	r2, #64	; 0x40
 800204e:	5c9b      	ldrb	r3, [r3, r2]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002054:	2302      	movs	r3, #2
 8002056:	e032      	b.n	80020be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2240      	movs	r2, #64	; 0x40
 800205c:	2101      	movs	r1, #1
 800205e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2241      	movs	r2, #65	; 0x41
 8002064:	2124      	movs	r1, #36	; 0x24
 8002066:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2101      	movs	r1, #1
 8002074:	438a      	bics	r2, r1
 8002076:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4911      	ldr	r1, [pc, #68]	; (80020c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002084:	400a      	ands	r2, r1
 8002086:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6819      	ldr	r1, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2101      	movs	r1, #1
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2241      	movs	r2, #65	; 0x41
 80020ac:	2120      	movs	r1, #32
 80020ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2240      	movs	r2, #64	; 0x40
 80020b4:	2100      	movs	r1, #0
 80020b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	e000      	b.n	80020be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020bc:	2302      	movs	r3, #2
  }
}
 80020be:	0018      	movs	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b002      	add	sp, #8
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	ffffefff 	.word	0xffffefff

080020cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2241      	movs	r2, #65	; 0x41
 80020da:	5c9b      	ldrb	r3, [r3, r2]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b20      	cmp	r3, #32
 80020e0:	d139      	bne.n	8002156 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2240      	movs	r2, #64	; 0x40
 80020e6:	5c9b      	ldrb	r3, [r3, r2]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e033      	b.n	8002158 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2240      	movs	r2, #64	; 0x40
 80020f4:	2101      	movs	r1, #1
 80020f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2241      	movs	r2, #65	; 0x41
 80020fc:	2124      	movs	r1, #36	; 0x24
 80020fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2101      	movs	r1, #1
 800210c:	438a      	bics	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4a11      	ldr	r2, [pc, #68]	; (8002160 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800211c:	4013      	ands	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2101      	movs	r1, #1
 800213e:	430a      	orrs	r2, r1
 8002140:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2241      	movs	r2, #65	; 0x41
 8002146:	2120      	movs	r1, #32
 8002148:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2240      	movs	r2, #64	; 0x40
 800214e:	2100      	movs	r1, #0
 8002150:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	e000      	b.n	8002158 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002156:	2302      	movs	r3, #2
  }
}
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	b004      	add	sp, #16
 800215e:	bd80      	pop	{r7, pc}
 8002160:	fffff0ff 	.word	0xfffff0ff

08002164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e301      	b.n	800277a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2201      	movs	r2, #1
 800217c:	4013      	ands	r3, r2
 800217e:	d100      	bne.n	8002182 <HAL_RCC_OscConfig+0x1e>
 8002180:	e08d      	b.n	800229e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002182:	4bc3      	ldr	r3, [pc, #780]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	220c      	movs	r2, #12
 8002188:	4013      	ands	r3, r2
 800218a:	2b04      	cmp	r3, #4
 800218c:	d00e      	beq.n	80021ac <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800218e:	4bc0      	ldr	r3, [pc, #768]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	220c      	movs	r2, #12
 8002194:	4013      	ands	r3, r2
 8002196:	2b08      	cmp	r3, #8
 8002198:	d116      	bne.n	80021c8 <HAL_RCC_OscConfig+0x64>
 800219a:	4bbd      	ldr	r3, [pc, #756]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	025b      	lsls	r3, r3, #9
 80021a2:	401a      	ands	r2, r3
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	025b      	lsls	r3, r3, #9
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d10d      	bne.n	80021c8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ac:	4bb8      	ldr	r3, [pc, #736]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	029b      	lsls	r3, r3, #10
 80021b4:	4013      	ands	r3, r2
 80021b6:	d100      	bne.n	80021ba <HAL_RCC_OscConfig+0x56>
 80021b8:	e070      	b.n	800229c <HAL_RCC_OscConfig+0x138>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d000      	beq.n	80021c4 <HAL_RCC_OscConfig+0x60>
 80021c2:	e06b      	b.n	800229c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e2d8      	b.n	800277a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d107      	bne.n	80021e0 <HAL_RCC_OscConfig+0x7c>
 80021d0:	4baf      	ldr	r3, [pc, #700]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4bae      	ldr	r3, [pc, #696]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 80021d6:	2180      	movs	r1, #128	; 0x80
 80021d8:	0249      	lsls	r1, r1, #9
 80021da:	430a      	orrs	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	e02f      	b.n	8002240 <HAL_RCC_OscConfig+0xdc>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10c      	bne.n	8002202 <HAL_RCC_OscConfig+0x9e>
 80021e8:	4ba9      	ldr	r3, [pc, #676]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4ba8      	ldr	r3, [pc, #672]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 80021ee:	49a9      	ldr	r1, [pc, #676]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80021f0:	400a      	ands	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	4ba6      	ldr	r3, [pc, #664]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4ba5      	ldr	r3, [pc, #660]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 80021fa:	49a7      	ldr	r1, [pc, #668]	; (8002498 <HAL_RCC_OscConfig+0x334>)
 80021fc:	400a      	ands	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	e01e      	b.n	8002240 <HAL_RCC_OscConfig+0xdc>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b05      	cmp	r3, #5
 8002208:	d10e      	bne.n	8002228 <HAL_RCC_OscConfig+0xc4>
 800220a:	4ba1      	ldr	r3, [pc, #644]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	4ba0      	ldr	r3, [pc, #640]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002210:	2180      	movs	r1, #128	; 0x80
 8002212:	02c9      	lsls	r1, r1, #11
 8002214:	430a      	orrs	r2, r1
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	4b9d      	ldr	r3, [pc, #628]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4b9c      	ldr	r3, [pc, #624]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 800221e:	2180      	movs	r1, #128	; 0x80
 8002220:	0249      	lsls	r1, r1, #9
 8002222:	430a      	orrs	r2, r1
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e00b      	b.n	8002240 <HAL_RCC_OscConfig+0xdc>
 8002228:	4b99      	ldr	r3, [pc, #612]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b98      	ldr	r3, [pc, #608]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 800222e:	4999      	ldr	r1, [pc, #612]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 8002230:	400a      	ands	r2, r1
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	4b96      	ldr	r3, [pc, #600]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b95      	ldr	r3, [pc, #596]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 800223a:	4997      	ldr	r1, [pc, #604]	; (8002498 <HAL_RCC_OscConfig+0x334>)
 800223c:	400a      	ands	r2, r1
 800223e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d014      	beq.n	8002272 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7fe fe32 	bl	8000eb0 <HAL_GetTick>
 800224c:	0003      	movs	r3, r0
 800224e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002252:	f7fe fe2d 	bl	8000eb0 <HAL_GetTick>
 8002256:	0002      	movs	r2, r0
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b64      	cmp	r3, #100	; 0x64
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e28a      	b.n	800277a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002264:	4b8a      	ldr	r3, [pc, #552]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	029b      	lsls	r3, r3, #10
 800226c:	4013      	ands	r3, r2
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0xee>
 8002270:	e015      	b.n	800229e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002272:	f7fe fe1d 	bl	8000eb0 <HAL_GetTick>
 8002276:	0003      	movs	r3, r0
 8002278:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800227c:	f7fe fe18 	bl	8000eb0 <HAL_GetTick>
 8002280:	0002      	movs	r2, r0
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e275      	b.n	800277a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	4b80      	ldr	r3, [pc, #512]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	029b      	lsls	r3, r3, #10
 8002296:	4013      	ands	r3, r2
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x118>
 800229a:	e000      	b.n	800229e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2202      	movs	r2, #2
 80022a4:	4013      	ands	r3, r2
 80022a6:	d100      	bne.n	80022aa <HAL_RCC_OscConfig+0x146>
 80022a8:	e069      	b.n	800237e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022aa:	4b79      	ldr	r3, [pc, #484]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	220c      	movs	r2, #12
 80022b0:	4013      	ands	r3, r2
 80022b2:	d00b      	beq.n	80022cc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022b4:	4b76      	ldr	r3, [pc, #472]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	220c      	movs	r2, #12
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d11c      	bne.n	80022fa <HAL_RCC_OscConfig+0x196>
 80022c0:	4b73      	ldr	r3, [pc, #460]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	2380      	movs	r3, #128	; 0x80
 80022c6:	025b      	lsls	r3, r3, #9
 80022c8:	4013      	ands	r3, r2
 80022ca:	d116      	bne.n	80022fa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022cc:	4b70      	ldr	r3, [pc, #448]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2202      	movs	r2, #2
 80022d2:	4013      	ands	r3, r2
 80022d4:	d005      	beq.n	80022e2 <HAL_RCC_OscConfig+0x17e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d001      	beq.n	80022e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e24b      	b.n	800277a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e2:	4b6b      	ldr	r3, [pc, #428]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	22f8      	movs	r2, #248	; 0xf8
 80022e8:	4393      	bics	r3, r2
 80022ea:	0019      	movs	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	00da      	lsls	r2, r3, #3
 80022f2:	4b67      	ldr	r3, [pc, #412]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 80022f4:	430a      	orrs	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f8:	e041      	b.n	800237e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d024      	beq.n	800234c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002302:	4b63      	ldr	r3, [pc, #396]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4b62      	ldr	r3, [pc, #392]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002308:	2101      	movs	r1, #1
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7fe fdcf 	bl	8000eb0 <HAL_GetTick>
 8002312:	0003      	movs	r3, r0
 8002314:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002318:	f7fe fdca 	bl	8000eb0 <HAL_GetTick>
 800231c:	0002      	movs	r2, r0
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e227      	b.n	800277a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232a:	4b59      	ldr	r3, [pc, #356]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2202      	movs	r2, #2
 8002330:	4013      	ands	r3, r2
 8002332:	d0f1      	beq.n	8002318 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002334:	4b56      	ldr	r3, [pc, #344]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	22f8      	movs	r2, #248	; 0xf8
 800233a:	4393      	bics	r3, r2
 800233c:	0019      	movs	r1, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	00da      	lsls	r2, r3, #3
 8002344:	4b52      	ldr	r3, [pc, #328]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002346:	430a      	orrs	r2, r1
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	e018      	b.n	800237e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800234c:	4b50      	ldr	r3, [pc, #320]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b4f      	ldr	r3, [pc, #316]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002352:	2101      	movs	r1, #1
 8002354:	438a      	bics	r2, r1
 8002356:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7fe fdaa 	bl	8000eb0 <HAL_GetTick>
 800235c:	0003      	movs	r3, r0
 800235e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002362:	f7fe fda5 	bl	8000eb0 <HAL_GetTick>
 8002366:	0002      	movs	r2, r0
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e202      	b.n	800277a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002374:	4b46      	ldr	r3, [pc, #280]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2202      	movs	r2, #2
 800237a:	4013      	ands	r3, r2
 800237c:	d1f1      	bne.n	8002362 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2208      	movs	r2, #8
 8002384:	4013      	ands	r3, r2
 8002386:	d036      	beq.n	80023f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d019      	beq.n	80023c4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002390:	4b3f      	ldr	r3, [pc, #252]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002394:	4b3e      	ldr	r3, [pc, #248]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002396:	2101      	movs	r1, #1
 8002398:	430a      	orrs	r2, r1
 800239a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239c:	f7fe fd88 	bl	8000eb0 <HAL_GetTick>
 80023a0:	0003      	movs	r3, r0
 80023a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a6:	f7fe fd83 	bl	8000eb0 <HAL_GetTick>
 80023aa:	0002      	movs	r2, r0
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e1e0      	b.n	800277a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b8:	4b35      	ldr	r3, [pc, #212]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	2202      	movs	r2, #2
 80023be:	4013      	ands	r3, r2
 80023c0:	d0f1      	beq.n	80023a6 <HAL_RCC_OscConfig+0x242>
 80023c2:	e018      	b.n	80023f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c4:	4b32      	ldr	r3, [pc, #200]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 80023c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023c8:	4b31      	ldr	r3, [pc, #196]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 80023ca:	2101      	movs	r1, #1
 80023cc:	438a      	bics	r2, r1
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d0:	f7fe fd6e 	bl	8000eb0 <HAL_GetTick>
 80023d4:	0003      	movs	r3, r0
 80023d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023da:	f7fe fd69 	bl	8000eb0 <HAL_GetTick>
 80023de:	0002      	movs	r2, r0
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e1c6      	b.n	800277a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ec:	4b28      	ldr	r3, [pc, #160]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	2202      	movs	r2, #2
 80023f2:	4013      	ands	r3, r2
 80023f4:	d1f1      	bne.n	80023da <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2204      	movs	r2, #4
 80023fc:	4013      	ands	r3, r2
 80023fe:	d100      	bne.n	8002402 <HAL_RCC_OscConfig+0x29e>
 8002400:	e0b4      	b.n	800256c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002402:	201f      	movs	r0, #31
 8002404:	183b      	adds	r3, r7, r0
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240a:	4b21      	ldr	r3, [pc, #132]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 800240c:	69da      	ldr	r2, [r3, #28]
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	055b      	lsls	r3, r3, #21
 8002412:	4013      	ands	r3, r2
 8002414:	d110      	bne.n	8002438 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	4b1e      	ldr	r3, [pc, #120]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002418:	69da      	ldr	r2, [r3, #28]
 800241a:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 800241c:	2180      	movs	r1, #128	; 0x80
 800241e:	0549      	lsls	r1, r1, #21
 8002420:	430a      	orrs	r2, r1
 8002422:	61da      	str	r2, [r3, #28]
 8002424:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002426:	69da      	ldr	r2, [r3, #28]
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	055b      	lsls	r3, r3, #21
 800242c:	4013      	ands	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002432:	183b      	adds	r3, r7, r0
 8002434:	2201      	movs	r2, #1
 8002436:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	4b18      	ldr	r3, [pc, #96]	; (800249c <HAL_RCC_OscConfig+0x338>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4013      	ands	r3, r2
 8002442:	d11a      	bne.n	800247a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002444:	4b15      	ldr	r3, [pc, #84]	; (800249c <HAL_RCC_OscConfig+0x338>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <HAL_RCC_OscConfig+0x338>)
 800244a:	2180      	movs	r1, #128	; 0x80
 800244c:	0049      	lsls	r1, r1, #1
 800244e:	430a      	orrs	r2, r1
 8002450:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002452:	f7fe fd2d 	bl	8000eb0 <HAL_GetTick>
 8002456:	0003      	movs	r3, r0
 8002458:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245c:	f7fe fd28 	bl	8000eb0 <HAL_GetTick>
 8002460:	0002      	movs	r2, r0
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e185      	b.n	800277a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_RCC_OscConfig+0x338>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4013      	ands	r3, r2
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d10e      	bne.n	80024a0 <HAL_RCC_OscConfig+0x33c>
 8002482:	4b03      	ldr	r3, [pc, #12]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002484:	6a1a      	ldr	r2, [r3, #32]
 8002486:	4b02      	ldr	r3, [pc, #8]	; (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002488:	2101      	movs	r1, #1
 800248a:	430a      	orrs	r2, r1
 800248c:	621a      	str	r2, [r3, #32]
 800248e:	e035      	b.n	80024fc <HAL_RCC_OscConfig+0x398>
 8002490:	40021000 	.word	0x40021000
 8002494:	fffeffff 	.word	0xfffeffff
 8002498:	fffbffff 	.word	0xfffbffff
 800249c:	40007000 	.word	0x40007000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10c      	bne.n	80024c2 <HAL_RCC_OscConfig+0x35e>
 80024a8:	4bb6      	ldr	r3, [pc, #728]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80024aa:	6a1a      	ldr	r2, [r3, #32]
 80024ac:	4bb5      	ldr	r3, [pc, #724]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80024ae:	2101      	movs	r1, #1
 80024b0:	438a      	bics	r2, r1
 80024b2:	621a      	str	r2, [r3, #32]
 80024b4:	4bb3      	ldr	r3, [pc, #716]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80024b6:	6a1a      	ldr	r2, [r3, #32]
 80024b8:	4bb2      	ldr	r3, [pc, #712]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80024ba:	2104      	movs	r1, #4
 80024bc:	438a      	bics	r2, r1
 80024be:	621a      	str	r2, [r3, #32]
 80024c0:	e01c      	b.n	80024fc <HAL_RCC_OscConfig+0x398>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b05      	cmp	r3, #5
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCC_OscConfig+0x380>
 80024ca:	4bae      	ldr	r3, [pc, #696]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80024cc:	6a1a      	ldr	r2, [r3, #32]
 80024ce:	4bad      	ldr	r3, [pc, #692]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80024d0:	2104      	movs	r1, #4
 80024d2:	430a      	orrs	r2, r1
 80024d4:	621a      	str	r2, [r3, #32]
 80024d6:	4bab      	ldr	r3, [pc, #684]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80024d8:	6a1a      	ldr	r2, [r3, #32]
 80024da:	4baa      	ldr	r3, [pc, #680]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80024dc:	2101      	movs	r1, #1
 80024de:	430a      	orrs	r2, r1
 80024e0:	621a      	str	r2, [r3, #32]
 80024e2:	e00b      	b.n	80024fc <HAL_RCC_OscConfig+0x398>
 80024e4:	4ba7      	ldr	r3, [pc, #668]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80024e6:	6a1a      	ldr	r2, [r3, #32]
 80024e8:	4ba6      	ldr	r3, [pc, #664]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80024ea:	2101      	movs	r1, #1
 80024ec:	438a      	bics	r2, r1
 80024ee:	621a      	str	r2, [r3, #32]
 80024f0:	4ba4      	ldr	r3, [pc, #656]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80024f2:	6a1a      	ldr	r2, [r3, #32]
 80024f4:	4ba3      	ldr	r3, [pc, #652]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80024f6:	2104      	movs	r1, #4
 80024f8:	438a      	bics	r2, r1
 80024fa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d014      	beq.n	800252e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002504:	f7fe fcd4 	bl	8000eb0 <HAL_GetTick>
 8002508:	0003      	movs	r3, r0
 800250a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250c:	e009      	b.n	8002522 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7fe fccf 	bl	8000eb0 <HAL_GetTick>
 8002512:	0002      	movs	r2, r0
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	4a9b      	ldr	r2, [pc, #620]	; (8002788 <HAL_RCC_OscConfig+0x624>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e12b      	b.n	800277a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002522:	4b98      	ldr	r3, [pc, #608]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	2202      	movs	r2, #2
 8002528:	4013      	ands	r3, r2
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x3aa>
 800252c:	e013      	b.n	8002556 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252e:	f7fe fcbf 	bl	8000eb0 <HAL_GetTick>
 8002532:	0003      	movs	r3, r0
 8002534:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002536:	e009      	b.n	800254c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002538:	f7fe fcba 	bl	8000eb0 <HAL_GetTick>
 800253c:	0002      	movs	r2, r0
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	4a91      	ldr	r2, [pc, #580]	; (8002788 <HAL_RCC_OscConfig+0x624>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e116      	b.n	800277a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254c:	4b8d      	ldr	r3, [pc, #564]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	2202      	movs	r2, #2
 8002552:	4013      	ands	r3, r2
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002556:	231f      	movs	r3, #31
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d105      	bne.n	800256c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002560:	4b88      	ldr	r3, [pc, #544]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 8002562:	69da      	ldr	r2, [r3, #28]
 8002564:	4b87      	ldr	r3, [pc, #540]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 8002566:	4989      	ldr	r1, [pc, #548]	; (800278c <HAL_RCC_OscConfig+0x628>)
 8002568:	400a      	ands	r2, r1
 800256a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2210      	movs	r2, #16
 8002572:	4013      	ands	r3, r2
 8002574:	d063      	beq.n	800263e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d12a      	bne.n	80025d4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800257e:	4b81      	ldr	r3, [pc, #516]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 8002580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002582:	4b80      	ldr	r3, [pc, #512]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 8002584:	2104      	movs	r1, #4
 8002586:	430a      	orrs	r2, r1
 8002588:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800258a:	4b7e      	ldr	r3, [pc, #504]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 800258c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800258e:	4b7d      	ldr	r3, [pc, #500]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 8002590:	2101      	movs	r1, #1
 8002592:	430a      	orrs	r2, r1
 8002594:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002596:	f7fe fc8b 	bl	8000eb0 <HAL_GetTick>
 800259a:	0003      	movs	r3, r0
 800259c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025a0:	f7fe fc86 	bl	8000eb0 <HAL_GetTick>
 80025a4:	0002      	movs	r2, r0
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e0e3      	b.n	800277a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80025b2:	4b74      	ldr	r3, [pc, #464]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80025b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b6:	2202      	movs	r2, #2
 80025b8:	4013      	ands	r3, r2
 80025ba:	d0f1      	beq.n	80025a0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80025bc:	4b71      	ldr	r3, [pc, #452]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80025be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c0:	22f8      	movs	r2, #248	; 0xf8
 80025c2:	4393      	bics	r3, r2
 80025c4:	0019      	movs	r1, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	00da      	lsls	r2, r3, #3
 80025cc:	4b6d      	ldr	r3, [pc, #436]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80025ce:	430a      	orrs	r2, r1
 80025d0:	635a      	str	r2, [r3, #52]	; 0x34
 80025d2:	e034      	b.n	800263e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	3305      	adds	r3, #5
 80025da:	d111      	bne.n	8002600 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80025dc:	4b69      	ldr	r3, [pc, #420]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80025de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025e0:	4b68      	ldr	r3, [pc, #416]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80025e2:	2104      	movs	r1, #4
 80025e4:	438a      	bics	r2, r1
 80025e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80025e8:	4b66      	ldr	r3, [pc, #408]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80025ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ec:	22f8      	movs	r2, #248	; 0xf8
 80025ee:	4393      	bics	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	00da      	lsls	r2, r3, #3
 80025f8:	4b62      	ldr	r3, [pc, #392]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80025fa:	430a      	orrs	r2, r1
 80025fc:	635a      	str	r2, [r3, #52]	; 0x34
 80025fe:	e01e      	b.n	800263e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002600:	4b60      	ldr	r3, [pc, #384]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 8002602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002604:	4b5f      	ldr	r3, [pc, #380]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 8002606:	2104      	movs	r1, #4
 8002608:	430a      	orrs	r2, r1
 800260a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800260c:	4b5d      	ldr	r3, [pc, #372]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 800260e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002610:	4b5c      	ldr	r3, [pc, #368]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 8002612:	2101      	movs	r1, #1
 8002614:	438a      	bics	r2, r1
 8002616:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002618:	f7fe fc4a 	bl	8000eb0 <HAL_GetTick>
 800261c:	0003      	movs	r3, r0
 800261e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002622:	f7fe fc45 	bl	8000eb0 <HAL_GetTick>
 8002626:	0002      	movs	r2, r0
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e0a2      	b.n	800277a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002634:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 8002636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002638:	2202      	movs	r2, #2
 800263a:	4013      	ands	r3, r2
 800263c:	d1f1      	bne.n	8002622 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d100      	bne.n	8002648 <HAL_RCC_OscConfig+0x4e4>
 8002646:	e097      	b.n	8002778 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002648:	4b4e      	ldr	r3, [pc, #312]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	220c      	movs	r2, #12
 800264e:	4013      	ands	r3, r2
 8002650:	2b08      	cmp	r3, #8
 8002652:	d100      	bne.n	8002656 <HAL_RCC_OscConfig+0x4f2>
 8002654:	e06b      	b.n	800272e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d14c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265e:	4b49      	ldr	r3, [pc, #292]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b48      	ldr	r3, [pc, #288]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 8002664:	494a      	ldr	r1, [pc, #296]	; (8002790 <HAL_RCC_OscConfig+0x62c>)
 8002666:	400a      	ands	r2, r1
 8002668:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7fe fc21 	bl	8000eb0 <HAL_GetTick>
 800266e:	0003      	movs	r3, r0
 8002670:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002674:	f7fe fc1c 	bl	8000eb0 <HAL_GetTick>
 8002678:	0002      	movs	r2, r0
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e079      	b.n	800277a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002686:	4b3f      	ldr	r3, [pc, #252]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	049b      	lsls	r3, r3, #18
 800268e:	4013      	ands	r3, r2
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002692:	4b3c      	ldr	r3, [pc, #240]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	220f      	movs	r2, #15
 8002698:	4393      	bics	r3, r2
 800269a:	0019      	movs	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a0:	4b38      	ldr	r3, [pc, #224]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80026a2:	430a      	orrs	r2, r1
 80026a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80026a6:	4b37      	ldr	r3, [pc, #220]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	4a3a      	ldr	r2, [pc, #232]	; (8002794 <HAL_RCC_OscConfig+0x630>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	0019      	movs	r1, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	431a      	orrs	r2, r3
 80026ba:	4b32      	ldr	r3, [pc, #200]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80026bc:	430a      	orrs	r2, r1
 80026be:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c0:	4b30      	ldr	r3, [pc, #192]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b2f      	ldr	r3, [pc, #188]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80026c6:	2180      	movs	r1, #128	; 0x80
 80026c8:	0449      	lsls	r1, r1, #17
 80026ca:	430a      	orrs	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ce:	f7fe fbef 	bl	8000eb0 <HAL_GetTick>
 80026d2:	0003      	movs	r3, r0
 80026d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d8:	f7fe fbea 	bl	8000eb0 <HAL_GetTick>
 80026dc:	0002      	movs	r2, r0
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e047      	b.n	800277a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ea:	4b26      	ldr	r3, [pc, #152]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	049b      	lsls	r3, r3, #18
 80026f2:	4013      	ands	r3, r2
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x574>
 80026f6:	e03f      	b.n	8002778 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f8:	4b22      	ldr	r3, [pc, #136]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4b21      	ldr	r3, [pc, #132]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 80026fe:	4924      	ldr	r1, [pc, #144]	; (8002790 <HAL_RCC_OscConfig+0x62c>)
 8002700:	400a      	ands	r2, r1
 8002702:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7fe fbd4 	bl	8000eb0 <HAL_GetTick>
 8002708:	0003      	movs	r3, r0
 800270a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800270e:	f7fe fbcf 	bl	8000eb0 <HAL_GetTick>
 8002712:	0002      	movs	r2, r0
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e02c      	b.n	800277a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002720:	4b18      	ldr	r3, [pc, #96]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	049b      	lsls	r3, r3, #18
 8002728:	4013      	ands	r3, r2
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0x5aa>
 800272c:	e024      	b.n	8002778 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e01f      	b.n	800277a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800273a:	4b12      	ldr	r3, [pc, #72]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002740:	4b10      	ldr	r3, [pc, #64]	; (8002784 <HAL_RCC_OscConfig+0x620>)
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	025b      	lsls	r3, r3, #9
 800274c:	401a      	ands	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	429a      	cmp	r2, r3
 8002754:	d10e      	bne.n	8002774 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	220f      	movs	r2, #15
 800275a:	401a      	ands	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002760:	429a      	cmp	r2, r3
 8002762:	d107      	bne.n	8002774 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	23f0      	movs	r3, #240	; 0xf0
 8002768:	039b      	lsls	r3, r3, #14
 800276a:	401a      	ands	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	0018      	movs	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	b008      	add	sp, #32
 8002780:	bd80      	pop	{r7, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	40021000 	.word	0x40021000
 8002788:	00001388 	.word	0x00001388
 800278c:	efffffff 	.word	0xefffffff
 8002790:	feffffff 	.word	0xfeffffff
 8002794:	ffc2ffff 	.word	0xffc2ffff

08002798 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0b3      	b.n	8002914 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027ac:	4b5b      	ldr	r3, [pc, #364]	; (800291c <HAL_RCC_ClockConfig+0x184>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2201      	movs	r2, #1
 80027b2:	4013      	ands	r3, r2
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d911      	bls.n	80027de <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ba:	4b58      	ldr	r3, [pc, #352]	; (800291c <HAL_RCC_ClockConfig+0x184>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2201      	movs	r2, #1
 80027c0:	4393      	bics	r3, r2
 80027c2:	0019      	movs	r1, r3
 80027c4:	4b55      	ldr	r3, [pc, #340]	; (800291c <HAL_RCC_ClockConfig+0x184>)
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027cc:	4b53      	ldr	r3, [pc, #332]	; (800291c <HAL_RCC_ClockConfig+0x184>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2201      	movs	r2, #1
 80027d2:	4013      	ands	r3, r2
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d001      	beq.n	80027de <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e09a      	b.n	8002914 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2202      	movs	r2, #2
 80027e4:	4013      	ands	r3, r2
 80027e6:	d015      	beq.n	8002814 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2204      	movs	r2, #4
 80027ee:	4013      	ands	r3, r2
 80027f0:	d006      	beq.n	8002800 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027f2:	4b4b      	ldr	r3, [pc, #300]	; (8002920 <HAL_RCC_ClockConfig+0x188>)
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	4b4a      	ldr	r3, [pc, #296]	; (8002920 <HAL_RCC_ClockConfig+0x188>)
 80027f8:	21e0      	movs	r1, #224	; 0xe0
 80027fa:	00c9      	lsls	r1, r1, #3
 80027fc:	430a      	orrs	r2, r1
 80027fe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002800:	4b47      	ldr	r3, [pc, #284]	; (8002920 <HAL_RCC_ClockConfig+0x188>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	22f0      	movs	r2, #240	; 0xf0
 8002806:	4393      	bics	r3, r2
 8002808:	0019      	movs	r1, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	4b44      	ldr	r3, [pc, #272]	; (8002920 <HAL_RCC_ClockConfig+0x188>)
 8002810:	430a      	orrs	r2, r1
 8002812:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	4013      	ands	r3, r2
 800281c:	d040      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	4b3e      	ldr	r3, [pc, #248]	; (8002920 <HAL_RCC_ClockConfig+0x188>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	029b      	lsls	r3, r3, #10
 800282e:	4013      	ands	r3, r2
 8002830:	d114      	bne.n	800285c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e06e      	b.n	8002914 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d107      	bne.n	800284e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283e:	4b38      	ldr	r3, [pc, #224]	; (8002920 <HAL_RCC_ClockConfig+0x188>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	049b      	lsls	r3, r3, #18
 8002846:	4013      	ands	r3, r2
 8002848:	d108      	bne.n	800285c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e062      	b.n	8002914 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284e:	4b34      	ldr	r3, [pc, #208]	; (8002920 <HAL_RCC_ClockConfig+0x188>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2202      	movs	r2, #2
 8002854:	4013      	ands	r3, r2
 8002856:	d101      	bne.n	800285c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e05b      	b.n	8002914 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800285c:	4b30      	ldr	r3, [pc, #192]	; (8002920 <HAL_RCC_ClockConfig+0x188>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2203      	movs	r2, #3
 8002862:	4393      	bics	r3, r2
 8002864:	0019      	movs	r1, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <HAL_RCC_ClockConfig+0x188>)
 800286c:	430a      	orrs	r2, r1
 800286e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002870:	f7fe fb1e 	bl	8000eb0 <HAL_GetTick>
 8002874:	0003      	movs	r3, r0
 8002876:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002878:	e009      	b.n	800288e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800287a:	f7fe fb19 	bl	8000eb0 <HAL_GetTick>
 800287e:	0002      	movs	r2, r0
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	4a27      	ldr	r2, [pc, #156]	; (8002924 <HAL_RCC_ClockConfig+0x18c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e042      	b.n	8002914 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_RCC_ClockConfig+0x188>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	220c      	movs	r2, #12
 8002894:	401a      	ands	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	429a      	cmp	r2, r3
 800289e:	d1ec      	bne.n	800287a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028a0:	4b1e      	ldr	r3, [pc, #120]	; (800291c <HAL_RCC_ClockConfig+0x184>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2201      	movs	r2, #1
 80028a6:	4013      	ands	r3, r2
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d211      	bcs.n	80028d2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ae:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_RCC_ClockConfig+0x184>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2201      	movs	r2, #1
 80028b4:	4393      	bics	r3, r2
 80028b6:	0019      	movs	r1, r3
 80028b8:	4b18      	ldr	r3, [pc, #96]	; (800291c <HAL_RCC_ClockConfig+0x184>)
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c0:	4b16      	ldr	r3, [pc, #88]	; (800291c <HAL_RCC_ClockConfig+0x184>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2201      	movs	r2, #1
 80028c6:	4013      	ands	r3, r2
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d001      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e020      	b.n	8002914 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2204      	movs	r2, #4
 80028d8:	4013      	ands	r3, r2
 80028da:	d009      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80028dc:	4b10      	ldr	r3, [pc, #64]	; (8002920 <HAL_RCC_ClockConfig+0x188>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a11      	ldr	r2, [pc, #68]	; (8002928 <HAL_RCC_ClockConfig+0x190>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <HAL_RCC_ClockConfig+0x188>)
 80028ec:	430a      	orrs	r2, r1
 80028ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028f0:	f000 f820 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80028f4:	0001      	movs	r1, r0
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <HAL_RCC_ClockConfig+0x188>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	220f      	movs	r2, #15
 80028fe:	4013      	ands	r3, r2
 8002900:	4a0a      	ldr	r2, [pc, #40]	; (800292c <HAL_RCC_ClockConfig+0x194>)
 8002902:	5cd3      	ldrb	r3, [r2, r3]
 8002904:	000a      	movs	r2, r1
 8002906:	40da      	lsrs	r2, r3
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_RCC_ClockConfig+0x198>)
 800290a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800290c:	2000      	movs	r0, #0
 800290e:	f7fe fa89 	bl	8000e24 <HAL_InitTick>
  
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	0018      	movs	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	b004      	add	sp, #16
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40022000 	.word	0x40022000
 8002920:	40021000 	.word	0x40021000
 8002924:	00001388 	.word	0x00001388
 8002928:	fffff8ff 	.word	0xfffff8ff
 800292c:	08003d98 	.word	0x08003d98
 8002930:	20000000 	.word	0x20000000

08002934 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b08f      	sub	sp, #60	; 0x3c
 8002938:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800293a:	2314      	movs	r3, #20
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	4a2b      	ldr	r2, [pc, #172]	; (80029ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002940:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002942:	c313      	stmia	r3!, {r0, r1, r4}
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	4a29      	ldr	r2, [pc, #164]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800294c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800294e:	c313      	stmia	r3!, {r0, r1, r4}
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002958:	2300      	movs	r3, #0
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
 800295c:	2300      	movs	r3, #0
 800295e:	637b      	str	r3, [r7, #52]	; 0x34
 8002960:	2300      	movs	r3, #0
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002968:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	220c      	movs	r2, #12
 8002972:	4013      	ands	r3, r2
 8002974:	2b04      	cmp	r3, #4
 8002976:	d002      	beq.n	800297e <HAL_RCC_GetSysClockFreq+0x4a>
 8002978:	2b08      	cmp	r3, #8
 800297a:	d003      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0x50>
 800297c:	e02d      	b.n	80029da <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800297e:	4b1e      	ldr	r3, [pc, #120]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002980:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002982:	e02d      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002986:	0c9b      	lsrs	r3, r3, #18
 8002988:	220f      	movs	r2, #15
 800298a:	4013      	ands	r3, r2
 800298c:	2214      	movs	r2, #20
 800298e:	18ba      	adds	r2, r7, r2
 8002990:	5cd3      	ldrb	r3, [r2, r3]
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002994:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	220f      	movs	r2, #15
 800299a:	4013      	ands	r3, r2
 800299c:	1d3a      	adds	r2, r7, #4
 800299e:	5cd3      	ldrb	r3, [r2, r3]
 80029a0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80029a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	025b      	lsls	r3, r3, #9
 80029a8:	4013      	ands	r3, r2
 80029aa:	d009      	beq.n	80029c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029ae:	4812      	ldr	r0, [pc, #72]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029b0:	f7fd fbbc 	bl	800012c <__udivsi3>
 80029b4:	0003      	movs	r3, r0
 80029b6:	001a      	movs	r2, r3
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	4353      	muls	r3, r2
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34
 80029be:	e009      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80029c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029c2:	000a      	movs	r2, r1
 80029c4:	0152      	lsls	r2, r2, #5
 80029c6:	1a52      	subs	r2, r2, r1
 80029c8:	0193      	lsls	r3, r2, #6
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	185b      	adds	r3, r3, r1
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80029d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029d8:	e002      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029de:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80029e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b00f      	add	sp, #60	; 0x3c
 80029e8:	bd90      	pop	{r4, r7, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	08003d78 	.word	0x08003d78
 80029f0:	08003d88 	.word	0x08003d88
 80029f4:	40021000 	.word	0x40021000
 80029f8:	007a1200 	.word	0x007a1200

080029fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a00:	4b02      	ldr	r3, [pc, #8]	; (8002a0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	20000000 	.word	0x20000000

08002a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002a14:	f7ff fff2 	bl	80029fc <HAL_RCC_GetHCLKFreq>
 8002a18:	0001      	movs	r1, r0
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	2207      	movs	r2, #7
 8002a22:	4013      	ands	r3, r2
 8002a24:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a26:	5cd3      	ldrb	r3, [r2, r3]
 8002a28:	40d9      	lsrs	r1, r3
 8002a2a:	000b      	movs	r3, r1
}    
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	40021000 	.word	0x40021000
 8002a38:	08003da8 	.word	0x08003da8

08002a3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	025b      	lsls	r3, r3, #9
 8002a54:	4013      	ands	r3, r2
 8002a56:	d100      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002a58:	e08e      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002a5a:	2017      	movs	r0, #23
 8002a5c:	183b      	adds	r3, r7, r0
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a62:	4b5f      	ldr	r3, [pc, #380]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002a64:	69da      	ldr	r2, [r3, #28]
 8002a66:	2380      	movs	r3, #128	; 0x80
 8002a68:	055b      	lsls	r3, r3, #21
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d110      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a6e:	4b5c      	ldr	r3, [pc, #368]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002a70:	69da      	ldr	r2, [r3, #28]
 8002a72:	4b5b      	ldr	r3, [pc, #364]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002a74:	2180      	movs	r1, #128	; 0x80
 8002a76:	0549      	lsls	r1, r1, #21
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	61da      	str	r2, [r3, #28]
 8002a7c:	4b58      	ldr	r3, [pc, #352]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002a7e:	69da      	ldr	r2, [r3, #28]
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	055b      	lsls	r3, r3, #21
 8002a84:	4013      	ands	r3, r2
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a8a:	183b      	adds	r3, r7, r0
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a90:	4b54      	ldr	r3, [pc, #336]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d11a      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a9c:	4b51      	ldr	r3, [pc, #324]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b50      	ldr	r3, [pc, #320]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002aa2:	2180      	movs	r1, #128	; 0x80
 8002aa4:	0049      	lsls	r1, r1, #1
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fa01 	bl	8000eb0 <HAL_GetTick>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab4:	f7fe f9fc 	bl	8000eb0 <HAL_GetTick>
 8002ab8:	0002      	movs	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	; 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e087      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac6:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	2380      	movs	r3, #128	; 0x80
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ad2:	4b43      	ldr	r3, [pc, #268]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ad4:	6a1a      	ldr	r2, [r3, #32]
 8002ad6:	23c0      	movs	r3, #192	; 0xc0
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4013      	ands	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d034      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	23c0      	movs	r3, #192	; 0xc0
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4013      	ands	r3, r2
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d02c      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002af4:	4b3a      	ldr	r3, [pc, #232]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	4a3b      	ldr	r2, [pc, #236]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002afe:	4b38      	ldr	r3, [pc, #224]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b00:	6a1a      	ldr	r2, [r3, #32]
 8002b02:	4b37      	ldr	r3, [pc, #220]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b04:	2180      	movs	r1, #128	; 0x80
 8002b06:	0249      	lsls	r1, r1, #9
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b0c:	4b34      	ldr	r3, [pc, #208]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b0e:	6a1a      	ldr	r2, [r3, #32]
 8002b10:	4b33      	ldr	r3, [pc, #204]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b12:	4936      	ldr	r1, [pc, #216]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b14:	400a      	ands	r2, r1
 8002b16:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b18:	4b31      	ldr	r3, [pc, #196]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	4013      	ands	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7fe f9c3 	bl	8000eb0 <HAL_GetTick>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2e:	e009      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b30:	f7fe f9be 	bl	8000eb0 <HAL_GetTick>
 8002b34:	0002      	movs	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	4a2d      	ldr	r2, [pc, #180]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e048      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b44:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b4e:	4b24      	ldr	r3, [pc, #144]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4a25      	ldr	r2, [pc, #148]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	0019      	movs	r1, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b62:	2317      	movs	r3, #23
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d105      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6c:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b6e:	69da      	ldr	r2, [r3, #28]
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b72:	4920      	ldr	r1, [pc, #128]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b74:	400a      	ands	r2, r1
 8002b76:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d009      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b82:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	2203      	movs	r2, #3
 8002b88:	4393      	bics	r3, r2
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b92:	430a      	orrs	r2, r1
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d009      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	2210      	movs	r2, #16
 8002ba6:	4393      	bics	r3, r2
 8002ba8:	0019      	movs	r1, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d009      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bc0:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	2240      	movs	r2, #64	; 0x40
 8002bc6:	4393      	bics	r3, r2
 8002bc8:	0019      	movs	r1, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b006      	add	sp, #24
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40007000 	.word	0x40007000
 8002be8:	fffffcff 	.word	0xfffffcff
 8002bec:	fffeffff 	.word	0xfffeffff
 8002bf0:	00001388 	.word	0x00001388
 8002bf4:	efffffff 	.word	0xefffffff

08002bf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e044      	b.n	8002c94 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d107      	bne.n	8002c22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2274      	movs	r2, #116	; 0x74
 8002c16:	2100      	movs	r1, #0
 8002c18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f7fe f823 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2224      	movs	r2, #36	; 0x24
 8002c26:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2101      	movs	r1, #1
 8002c34:	438a      	bics	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f000 f8da 	bl	8002df4 <UART_SetConfig>
 8002c40:	0003      	movs	r3, r0
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e024      	b.n	8002c94 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	0018      	movs	r0, r3
 8002c56:	f000 fa0d 	bl	8003074 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	490d      	ldr	r1, [pc, #52]	; (8002c9c <HAL_UART_Init+0xa4>)
 8002c66:	400a      	ands	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	212a      	movs	r1, #42	; 0x2a
 8002c76:	438a      	bics	r2, r1
 8002c78:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2101      	movs	r1, #1
 8002c86:	430a      	orrs	r2, r1
 8002c88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f000 faa5 	bl	80031dc <UART_CheckIdleState>
 8002c92:	0003      	movs	r3, r0
}
 8002c94:	0018      	movs	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b002      	add	sp, #8
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	ffffb7ff 	.word	0xffffb7ff

08002ca0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	1dbb      	adds	r3, r7, #6
 8002cae:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d000      	beq.n	8002cba <HAL_UART_Transmit+0x1a>
 8002cb8:	e096      	b.n	8002de8 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_UART_Transmit+0x28>
 8002cc0:	1dbb      	adds	r3, r7, #6
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e08e      	b.n	8002dea <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	2380      	movs	r3, #128	; 0x80
 8002cd2:	015b      	lsls	r3, r3, #5
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d109      	bne.n	8002cec <HAL_UART_Transmit+0x4c>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d105      	bne.n	8002cec <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d001      	beq.n	8002cec <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e07e      	b.n	8002dea <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2274      	movs	r2, #116	; 0x74
 8002cf0:	5c9b      	ldrb	r3, [r3, r2]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_UART_Transmit+0x5a>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e077      	b.n	8002dea <HAL_UART_Transmit+0x14a>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2274      	movs	r2, #116	; 0x74
 8002cfe:	2101      	movs	r1, #1
 8002d00:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2280      	movs	r2, #128	; 0x80
 8002d06:	2100      	movs	r1, #0
 8002d08:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2221      	movs	r2, #33	; 0x21
 8002d0e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d10:	f7fe f8ce 	bl	8000eb0 <HAL_GetTick>
 8002d14:	0003      	movs	r3, r0
 8002d16:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1dba      	adds	r2, r7, #6
 8002d1c:	2150      	movs	r1, #80	; 0x50
 8002d1e:	8812      	ldrh	r2, [r2, #0]
 8002d20:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1dba      	adds	r2, r7, #6
 8002d26:	2152      	movs	r1, #82	; 0x52
 8002d28:	8812      	ldrh	r2, [r2, #0]
 8002d2a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	015b      	lsls	r3, r3, #5
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d108      	bne.n	8002d4a <HAL_UART_Transmit+0xaa>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d104      	bne.n	8002d4a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	61bb      	str	r3, [r7, #24]
 8002d48:	e003      	b.n	8002d52 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2274      	movs	r2, #116	; 0x74
 8002d56:	2100      	movs	r1, #0
 8002d58:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002d5a:	e02d      	b.n	8002db8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	0013      	movs	r3, r2
 8002d66:	2200      	movs	r2, #0
 8002d68:	2180      	movs	r1, #128	; 0x80
 8002d6a:	f000 fa7f 	bl	800326c <UART_WaitOnFlagUntilTimeout>
 8002d6e:	1e03      	subs	r3, r0, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e039      	b.n	8002dea <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10b      	bne.n	8002d94 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	881a      	ldrh	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	05d2      	lsls	r2, r2, #23
 8002d86:	0dd2      	lsrs	r2, r2, #23
 8002d88:	b292      	uxth	r2, r2
 8002d8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	3302      	adds	r3, #2
 8002d90:	61bb      	str	r3, [r7, #24]
 8002d92:	e008      	b.n	8002da6 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	781a      	ldrb	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	b292      	uxth	r2, r2
 8002d9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	3301      	adds	r3, #1
 8002da4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2252      	movs	r2, #82	; 0x52
 8002daa:	5a9b      	ldrh	r3, [r3, r2]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b299      	uxth	r1, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2252      	movs	r2, #82	; 0x52
 8002db6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2252      	movs	r2, #82	; 0x52
 8002dbc:	5a9b      	ldrh	r3, [r3, r2]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1cb      	bne.n	8002d5c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	0013      	movs	r3, r2
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2140      	movs	r1, #64	; 0x40
 8002dd2:	f000 fa4b 	bl	800326c <UART_WaitOnFlagUntilTimeout>
 8002dd6:	1e03      	subs	r3, r0, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e005      	b.n	8002dea <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	e000      	b.n	8002dea <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002de8:	2302      	movs	r3, #2
  }
}
 8002dea:	0018      	movs	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	b008      	add	sp, #32
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dfc:	231e      	movs	r3, #30
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a8d      	ldr	r2, [pc, #564]	; (8003058 <UART_SetConfig+0x264>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	0019      	movs	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4a88      	ldr	r2, [pc, #544]	; (800305c <UART_SetConfig+0x268>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	4a7f      	ldr	r2, [pc, #508]	; (8003060 <UART_SetConfig+0x26c>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	0019      	movs	r1, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a7b      	ldr	r2, [pc, #492]	; (8003064 <UART_SetConfig+0x270>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d127      	bne.n	8002eca <UART_SetConfig+0xd6>
 8002e7a:	4b7b      	ldr	r3, [pc, #492]	; (8003068 <UART_SetConfig+0x274>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	2203      	movs	r2, #3
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d00d      	beq.n	8002ea2 <UART_SetConfig+0xae>
 8002e86:	d81b      	bhi.n	8002ec0 <UART_SetConfig+0xcc>
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d014      	beq.n	8002eb6 <UART_SetConfig+0xc2>
 8002e8c:	d818      	bhi.n	8002ec0 <UART_SetConfig+0xcc>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <UART_SetConfig+0xa4>
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d00a      	beq.n	8002eac <UART_SetConfig+0xb8>
 8002e96:	e013      	b.n	8002ec0 <UART_SetConfig+0xcc>
 8002e98:	231f      	movs	r3, #31
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e021      	b.n	8002ee6 <UART_SetConfig+0xf2>
 8002ea2:	231f      	movs	r3, #31
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	701a      	strb	r2, [r3, #0]
 8002eaa:	e01c      	b.n	8002ee6 <UART_SetConfig+0xf2>
 8002eac:	231f      	movs	r3, #31
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	701a      	strb	r2, [r3, #0]
 8002eb4:	e017      	b.n	8002ee6 <UART_SetConfig+0xf2>
 8002eb6:	231f      	movs	r3, #31
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	2208      	movs	r2, #8
 8002ebc:	701a      	strb	r2, [r3, #0]
 8002ebe:	e012      	b.n	8002ee6 <UART_SetConfig+0xf2>
 8002ec0:	231f      	movs	r3, #31
 8002ec2:	18fb      	adds	r3, r7, r3
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	e00d      	b.n	8002ee6 <UART_SetConfig+0xf2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a67      	ldr	r2, [pc, #412]	; (800306c <UART_SetConfig+0x278>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d104      	bne.n	8002ede <UART_SetConfig+0xea>
 8002ed4:	231f      	movs	r3, #31
 8002ed6:	18fb      	adds	r3, r7, r3
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
 8002edc:	e003      	b.n	8002ee6 <UART_SetConfig+0xf2>
 8002ede:	231f      	movs	r3, #31
 8002ee0:	18fb      	adds	r3, r7, r3
 8002ee2:	2210      	movs	r2, #16
 8002ee4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69da      	ldr	r2, [r3, #28]
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	021b      	lsls	r3, r3, #8
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d15d      	bne.n	8002fae <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002ef2:	231f      	movs	r3, #31
 8002ef4:	18fb      	adds	r3, r7, r3
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d015      	beq.n	8002f28 <UART_SetConfig+0x134>
 8002efc:	dc18      	bgt.n	8002f30 <UART_SetConfig+0x13c>
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d00d      	beq.n	8002f1e <UART_SetConfig+0x12a>
 8002f02:	dc15      	bgt.n	8002f30 <UART_SetConfig+0x13c>
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <UART_SetConfig+0x11a>
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d005      	beq.n	8002f18 <UART_SetConfig+0x124>
 8002f0c:	e010      	b.n	8002f30 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f0e:	f7ff fd7f 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 8002f12:	0003      	movs	r3, r0
 8002f14:	61bb      	str	r3, [r7, #24]
        break;
 8002f16:	e012      	b.n	8002f3e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f18:	4b55      	ldr	r3, [pc, #340]	; (8003070 <UART_SetConfig+0x27c>)
 8002f1a:	61bb      	str	r3, [r7, #24]
        break;
 8002f1c:	e00f      	b.n	8002f3e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f1e:	f7ff fd09 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 8002f22:	0003      	movs	r3, r0
 8002f24:	61bb      	str	r3, [r7, #24]
        break;
 8002f26:	e00a      	b.n	8002f3e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	021b      	lsls	r3, r3, #8
 8002f2c:	61bb      	str	r3, [r7, #24]
        break;
 8002f2e:	e006      	b.n	8002f3e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f34:	231e      	movs	r3, #30
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
        break;
 8002f3c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d100      	bne.n	8002f46 <UART_SetConfig+0x152>
 8002f44:	e07b      	b.n	800303e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	005a      	lsls	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	085b      	lsrs	r3, r3, #1
 8002f50:	18d2      	adds	r2, r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	0019      	movs	r1, r3
 8002f58:	0010      	movs	r0, r2
 8002f5a:	f7fd f8e7 	bl	800012c <__udivsi3>
 8002f5e:	0003      	movs	r3, r0
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	2b0f      	cmp	r3, #15
 8002f68:	d91c      	bls.n	8002fa4 <UART_SetConfig+0x1b0>
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	2380      	movs	r3, #128	; 0x80
 8002f6e:	025b      	lsls	r3, r3, #9
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d217      	bcs.n	8002fa4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	200e      	movs	r0, #14
 8002f7a:	183b      	adds	r3, r7, r0
 8002f7c:	210f      	movs	r1, #15
 8002f7e:	438a      	bics	r2, r1
 8002f80:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	085b      	lsrs	r3, r3, #1
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2207      	movs	r2, #7
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	b299      	uxth	r1, r3
 8002f8e:	183b      	adds	r3, r7, r0
 8002f90:	183a      	adds	r2, r7, r0
 8002f92:	8812      	ldrh	r2, [r2, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	183a      	adds	r2, r7, r0
 8002f9e:	8812      	ldrh	r2, [r2, #0]
 8002fa0:	60da      	str	r2, [r3, #12]
 8002fa2:	e04c      	b.n	800303e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002fa4:	231e      	movs	r3, #30
 8002fa6:	18fb      	adds	r3, r7, r3
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]
 8002fac:	e047      	b.n	800303e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fae:	231f      	movs	r3, #31
 8002fb0:	18fb      	adds	r3, r7, r3
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d015      	beq.n	8002fe4 <UART_SetConfig+0x1f0>
 8002fb8:	dc18      	bgt.n	8002fec <UART_SetConfig+0x1f8>
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d00d      	beq.n	8002fda <UART_SetConfig+0x1e6>
 8002fbe:	dc15      	bgt.n	8002fec <UART_SetConfig+0x1f8>
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <UART_SetConfig+0x1d6>
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d005      	beq.n	8002fd4 <UART_SetConfig+0x1e0>
 8002fc8:	e010      	b.n	8002fec <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fca:	f7ff fd21 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	61bb      	str	r3, [r7, #24]
        break;
 8002fd2:	e012      	b.n	8002ffa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fd4:	4b26      	ldr	r3, [pc, #152]	; (8003070 <UART_SetConfig+0x27c>)
 8002fd6:	61bb      	str	r3, [r7, #24]
        break;
 8002fd8:	e00f      	b.n	8002ffa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fda:	f7ff fcab 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	61bb      	str	r3, [r7, #24]
        break;
 8002fe2:	e00a      	b.n	8002ffa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	61bb      	str	r3, [r7, #24]
        break;
 8002fea:	e006      	b.n	8002ffa <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ff0:	231e      	movs	r3, #30
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	701a      	strb	r2, [r3, #0]
        break;
 8002ff8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01e      	beq.n	800303e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	085a      	lsrs	r2, r3, #1
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	18d2      	adds	r2, r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	0019      	movs	r1, r3
 8003010:	0010      	movs	r0, r2
 8003012:	f7fd f88b 	bl	800012c <__udivsi3>
 8003016:	0003      	movs	r3, r0
 8003018:	b29b      	uxth	r3, r3
 800301a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2b0f      	cmp	r3, #15
 8003020:	d909      	bls.n	8003036 <UART_SetConfig+0x242>
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	025b      	lsls	r3, r3, #9
 8003028:	429a      	cmp	r2, r3
 800302a:	d204      	bcs.n	8003036 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	60da      	str	r2, [r3, #12]
 8003034:	e003      	b.n	800303e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003036:	231e      	movs	r3, #30
 8003038:	18fb      	adds	r3, r7, r3
 800303a:	2201      	movs	r2, #1
 800303c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800304a:	231e      	movs	r3, #30
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	781b      	ldrb	r3, [r3, #0]
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	b008      	add	sp, #32
 8003056:	bd80      	pop	{r7, pc}
 8003058:	ffff69f3 	.word	0xffff69f3
 800305c:	ffffcfff 	.word	0xffffcfff
 8003060:	fffff4ff 	.word	0xfffff4ff
 8003064:	40013800 	.word	0x40013800
 8003068:	40021000 	.word	0x40021000
 800306c:	40004400 	.word	0x40004400
 8003070:	007a1200 	.word	0x007a1200

08003074 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	2201      	movs	r2, #1
 8003082:	4013      	ands	r3, r2
 8003084:	d00b      	beq.n	800309e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4a4a      	ldr	r2, [pc, #296]	; (80031b8 <UART_AdvFeatureConfig+0x144>)
 800308e:	4013      	ands	r3, r2
 8003090:	0019      	movs	r1, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	2202      	movs	r2, #2
 80030a4:	4013      	ands	r3, r2
 80030a6:	d00b      	beq.n	80030c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4a43      	ldr	r2, [pc, #268]	; (80031bc <UART_AdvFeatureConfig+0x148>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	0019      	movs	r1, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	2204      	movs	r2, #4
 80030c6:	4013      	ands	r3, r2
 80030c8:	d00b      	beq.n	80030e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	4a3b      	ldr	r2, [pc, #236]	; (80031c0 <UART_AdvFeatureConfig+0x14c>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	0019      	movs	r1, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	2208      	movs	r2, #8
 80030e8:	4013      	ands	r3, r2
 80030ea:	d00b      	beq.n	8003104 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	4a34      	ldr	r2, [pc, #208]	; (80031c4 <UART_AdvFeatureConfig+0x150>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	0019      	movs	r1, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	2210      	movs	r2, #16
 800310a:	4013      	ands	r3, r2
 800310c:	d00b      	beq.n	8003126 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	4a2c      	ldr	r2, [pc, #176]	; (80031c8 <UART_AdvFeatureConfig+0x154>)
 8003116:	4013      	ands	r3, r2
 8003118:	0019      	movs	r1, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	2220      	movs	r2, #32
 800312c:	4013      	ands	r3, r2
 800312e:	d00b      	beq.n	8003148 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	4a25      	ldr	r2, [pc, #148]	; (80031cc <UART_AdvFeatureConfig+0x158>)
 8003138:	4013      	ands	r3, r2
 800313a:	0019      	movs	r1, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	2240      	movs	r2, #64	; 0x40
 800314e:	4013      	ands	r3, r2
 8003150:	d01d      	beq.n	800318e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <UART_AdvFeatureConfig+0x15c>)
 800315a:	4013      	ands	r3, r2
 800315c:	0019      	movs	r1, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	035b      	lsls	r3, r3, #13
 8003172:	429a      	cmp	r2, r3
 8003174:	d10b      	bne.n	800318e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	4a15      	ldr	r2, [pc, #84]	; (80031d4 <UART_AdvFeatureConfig+0x160>)
 800317e:	4013      	ands	r3, r2
 8003180:	0019      	movs	r1, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	2280      	movs	r2, #128	; 0x80
 8003194:	4013      	ands	r3, r2
 8003196:	d00b      	beq.n	80031b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	4a0e      	ldr	r2, [pc, #56]	; (80031d8 <UART_AdvFeatureConfig+0x164>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	0019      	movs	r1, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	605a      	str	r2, [r3, #4]
  }
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b002      	add	sp, #8
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	fffdffff 	.word	0xfffdffff
 80031bc:	fffeffff 	.word	0xfffeffff
 80031c0:	fffbffff 	.word	0xfffbffff
 80031c4:	ffff7fff 	.word	0xffff7fff
 80031c8:	ffffefff 	.word	0xffffefff
 80031cc:	ffffdfff 	.word	0xffffdfff
 80031d0:	ffefffff 	.word	0xffefffff
 80031d4:	ff9fffff 	.word	0xff9fffff
 80031d8:	fff7ffff 	.word	0xfff7ffff

080031dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2280      	movs	r2, #128	; 0x80
 80031e8:	2100      	movs	r1, #0
 80031ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031ec:	f7fd fe60 	bl	8000eb0 <HAL_GetTick>
 80031f0:	0003      	movs	r3, r0
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2208      	movs	r2, #8
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d10c      	bne.n	800321c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	0391      	lsls	r1, r2, #14
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	4a17      	ldr	r2, [pc, #92]	; (8003268 <UART_CheckIdleState+0x8c>)
 800320c:	9200      	str	r2, [sp, #0]
 800320e:	2200      	movs	r2, #0
 8003210:	f000 f82c 	bl	800326c <UART_WaitOnFlagUntilTimeout>
 8003214:	1e03      	subs	r3, r0, #0
 8003216:	d001      	beq.n	800321c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e021      	b.n	8003260 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2204      	movs	r2, #4
 8003224:	4013      	ands	r3, r2
 8003226:	2b04      	cmp	r3, #4
 8003228:	d10c      	bne.n	8003244 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2280      	movs	r2, #128	; 0x80
 800322e:	03d1      	lsls	r1, r2, #15
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	4a0d      	ldr	r2, [pc, #52]	; (8003268 <UART_CheckIdleState+0x8c>)
 8003234:	9200      	str	r2, [sp, #0]
 8003236:	2200      	movs	r2, #0
 8003238:	f000 f818 	bl	800326c <UART_WaitOnFlagUntilTimeout>
 800323c:	1e03      	subs	r3, r0, #0
 800323e:	d001      	beq.n	8003244 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e00d      	b.n	8003260 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2220      	movs	r2, #32
 800324e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2274      	movs	r2, #116	; 0x74
 800325a:	2100      	movs	r1, #0
 800325c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	0018      	movs	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	b004      	add	sp, #16
 8003266:	bd80      	pop	{r7, pc}
 8003268:	01ffffff 	.word	0x01ffffff

0800326c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b094      	sub	sp, #80	; 0x50
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	603b      	str	r3, [r7, #0]
 8003278:	1dfb      	adds	r3, r7, #7
 800327a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327c:	e0a3      	b.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800327e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003280:	3301      	adds	r3, #1
 8003282:	d100      	bne.n	8003286 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003284:	e09f      	b.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003286:	f7fd fe13 	bl	8000eb0 <HAL_GetTick>
 800328a:	0002      	movs	r2, r0
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003292:	429a      	cmp	r2, r3
 8003294:	d302      	bcc.n	800329c <UART_WaitOnFlagUntilTimeout+0x30>
 8003296:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003298:	2b00      	cmp	r3, #0
 800329a:	d13d      	bne.n	8003318 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800329c:	f3ef 8310 	mrs	r3, PRIMASK
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80032a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032a4:	647b      	str	r3, [r7, #68]	; 0x44
 80032a6:	2301      	movs	r3, #1
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ac:	f383 8810 	msr	PRIMASK, r3
}
 80032b0:	46c0      	nop			; (mov r8, r8)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	494c      	ldr	r1, [pc, #304]	; (80033f0 <UART_WaitOnFlagUntilTimeout+0x184>)
 80032be:	400a      	ands	r2, r1
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	f383 8810 	msr	PRIMASK, r3
}
 80032cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ce:	f3ef 8310 	mrs	r3, PRIMASK
 80032d2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80032d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d6:	643b      	str	r3, [r7, #64]	; 0x40
 80032d8:	2301      	movs	r3, #1
 80032da:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032de:	f383 8810 	msr	PRIMASK, r3
}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2101      	movs	r1, #1
 80032f0:	438a      	bics	r2, r1
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032fa:	f383 8810 	msr	PRIMASK, r3
}
 80032fe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2274      	movs	r2, #116	; 0x74
 8003310:	2100      	movs	r1, #0
 8003312:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e067      	b.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2204      	movs	r2, #4
 8003320:	4013      	ands	r3, r2
 8003322:	d050      	beq.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	69da      	ldr	r2, [r3, #28]
 800332a:	2380      	movs	r3, #128	; 0x80
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	401a      	ands	r2, r3
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	429a      	cmp	r2, r3
 8003336:	d146      	bne.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2280      	movs	r2, #128	; 0x80
 800333e:	0112      	lsls	r2, r2, #4
 8003340:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003342:	f3ef 8310 	mrs	r3, PRIMASK
 8003346:	613b      	str	r3, [r7, #16]
  return(result);
 8003348:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800334a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800334c:	2301      	movs	r3, #1
 800334e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f383 8810 	msr	PRIMASK, r3
}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4923      	ldr	r1, [pc, #140]	; (80033f0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003364:	400a      	ands	r2, r1
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800336a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	f383 8810 	msr	PRIMASK, r3
}
 8003372:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003374:	f3ef 8310 	mrs	r3, PRIMASK
 8003378:	61fb      	str	r3, [r7, #28]
  return(result);
 800337a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800337c:	64bb      	str	r3, [r7, #72]	; 0x48
 800337e:	2301      	movs	r3, #1
 8003380:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	f383 8810 	msr	PRIMASK, r3
}
 8003388:	46c0      	nop			; (mov r8, r8)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2101      	movs	r1, #1
 8003396:	438a      	bics	r2, r1
 8003398:	609a      	str	r2, [r3, #8]
 800339a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	f383 8810 	msr	PRIMASK, r3
}
 80033a4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2280      	movs	r2, #128	; 0x80
 80033b6:	2120      	movs	r1, #32
 80033b8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2274      	movs	r2, #116	; 0x74
 80033be:	2100      	movs	r1, #0
 80033c0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e010      	b.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	4013      	ands	r3, r2
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	425a      	negs	r2, r3
 80033d6:	4153      	adcs	r3, r2
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	001a      	movs	r2, r3
 80033dc:	1dfb      	adds	r3, r7, #7
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d100      	bne.n	80033e6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80033e4:	e74b      	b.n	800327e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	0018      	movs	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b014      	add	sp, #80	; 0x50
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	fffffe5f 	.word	0xfffffe5f

080033f4 <__errno>:
 80033f4:	4b01      	ldr	r3, [pc, #4]	; (80033fc <__errno+0x8>)
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	4770      	bx	lr
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	2000000c 	.word	0x2000000c

08003400 <__libc_init_array>:
 8003400:	b570      	push	{r4, r5, r6, lr}
 8003402:	2600      	movs	r6, #0
 8003404:	4d0c      	ldr	r5, [pc, #48]	; (8003438 <__libc_init_array+0x38>)
 8003406:	4c0d      	ldr	r4, [pc, #52]	; (800343c <__libc_init_array+0x3c>)
 8003408:	1b64      	subs	r4, r4, r5
 800340a:	10a4      	asrs	r4, r4, #2
 800340c:	42a6      	cmp	r6, r4
 800340e:	d109      	bne.n	8003424 <__libc_init_array+0x24>
 8003410:	2600      	movs	r6, #0
 8003412:	f000 fc8b 	bl	8003d2c <_init>
 8003416:	4d0a      	ldr	r5, [pc, #40]	; (8003440 <__libc_init_array+0x40>)
 8003418:	4c0a      	ldr	r4, [pc, #40]	; (8003444 <__libc_init_array+0x44>)
 800341a:	1b64      	subs	r4, r4, r5
 800341c:	10a4      	asrs	r4, r4, #2
 800341e:	42a6      	cmp	r6, r4
 8003420:	d105      	bne.n	800342e <__libc_init_array+0x2e>
 8003422:	bd70      	pop	{r4, r5, r6, pc}
 8003424:	00b3      	lsls	r3, r6, #2
 8003426:	58eb      	ldr	r3, [r5, r3]
 8003428:	4798      	blx	r3
 800342a:	3601      	adds	r6, #1
 800342c:	e7ee      	b.n	800340c <__libc_init_array+0xc>
 800342e:	00b3      	lsls	r3, r6, #2
 8003430:	58eb      	ldr	r3, [r5, r3]
 8003432:	4798      	blx	r3
 8003434:	3601      	adds	r6, #1
 8003436:	e7f2      	b.n	800341e <__libc_init_array+0x1e>
 8003438:	08003de4 	.word	0x08003de4
 800343c:	08003de4 	.word	0x08003de4
 8003440:	08003de4 	.word	0x08003de4
 8003444:	08003de8 	.word	0x08003de8

08003448 <memcpy>:
 8003448:	2300      	movs	r3, #0
 800344a:	b510      	push	{r4, lr}
 800344c:	429a      	cmp	r2, r3
 800344e:	d100      	bne.n	8003452 <memcpy+0xa>
 8003450:	bd10      	pop	{r4, pc}
 8003452:	5ccc      	ldrb	r4, [r1, r3]
 8003454:	54c4      	strb	r4, [r0, r3]
 8003456:	3301      	adds	r3, #1
 8003458:	e7f8      	b.n	800344c <memcpy+0x4>

0800345a <memset>:
 800345a:	0003      	movs	r3, r0
 800345c:	1882      	adds	r2, r0, r2
 800345e:	4293      	cmp	r3, r2
 8003460:	d100      	bne.n	8003464 <memset+0xa>
 8003462:	4770      	bx	lr
 8003464:	7019      	strb	r1, [r3, #0]
 8003466:	3301      	adds	r3, #1
 8003468:	e7f9      	b.n	800345e <memset+0x4>
	...

0800346c <siprintf>:
 800346c:	b40e      	push	{r1, r2, r3}
 800346e:	b500      	push	{lr}
 8003470:	490b      	ldr	r1, [pc, #44]	; (80034a0 <siprintf+0x34>)
 8003472:	b09c      	sub	sp, #112	; 0x70
 8003474:	ab1d      	add	r3, sp, #116	; 0x74
 8003476:	9002      	str	r0, [sp, #8]
 8003478:	9006      	str	r0, [sp, #24]
 800347a:	9107      	str	r1, [sp, #28]
 800347c:	9104      	str	r1, [sp, #16]
 800347e:	4809      	ldr	r0, [pc, #36]	; (80034a4 <siprintf+0x38>)
 8003480:	4909      	ldr	r1, [pc, #36]	; (80034a8 <siprintf+0x3c>)
 8003482:	cb04      	ldmia	r3!, {r2}
 8003484:	9105      	str	r1, [sp, #20]
 8003486:	6800      	ldr	r0, [r0, #0]
 8003488:	a902      	add	r1, sp, #8
 800348a:	9301      	str	r3, [sp, #4]
 800348c:	f000 f870 	bl	8003570 <_svfiprintf_r>
 8003490:	2300      	movs	r3, #0
 8003492:	9a02      	ldr	r2, [sp, #8]
 8003494:	7013      	strb	r3, [r2, #0]
 8003496:	b01c      	add	sp, #112	; 0x70
 8003498:	bc08      	pop	{r3}
 800349a:	b003      	add	sp, #12
 800349c:	4718      	bx	r3
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	7fffffff 	.word	0x7fffffff
 80034a4:	2000000c 	.word	0x2000000c
 80034a8:	ffff0208 	.word	0xffff0208

080034ac <__ssputs_r>:
 80034ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ae:	688e      	ldr	r6, [r1, #8]
 80034b0:	b085      	sub	sp, #20
 80034b2:	0007      	movs	r7, r0
 80034b4:	000c      	movs	r4, r1
 80034b6:	9203      	str	r2, [sp, #12]
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	429e      	cmp	r6, r3
 80034bc:	d83c      	bhi.n	8003538 <__ssputs_r+0x8c>
 80034be:	2390      	movs	r3, #144	; 0x90
 80034c0:	898a      	ldrh	r2, [r1, #12]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	421a      	tst	r2, r3
 80034c6:	d034      	beq.n	8003532 <__ssputs_r+0x86>
 80034c8:	6909      	ldr	r1, [r1, #16]
 80034ca:	6823      	ldr	r3, [r4, #0]
 80034cc:	6960      	ldr	r0, [r4, #20]
 80034ce:	1a5b      	subs	r3, r3, r1
 80034d0:	9302      	str	r3, [sp, #8]
 80034d2:	2303      	movs	r3, #3
 80034d4:	4343      	muls	r3, r0
 80034d6:	0fdd      	lsrs	r5, r3, #31
 80034d8:	18ed      	adds	r5, r5, r3
 80034da:	9b01      	ldr	r3, [sp, #4]
 80034dc:	9802      	ldr	r0, [sp, #8]
 80034de:	3301      	adds	r3, #1
 80034e0:	181b      	adds	r3, r3, r0
 80034e2:	106d      	asrs	r5, r5, #1
 80034e4:	42ab      	cmp	r3, r5
 80034e6:	d900      	bls.n	80034ea <__ssputs_r+0x3e>
 80034e8:	001d      	movs	r5, r3
 80034ea:	0553      	lsls	r3, r2, #21
 80034ec:	d532      	bpl.n	8003554 <__ssputs_r+0xa8>
 80034ee:	0029      	movs	r1, r5
 80034f0:	0038      	movs	r0, r7
 80034f2:	f000 fb49 	bl	8003b88 <_malloc_r>
 80034f6:	1e06      	subs	r6, r0, #0
 80034f8:	d109      	bne.n	800350e <__ssputs_r+0x62>
 80034fa:	230c      	movs	r3, #12
 80034fc:	603b      	str	r3, [r7, #0]
 80034fe:	2340      	movs	r3, #64	; 0x40
 8003500:	2001      	movs	r0, #1
 8003502:	89a2      	ldrh	r2, [r4, #12]
 8003504:	4240      	negs	r0, r0
 8003506:	4313      	orrs	r3, r2
 8003508:	81a3      	strh	r3, [r4, #12]
 800350a:	b005      	add	sp, #20
 800350c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800350e:	9a02      	ldr	r2, [sp, #8]
 8003510:	6921      	ldr	r1, [r4, #16]
 8003512:	f7ff ff99 	bl	8003448 <memcpy>
 8003516:	89a3      	ldrh	r3, [r4, #12]
 8003518:	4a14      	ldr	r2, [pc, #80]	; (800356c <__ssputs_r+0xc0>)
 800351a:	401a      	ands	r2, r3
 800351c:	2380      	movs	r3, #128	; 0x80
 800351e:	4313      	orrs	r3, r2
 8003520:	81a3      	strh	r3, [r4, #12]
 8003522:	9b02      	ldr	r3, [sp, #8]
 8003524:	6126      	str	r6, [r4, #16]
 8003526:	18f6      	adds	r6, r6, r3
 8003528:	6026      	str	r6, [r4, #0]
 800352a:	6165      	str	r5, [r4, #20]
 800352c:	9e01      	ldr	r6, [sp, #4]
 800352e:	1aed      	subs	r5, r5, r3
 8003530:	60a5      	str	r5, [r4, #8]
 8003532:	9b01      	ldr	r3, [sp, #4]
 8003534:	429e      	cmp	r6, r3
 8003536:	d900      	bls.n	800353a <__ssputs_r+0x8e>
 8003538:	9e01      	ldr	r6, [sp, #4]
 800353a:	0032      	movs	r2, r6
 800353c:	9903      	ldr	r1, [sp, #12]
 800353e:	6820      	ldr	r0, [r4, #0]
 8003540:	f000 faa3 	bl	8003a8a <memmove>
 8003544:	68a3      	ldr	r3, [r4, #8]
 8003546:	2000      	movs	r0, #0
 8003548:	1b9b      	subs	r3, r3, r6
 800354a:	60a3      	str	r3, [r4, #8]
 800354c:	6823      	ldr	r3, [r4, #0]
 800354e:	199e      	adds	r6, r3, r6
 8003550:	6026      	str	r6, [r4, #0]
 8003552:	e7da      	b.n	800350a <__ssputs_r+0x5e>
 8003554:	002a      	movs	r2, r5
 8003556:	0038      	movs	r0, r7
 8003558:	f000 fb8c 	bl	8003c74 <_realloc_r>
 800355c:	1e06      	subs	r6, r0, #0
 800355e:	d1e0      	bne.n	8003522 <__ssputs_r+0x76>
 8003560:	0038      	movs	r0, r7
 8003562:	6921      	ldr	r1, [r4, #16]
 8003564:	f000 faa4 	bl	8003ab0 <_free_r>
 8003568:	e7c7      	b.n	80034fa <__ssputs_r+0x4e>
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	fffffb7f 	.word	0xfffffb7f

08003570 <_svfiprintf_r>:
 8003570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003572:	b0a1      	sub	sp, #132	; 0x84
 8003574:	9003      	str	r0, [sp, #12]
 8003576:	001d      	movs	r5, r3
 8003578:	898b      	ldrh	r3, [r1, #12]
 800357a:	000f      	movs	r7, r1
 800357c:	0016      	movs	r6, r2
 800357e:	061b      	lsls	r3, r3, #24
 8003580:	d511      	bpl.n	80035a6 <_svfiprintf_r+0x36>
 8003582:	690b      	ldr	r3, [r1, #16]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10e      	bne.n	80035a6 <_svfiprintf_r+0x36>
 8003588:	2140      	movs	r1, #64	; 0x40
 800358a:	f000 fafd 	bl	8003b88 <_malloc_r>
 800358e:	6038      	str	r0, [r7, #0]
 8003590:	6138      	str	r0, [r7, #16]
 8003592:	2800      	cmp	r0, #0
 8003594:	d105      	bne.n	80035a2 <_svfiprintf_r+0x32>
 8003596:	230c      	movs	r3, #12
 8003598:	9a03      	ldr	r2, [sp, #12]
 800359a:	3801      	subs	r0, #1
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	b021      	add	sp, #132	; 0x84
 80035a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035a2:	2340      	movs	r3, #64	; 0x40
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	2300      	movs	r3, #0
 80035a8:	ac08      	add	r4, sp, #32
 80035aa:	6163      	str	r3, [r4, #20]
 80035ac:	3320      	adds	r3, #32
 80035ae:	7663      	strb	r3, [r4, #25]
 80035b0:	3310      	adds	r3, #16
 80035b2:	76a3      	strb	r3, [r4, #26]
 80035b4:	9507      	str	r5, [sp, #28]
 80035b6:	0035      	movs	r5, r6
 80035b8:	782b      	ldrb	r3, [r5, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <_svfiprintf_r+0x52>
 80035be:	2b25      	cmp	r3, #37	; 0x25
 80035c0:	d147      	bne.n	8003652 <_svfiprintf_r+0xe2>
 80035c2:	1bab      	subs	r3, r5, r6
 80035c4:	9305      	str	r3, [sp, #20]
 80035c6:	42b5      	cmp	r5, r6
 80035c8:	d00c      	beq.n	80035e4 <_svfiprintf_r+0x74>
 80035ca:	0032      	movs	r2, r6
 80035cc:	0039      	movs	r1, r7
 80035ce:	9803      	ldr	r0, [sp, #12]
 80035d0:	f7ff ff6c 	bl	80034ac <__ssputs_r>
 80035d4:	1c43      	adds	r3, r0, #1
 80035d6:	d100      	bne.n	80035da <_svfiprintf_r+0x6a>
 80035d8:	e0ae      	b.n	8003738 <_svfiprintf_r+0x1c8>
 80035da:	6962      	ldr	r2, [r4, #20]
 80035dc:	9b05      	ldr	r3, [sp, #20]
 80035de:	4694      	mov	ip, r2
 80035e0:	4463      	add	r3, ip
 80035e2:	6163      	str	r3, [r4, #20]
 80035e4:	782b      	ldrb	r3, [r5, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d100      	bne.n	80035ec <_svfiprintf_r+0x7c>
 80035ea:	e0a5      	b.n	8003738 <_svfiprintf_r+0x1c8>
 80035ec:	2201      	movs	r2, #1
 80035ee:	2300      	movs	r3, #0
 80035f0:	4252      	negs	r2, r2
 80035f2:	6062      	str	r2, [r4, #4]
 80035f4:	a904      	add	r1, sp, #16
 80035f6:	3254      	adds	r2, #84	; 0x54
 80035f8:	1852      	adds	r2, r2, r1
 80035fa:	1c6e      	adds	r6, r5, #1
 80035fc:	6023      	str	r3, [r4, #0]
 80035fe:	60e3      	str	r3, [r4, #12]
 8003600:	60a3      	str	r3, [r4, #8]
 8003602:	7013      	strb	r3, [r2, #0]
 8003604:	65a3      	str	r3, [r4, #88]	; 0x58
 8003606:	2205      	movs	r2, #5
 8003608:	7831      	ldrb	r1, [r6, #0]
 800360a:	4854      	ldr	r0, [pc, #336]	; (800375c <_svfiprintf_r+0x1ec>)
 800360c:	f000 fa32 	bl	8003a74 <memchr>
 8003610:	1c75      	adds	r5, r6, #1
 8003612:	2800      	cmp	r0, #0
 8003614:	d11f      	bne.n	8003656 <_svfiprintf_r+0xe6>
 8003616:	6822      	ldr	r2, [r4, #0]
 8003618:	06d3      	lsls	r3, r2, #27
 800361a:	d504      	bpl.n	8003626 <_svfiprintf_r+0xb6>
 800361c:	2353      	movs	r3, #83	; 0x53
 800361e:	a904      	add	r1, sp, #16
 8003620:	185b      	adds	r3, r3, r1
 8003622:	2120      	movs	r1, #32
 8003624:	7019      	strb	r1, [r3, #0]
 8003626:	0713      	lsls	r3, r2, #28
 8003628:	d504      	bpl.n	8003634 <_svfiprintf_r+0xc4>
 800362a:	2353      	movs	r3, #83	; 0x53
 800362c:	a904      	add	r1, sp, #16
 800362e:	185b      	adds	r3, r3, r1
 8003630:	212b      	movs	r1, #43	; 0x2b
 8003632:	7019      	strb	r1, [r3, #0]
 8003634:	7833      	ldrb	r3, [r6, #0]
 8003636:	2b2a      	cmp	r3, #42	; 0x2a
 8003638:	d016      	beq.n	8003668 <_svfiprintf_r+0xf8>
 800363a:	0035      	movs	r5, r6
 800363c:	2100      	movs	r1, #0
 800363e:	200a      	movs	r0, #10
 8003640:	68e3      	ldr	r3, [r4, #12]
 8003642:	782a      	ldrb	r2, [r5, #0]
 8003644:	1c6e      	adds	r6, r5, #1
 8003646:	3a30      	subs	r2, #48	; 0x30
 8003648:	2a09      	cmp	r2, #9
 800364a:	d94e      	bls.n	80036ea <_svfiprintf_r+0x17a>
 800364c:	2900      	cmp	r1, #0
 800364e:	d111      	bne.n	8003674 <_svfiprintf_r+0x104>
 8003650:	e017      	b.n	8003682 <_svfiprintf_r+0x112>
 8003652:	3501      	adds	r5, #1
 8003654:	e7b0      	b.n	80035b8 <_svfiprintf_r+0x48>
 8003656:	4b41      	ldr	r3, [pc, #260]	; (800375c <_svfiprintf_r+0x1ec>)
 8003658:	6822      	ldr	r2, [r4, #0]
 800365a:	1ac0      	subs	r0, r0, r3
 800365c:	2301      	movs	r3, #1
 800365e:	4083      	lsls	r3, r0
 8003660:	4313      	orrs	r3, r2
 8003662:	002e      	movs	r6, r5
 8003664:	6023      	str	r3, [r4, #0]
 8003666:	e7ce      	b.n	8003606 <_svfiprintf_r+0x96>
 8003668:	9b07      	ldr	r3, [sp, #28]
 800366a:	1d19      	adds	r1, r3, #4
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	9107      	str	r1, [sp, #28]
 8003670:	2b00      	cmp	r3, #0
 8003672:	db01      	blt.n	8003678 <_svfiprintf_r+0x108>
 8003674:	930b      	str	r3, [sp, #44]	; 0x2c
 8003676:	e004      	b.n	8003682 <_svfiprintf_r+0x112>
 8003678:	425b      	negs	r3, r3
 800367a:	60e3      	str	r3, [r4, #12]
 800367c:	2302      	movs	r3, #2
 800367e:	4313      	orrs	r3, r2
 8003680:	6023      	str	r3, [r4, #0]
 8003682:	782b      	ldrb	r3, [r5, #0]
 8003684:	2b2e      	cmp	r3, #46	; 0x2e
 8003686:	d10a      	bne.n	800369e <_svfiprintf_r+0x12e>
 8003688:	786b      	ldrb	r3, [r5, #1]
 800368a:	2b2a      	cmp	r3, #42	; 0x2a
 800368c:	d135      	bne.n	80036fa <_svfiprintf_r+0x18a>
 800368e:	9b07      	ldr	r3, [sp, #28]
 8003690:	3502      	adds	r5, #2
 8003692:	1d1a      	adds	r2, r3, #4
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	9207      	str	r2, [sp, #28]
 8003698:	2b00      	cmp	r3, #0
 800369a:	db2b      	blt.n	80036f4 <_svfiprintf_r+0x184>
 800369c:	9309      	str	r3, [sp, #36]	; 0x24
 800369e:	4e30      	ldr	r6, [pc, #192]	; (8003760 <_svfiprintf_r+0x1f0>)
 80036a0:	2203      	movs	r2, #3
 80036a2:	0030      	movs	r0, r6
 80036a4:	7829      	ldrb	r1, [r5, #0]
 80036a6:	f000 f9e5 	bl	8003a74 <memchr>
 80036aa:	2800      	cmp	r0, #0
 80036ac:	d006      	beq.n	80036bc <_svfiprintf_r+0x14c>
 80036ae:	2340      	movs	r3, #64	; 0x40
 80036b0:	1b80      	subs	r0, r0, r6
 80036b2:	4083      	lsls	r3, r0
 80036b4:	6822      	ldr	r2, [r4, #0]
 80036b6:	3501      	adds	r5, #1
 80036b8:	4313      	orrs	r3, r2
 80036ba:	6023      	str	r3, [r4, #0]
 80036bc:	7829      	ldrb	r1, [r5, #0]
 80036be:	2206      	movs	r2, #6
 80036c0:	4828      	ldr	r0, [pc, #160]	; (8003764 <_svfiprintf_r+0x1f4>)
 80036c2:	1c6e      	adds	r6, r5, #1
 80036c4:	7621      	strb	r1, [r4, #24]
 80036c6:	f000 f9d5 	bl	8003a74 <memchr>
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d03c      	beq.n	8003748 <_svfiprintf_r+0x1d8>
 80036ce:	4b26      	ldr	r3, [pc, #152]	; (8003768 <_svfiprintf_r+0x1f8>)
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d125      	bne.n	8003720 <_svfiprintf_r+0x1b0>
 80036d4:	2207      	movs	r2, #7
 80036d6:	9b07      	ldr	r3, [sp, #28]
 80036d8:	3307      	adds	r3, #7
 80036da:	4393      	bics	r3, r2
 80036dc:	3308      	adds	r3, #8
 80036de:	9307      	str	r3, [sp, #28]
 80036e0:	6963      	ldr	r3, [r4, #20]
 80036e2:	9a04      	ldr	r2, [sp, #16]
 80036e4:	189b      	adds	r3, r3, r2
 80036e6:	6163      	str	r3, [r4, #20]
 80036e8:	e765      	b.n	80035b6 <_svfiprintf_r+0x46>
 80036ea:	4343      	muls	r3, r0
 80036ec:	0035      	movs	r5, r6
 80036ee:	2101      	movs	r1, #1
 80036f0:	189b      	adds	r3, r3, r2
 80036f2:	e7a6      	b.n	8003642 <_svfiprintf_r+0xd2>
 80036f4:	2301      	movs	r3, #1
 80036f6:	425b      	negs	r3, r3
 80036f8:	e7d0      	b.n	800369c <_svfiprintf_r+0x12c>
 80036fa:	2300      	movs	r3, #0
 80036fc:	200a      	movs	r0, #10
 80036fe:	001a      	movs	r2, r3
 8003700:	3501      	adds	r5, #1
 8003702:	6063      	str	r3, [r4, #4]
 8003704:	7829      	ldrb	r1, [r5, #0]
 8003706:	1c6e      	adds	r6, r5, #1
 8003708:	3930      	subs	r1, #48	; 0x30
 800370a:	2909      	cmp	r1, #9
 800370c:	d903      	bls.n	8003716 <_svfiprintf_r+0x1a6>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0c5      	beq.n	800369e <_svfiprintf_r+0x12e>
 8003712:	9209      	str	r2, [sp, #36]	; 0x24
 8003714:	e7c3      	b.n	800369e <_svfiprintf_r+0x12e>
 8003716:	4342      	muls	r2, r0
 8003718:	0035      	movs	r5, r6
 800371a:	2301      	movs	r3, #1
 800371c:	1852      	adds	r2, r2, r1
 800371e:	e7f1      	b.n	8003704 <_svfiprintf_r+0x194>
 8003720:	ab07      	add	r3, sp, #28
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	003a      	movs	r2, r7
 8003726:	0021      	movs	r1, r4
 8003728:	4b10      	ldr	r3, [pc, #64]	; (800376c <_svfiprintf_r+0x1fc>)
 800372a:	9803      	ldr	r0, [sp, #12]
 800372c:	e000      	b.n	8003730 <_svfiprintf_r+0x1c0>
 800372e:	bf00      	nop
 8003730:	9004      	str	r0, [sp, #16]
 8003732:	9b04      	ldr	r3, [sp, #16]
 8003734:	3301      	adds	r3, #1
 8003736:	d1d3      	bne.n	80036e0 <_svfiprintf_r+0x170>
 8003738:	89bb      	ldrh	r3, [r7, #12]
 800373a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800373c:	065b      	lsls	r3, r3, #25
 800373e:	d400      	bmi.n	8003742 <_svfiprintf_r+0x1d2>
 8003740:	e72d      	b.n	800359e <_svfiprintf_r+0x2e>
 8003742:	2001      	movs	r0, #1
 8003744:	4240      	negs	r0, r0
 8003746:	e72a      	b.n	800359e <_svfiprintf_r+0x2e>
 8003748:	ab07      	add	r3, sp, #28
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	003a      	movs	r2, r7
 800374e:	0021      	movs	r1, r4
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <_svfiprintf_r+0x1fc>)
 8003752:	9803      	ldr	r0, [sp, #12]
 8003754:	f000 f87c 	bl	8003850 <_printf_i>
 8003758:	e7ea      	b.n	8003730 <_svfiprintf_r+0x1c0>
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	08003db0 	.word	0x08003db0
 8003760:	08003db6 	.word	0x08003db6
 8003764:	08003dba 	.word	0x08003dba
 8003768:	00000000 	.word	0x00000000
 800376c:	080034ad 	.word	0x080034ad

08003770 <_printf_common>:
 8003770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003772:	0015      	movs	r5, r2
 8003774:	9301      	str	r3, [sp, #4]
 8003776:	688a      	ldr	r2, [r1, #8]
 8003778:	690b      	ldr	r3, [r1, #16]
 800377a:	000c      	movs	r4, r1
 800377c:	9000      	str	r0, [sp, #0]
 800377e:	4293      	cmp	r3, r2
 8003780:	da00      	bge.n	8003784 <_printf_common+0x14>
 8003782:	0013      	movs	r3, r2
 8003784:	0022      	movs	r2, r4
 8003786:	602b      	str	r3, [r5, #0]
 8003788:	3243      	adds	r2, #67	; 0x43
 800378a:	7812      	ldrb	r2, [r2, #0]
 800378c:	2a00      	cmp	r2, #0
 800378e:	d001      	beq.n	8003794 <_printf_common+0x24>
 8003790:	3301      	adds	r3, #1
 8003792:	602b      	str	r3, [r5, #0]
 8003794:	6823      	ldr	r3, [r4, #0]
 8003796:	069b      	lsls	r3, r3, #26
 8003798:	d502      	bpl.n	80037a0 <_printf_common+0x30>
 800379a:	682b      	ldr	r3, [r5, #0]
 800379c:	3302      	adds	r3, #2
 800379e:	602b      	str	r3, [r5, #0]
 80037a0:	6822      	ldr	r2, [r4, #0]
 80037a2:	2306      	movs	r3, #6
 80037a4:	0017      	movs	r7, r2
 80037a6:	401f      	ands	r7, r3
 80037a8:	421a      	tst	r2, r3
 80037aa:	d027      	beq.n	80037fc <_printf_common+0x8c>
 80037ac:	0023      	movs	r3, r4
 80037ae:	3343      	adds	r3, #67	; 0x43
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	1e5a      	subs	r2, r3, #1
 80037b4:	4193      	sbcs	r3, r2
 80037b6:	6822      	ldr	r2, [r4, #0]
 80037b8:	0692      	lsls	r2, r2, #26
 80037ba:	d430      	bmi.n	800381e <_printf_common+0xae>
 80037bc:	0022      	movs	r2, r4
 80037be:	9901      	ldr	r1, [sp, #4]
 80037c0:	9800      	ldr	r0, [sp, #0]
 80037c2:	9e08      	ldr	r6, [sp, #32]
 80037c4:	3243      	adds	r2, #67	; 0x43
 80037c6:	47b0      	blx	r6
 80037c8:	1c43      	adds	r3, r0, #1
 80037ca:	d025      	beq.n	8003818 <_printf_common+0xa8>
 80037cc:	2306      	movs	r3, #6
 80037ce:	6820      	ldr	r0, [r4, #0]
 80037d0:	682a      	ldr	r2, [r5, #0]
 80037d2:	68e1      	ldr	r1, [r4, #12]
 80037d4:	2500      	movs	r5, #0
 80037d6:	4003      	ands	r3, r0
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d103      	bne.n	80037e4 <_printf_common+0x74>
 80037dc:	1a8d      	subs	r5, r1, r2
 80037de:	43eb      	mvns	r3, r5
 80037e0:	17db      	asrs	r3, r3, #31
 80037e2:	401d      	ands	r5, r3
 80037e4:	68a3      	ldr	r3, [r4, #8]
 80037e6:	6922      	ldr	r2, [r4, #16]
 80037e8:	4293      	cmp	r3, r2
 80037ea:	dd01      	ble.n	80037f0 <_printf_common+0x80>
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	18ed      	adds	r5, r5, r3
 80037f0:	2700      	movs	r7, #0
 80037f2:	42bd      	cmp	r5, r7
 80037f4:	d120      	bne.n	8003838 <_printf_common+0xc8>
 80037f6:	2000      	movs	r0, #0
 80037f8:	e010      	b.n	800381c <_printf_common+0xac>
 80037fa:	3701      	adds	r7, #1
 80037fc:	68e3      	ldr	r3, [r4, #12]
 80037fe:	682a      	ldr	r2, [r5, #0]
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	42bb      	cmp	r3, r7
 8003804:	ddd2      	ble.n	80037ac <_printf_common+0x3c>
 8003806:	0022      	movs	r2, r4
 8003808:	2301      	movs	r3, #1
 800380a:	9901      	ldr	r1, [sp, #4]
 800380c:	9800      	ldr	r0, [sp, #0]
 800380e:	9e08      	ldr	r6, [sp, #32]
 8003810:	3219      	adds	r2, #25
 8003812:	47b0      	blx	r6
 8003814:	1c43      	adds	r3, r0, #1
 8003816:	d1f0      	bne.n	80037fa <_printf_common+0x8a>
 8003818:	2001      	movs	r0, #1
 800381a:	4240      	negs	r0, r0
 800381c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800381e:	2030      	movs	r0, #48	; 0x30
 8003820:	18e1      	adds	r1, r4, r3
 8003822:	3143      	adds	r1, #67	; 0x43
 8003824:	7008      	strb	r0, [r1, #0]
 8003826:	0021      	movs	r1, r4
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	3145      	adds	r1, #69	; 0x45
 800382c:	7809      	ldrb	r1, [r1, #0]
 800382e:	18a2      	adds	r2, r4, r2
 8003830:	3243      	adds	r2, #67	; 0x43
 8003832:	3302      	adds	r3, #2
 8003834:	7011      	strb	r1, [r2, #0]
 8003836:	e7c1      	b.n	80037bc <_printf_common+0x4c>
 8003838:	0022      	movs	r2, r4
 800383a:	2301      	movs	r3, #1
 800383c:	9901      	ldr	r1, [sp, #4]
 800383e:	9800      	ldr	r0, [sp, #0]
 8003840:	9e08      	ldr	r6, [sp, #32]
 8003842:	321a      	adds	r2, #26
 8003844:	47b0      	blx	r6
 8003846:	1c43      	adds	r3, r0, #1
 8003848:	d0e6      	beq.n	8003818 <_printf_common+0xa8>
 800384a:	3701      	adds	r7, #1
 800384c:	e7d1      	b.n	80037f2 <_printf_common+0x82>
	...

08003850 <_printf_i>:
 8003850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003852:	b08b      	sub	sp, #44	; 0x2c
 8003854:	9206      	str	r2, [sp, #24]
 8003856:	000a      	movs	r2, r1
 8003858:	3243      	adds	r2, #67	; 0x43
 800385a:	9307      	str	r3, [sp, #28]
 800385c:	9005      	str	r0, [sp, #20]
 800385e:	9204      	str	r2, [sp, #16]
 8003860:	7e0a      	ldrb	r2, [r1, #24]
 8003862:	000c      	movs	r4, r1
 8003864:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003866:	2a78      	cmp	r2, #120	; 0x78
 8003868:	d807      	bhi.n	800387a <_printf_i+0x2a>
 800386a:	2a62      	cmp	r2, #98	; 0x62
 800386c:	d809      	bhi.n	8003882 <_printf_i+0x32>
 800386e:	2a00      	cmp	r2, #0
 8003870:	d100      	bne.n	8003874 <_printf_i+0x24>
 8003872:	e0c1      	b.n	80039f8 <_printf_i+0x1a8>
 8003874:	2a58      	cmp	r2, #88	; 0x58
 8003876:	d100      	bne.n	800387a <_printf_i+0x2a>
 8003878:	e08c      	b.n	8003994 <_printf_i+0x144>
 800387a:	0026      	movs	r6, r4
 800387c:	3642      	adds	r6, #66	; 0x42
 800387e:	7032      	strb	r2, [r6, #0]
 8003880:	e022      	b.n	80038c8 <_printf_i+0x78>
 8003882:	0010      	movs	r0, r2
 8003884:	3863      	subs	r0, #99	; 0x63
 8003886:	2815      	cmp	r0, #21
 8003888:	d8f7      	bhi.n	800387a <_printf_i+0x2a>
 800388a:	f7fc fc45 	bl	8000118 <__gnu_thumb1_case_shi>
 800388e:	0016      	.short	0x0016
 8003890:	fff6001f 	.word	0xfff6001f
 8003894:	fff6fff6 	.word	0xfff6fff6
 8003898:	001ffff6 	.word	0x001ffff6
 800389c:	fff6fff6 	.word	0xfff6fff6
 80038a0:	fff6fff6 	.word	0xfff6fff6
 80038a4:	003600a8 	.word	0x003600a8
 80038a8:	fff6009a 	.word	0xfff6009a
 80038ac:	00b9fff6 	.word	0x00b9fff6
 80038b0:	0036fff6 	.word	0x0036fff6
 80038b4:	fff6fff6 	.word	0xfff6fff6
 80038b8:	009e      	.short	0x009e
 80038ba:	0026      	movs	r6, r4
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	3642      	adds	r6, #66	; 0x42
 80038c0:	1d11      	adds	r1, r2, #4
 80038c2:	6019      	str	r1, [r3, #0]
 80038c4:	6813      	ldr	r3, [r2, #0]
 80038c6:	7033      	strb	r3, [r6, #0]
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0a7      	b.n	8003a1c <_printf_i+0x1cc>
 80038cc:	6808      	ldr	r0, [r1, #0]
 80038ce:	6819      	ldr	r1, [r3, #0]
 80038d0:	1d0a      	adds	r2, r1, #4
 80038d2:	0605      	lsls	r5, r0, #24
 80038d4:	d50b      	bpl.n	80038ee <_printf_i+0x9e>
 80038d6:	680d      	ldr	r5, [r1, #0]
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	2d00      	cmp	r5, #0
 80038dc:	da03      	bge.n	80038e6 <_printf_i+0x96>
 80038de:	232d      	movs	r3, #45	; 0x2d
 80038e0:	9a04      	ldr	r2, [sp, #16]
 80038e2:	426d      	negs	r5, r5
 80038e4:	7013      	strb	r3, [r2, #0]
 80038e6:	4b61      	ldr	r3, [pc, #388]	; (8003a6c <_printf_i+0x21c>)
 80038e8:	270a      	movs	r7, #10
 80038ea:	9303      	str	r3, [sp, #12]
 80038ec:	e01b      	b.n	8003926 <_printf_i+0xd6>
 80038ee:	680d      	ldr	r5, [r1, #0]
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	0641      	lsls	r1, r0, #25
 80038f4:	d5f1      	bpl.n	80038da <_printf_i+0x8a>
 80038f6:	b22d      	sxth	r5, r5
 80038f8:	e7ef      	b.n	80038da <_printf_i+0x8a>
 80038fa:	680d      	ldr	r5, [r1, #0]
 80038fc:	6819      	ldr	r1, [r3, #0]
 80038fe:	1d08      	adds	r0, r1, #4
 8003900:	6018      	str	r0, [r3, #0]
 8003902:	062e      	lsls	r6, r5, #24
 8003904:	d501      	bpl.n	800390a <_printf_i+0xba>
 8003906:	680d      	ldr	r5, [r1, #0]
 8003908:	e003      	b.n	8003912 <_printf_i+0xc2>
 800390a:	066d      	lsls	r5, r5, #25
 800390c:	d5fb      	bpl.n	8003906 <_printf_i+0xb6>
 800390e:	680d      	ldr	r5, [r1, #0]
 8003910:	b2ad      	uxth	r5, r5
 8003912:	4b56      	ldr	r3, [pc, #344]	; (8003a6c <_printf_i+0x21c>)
 8003914:	2708      	movs	r7, #8
 8003916:	9303      	str	r3, [sp, #12]
 8003918:	2a6f      	cmp	r2, #111	; 0x6f
 800391a:	d000      	beq.n	800391e <_printf_i+0xce>
 800391c:	3702      	adds	r7, #2
 800391e:	0023      	movs	r3, r4
 8003920:	2200      	movs	r2, #0
 8003922:	3343      	adds	r3, #67	; 0x43
 8003924:	701a      	strb	r2, [r3, #0]
 8003926:	6863      	ldr	r3, [r4, #4]
 8003928:	60a3      	str	r3, [r4, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	db03      	blt.n	8003936 <_printf_i+0xe6>
 800392e:	2204      	movs	r2, #4
 8003930:	6821      	ldr	r1, [r4, #0]
 8003932:	4391      	bics	r1, r2
 8003934:	6021      	str	r1, [r4, #0]
 8003936:	2d00      	cmp	r5, #0
 8003938:	d102      	bne.n	8003940 <_printf_i+0xf0>
 800393a:	9e04      	ldr	r6, [sp, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00c      	beq.n	800395a <_printf_i+0x10a>
 8003940:	9e04      	ldr	r6, [sp, #16]
 8003942:	0028      	movs	r0, r5
 8003944:	0039      	movs	r1, r7
 8003946:	f7fc fc77 	bl	8000238 <__aeabi_uidivmod>
 800394a:	9b03      	ldr	r3, [sp, #12]
 800394c:	3e01      	subs	r6, #1
 800394e:	5c5b      	ldrb	r3, [r3, r1]
 8003950:	7033      	strb	r3, [r6, #0]
 8003952:	002b      	movs	r3, r5
 8003954:	0005      	movs	r5, r0
 8003956:	429f      	cmp	r7, r3
 8003958:	d9f3      	bls.n	8003942 <_printf_i+0xf2>
 800395a:	2f08      	cmp	r7, #8
 800395c:	d109      	bne.n	8003972 <_printf_i+0x122>
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	07db      	lsls	r3, r3, #31
 8003962:	d506      	bpl.n	8003972 <_printf_i+0x122>
 8003964:	6863      	ldr	r3, [r4, #4]
 8003966:	6922      	ldr	r2, [r4, #16]
 8003968:	4293      	cmp	r3, r2
 800396a:	dc02      	bgt.n	8003972 <_printf_i+0x122>
 800396c:	2330      	movs	r3, #48	; 0x30
 800396e:	3e01      	subs	r6, #1
 8003970:	7033      	strb	r3, [r6, #0]
 8003972:	9b04      	ldr	r3, [sp, #16]
 8003974:	1b9b      	subs	r3, r3, r6
 8003976:	6123      	str	r3, [r4, #16]
 8003978:	9b07      	ldr	r3, [sp, #28]
 800397a:	0021      	movs	r1, r4
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	9805      	ldr	r0, [sp, #20]
 8003980:	9b06      	ldr	r3, [sp, #24]
 8003982:	aa09      	add	r2, sp, #36	; 0x24
 8003984:	f7ff fef4 	bl	8003770 <_printf_common>
 8003988:	1c43      	adds	r3, r0, #1
 800398a:	d14c      	bne.n	8003a26 <_printf_i+0x1d6>
 800398c:	2001      	movs	r0, #1
 800398e:	4240      	negs	r0, r0
 8003990:	b00b      	add	sp, #44	; 0x2c
 8003992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003994:	3145      	adds	r1, #69	; 0x45
 8003996:	700a      	strb	r2, [r1, #0]
 8003998:	4a34      	ldr	r2, [pc, #208]	; (8003a6c <_printf_i+0x21c>)
 800399a:	9203      	str	r2, [sp, #12]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	6821      	ldr	r1, [r4, #0]
 80039a0:	ca20      	ldmia	r2!, {r5}
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	0608      	lsls	r0, r1, #24
 80039a6:	d516      	bpl.n	80039d6 <_printf_i+0x186>
 80039a8:	07cb      	lsls	r3, r1, #31
 80039aa:	d502      	bpl.n	80039b2 <_printf_i+0x162>
 80039ac:	2320      	movs	r3, #32
 80039ae:	4319      	orrs	r1, r3
 80039b0:	6021      	str	r1, [r4, #0]
 80039b2:	2710      	movs	r7, #16
 80039b4:	2d00      	cmp	r5, #0
 80039b6:	d1b2      	bne.n	800391e <_printf_i+0xce>
 80039b8:	2320      	movs	r3, #32
 80039ba:	6822      	ldr	r2, [r4, #0]
 80039bc:	439a      	bics	r2, r3
 80039be:	6022      	str	r2, [r4, #0]
 80039c0:	e7ad      	b.n	800391e <_printf_i+0xce>
 80039c2:	2220      	movs	r2, #32
 80039c4:	6809      	ldr	r1, [r1, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	6022      	str	r2, [r4, #0]
 80039ca:	0022      	movs	r2, r4
 80039cc:	2178      	movs	r1, #120	; 0x78
 80039ce:	3245      	adds	r2, #69	; 0x45
 80039d0:	7011      	strb	r1, [r2, #0]
 80039d2:	4a27      	ldr	r2, [pc, #156]	; (8003a70 <_printf_i+0x220>)
 80039d4:	e7e1      	b.n	800399a <_printf_i+0x14a>
 80039d6:	0648      	lsls	r0, r1, #25
 80039d8:	d5e6      	bpl.n	80039a8 <_printf_i+0x158>
 80039da:	b2ad      	uxth	r5, r5
 80039dc:	e7e4      	b.n	80039a8 <_printf_i+0x158>
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	680d      	ldr	r5, [r1, #0]
 80039e2:	1d10      	adds	r0, r2, #4
 80039e4:	6949      	ldr	r1, [r1, #20]
 80039e6:	6018      	str	r0, [r3, #0]
 80039e8:	6813      	ldr	r3, [r2, #0]
 80039ea:	062e      	lsls	r6, r5, #24
 80039ec:	d501      	bpl.n	80039f2 <_printf_i+0x1a2>
 80039ee:	6019      	str	r1, [r3, #0]
 80039f0:	e002      	b.n	80039f8 <_printf_i+0x1a8>
 80039f2:	066d      	lsls	r5, r5, #25
 80039f4:	d5fb      	bpl.n	80039ee <_printf_i+0x19e>
 80039f6:	8019      	strh	r1, [r3, #0]
 80039f8:	2300      	movs	r3, #0
 80039fa:	9e04      	ldr	r6, [sp, #16]
 80039fc:	6123      	str	r3, [r4, #16]
 80039fe:	e7bb      	b.n	8003978 <_printf_i+0x128>
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	1d11      	adds	r1, r2, #4
 8003a04:	6019      	str	r1, [r3, #0]
 8003a06:	6816      	ldr	r6, [r2, #0]
 8003a08:	2100      	movs	r1, #0
 8003a0a:	0030      	movs	r0, r6
 8003a0c:	6862      	ldr	r2, [r4, #4]
 8003a0e:	f000 f831 	bl	8003a74 <memchr>
 8003a12:	2800      	cmp	r0, #0
 8003a14:	d001      	beq.n	8003a1a <_printf_i+0x1ca>
 8003a16:	1b80      	subs	r0, r0, r6
 8003a18:	6060      	str	r0, [r4, #4]
 8003a1a:	6863      	ldr	r3, [r4, #4]
 8003a1c:	6123      	str	r3, [r4, #16]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	9a04      	ldr	r2, [sp, #16]
 8003a22:	7013      	strb	r3, [r2, #0]
 8003a24:	e7a8      	b.n	8003978 <_printf_i+0x128>
 8003a26:	6923      	ldr	r3, [r4, #16]
 8003a28:	0032      	movs	r2, r6
 8003a2a:	9906      	ldr	r1, [sp, #24]
 8003a2c:	9805      	ldr	r0, [sp, #20]
 8003a2e:	9d07      	ldr	r5, [sp, #28]
 8003a30:	47a8      	blx	r5
 8003a32:	1c43      	adds	r3, r0, #1
 8003a34:	d0aa      	beq.n	800398c <_printf_i+0x13c>
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	079b      	lsls	r3, r3, #30
 8003a3a:	d415      	bmi.n	8003a68 <_printf_i+0x218>
 8003a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a3e:	68e0      	ldr	r0, [r4, #12]
 8003a40:	4298      	cmp	r0, r3
 8003a42:	daa5      	bge.n	8003990 <_printf_i+0x140>
 8003a44:	0018      	movs	r0, r3
 8003a46:	e7a3      	b.n	8003990 <_printf_i+0x140>
 8003a48:	0022      	movs	r2, r4
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	9906      	ldr	r1, [sp, #24]
 8003a4e:	9805      	ldr	r0, [sp, #20]
 8003a50:	9e07      	ldr	r6, [sp, #28]
 8003a52:	3219      	adds	r2, #25
 8003a54:	47b0      	blx	r6
 8003a56:	1c43      	adds	r3, r0, #1
 8003a58:	d098      	beq.n	800398c <_printf_i+0x13c>
 8003a5a:	3501      	adds	r5, #1
 8003a5c:	68e3      	ldr	r3, [r4, #12]
 8003a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	42ab      	cmp	r3, r5
 8003a64:	dcf0      	bgt.n	8003a48 <_printf_i+0x1f8>
 8003a66:	e7e9      	b.n	8003a3c <_printf_i+0x1ec>
 8003a68:	2500      	movs	r5, #0
 8003a6a:	e7f7      	b.n	8003a5c <_printf_i+0x20c>
 8003a6c:	08003dc1 	.word	0x08003dc1
 8003a70:	08003dd2 	.word	0x08003dd2

08003a74 <memchr>:
 8003a74:	b2c9      	uxtb	r1, r1
 8003a76:	1882      	adds	r2, r0, r2
 8003a78:	4290      	cmp	r0, r2
 8003a7a:	d101      	bne.n	8003a80 <memchr+0xc>
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	4770      	bx	lr
 8003a80:	7803      	ldrb	r3, [r0, #0]
 8003a82:	428b      	cmp	r3, r1
 8003a84:	d0fb      	beq.n	8003a7e <memchr+0xa>
 8003a86:	3001      	adds	r0, #1
 8003a88:	e7f6      	b.n	8003a78 <memchr+0x4>

08003a8a <memmove>:
 8003a8a:	b510      	push	{r4, lr}
 8003a8c:	4288      	cmp	r0, r1
 8003a8e:	d902      	bls.n	8003a96 <memmove+0xc>
 8003a90:	188b      	adds	r3, r1, r2
 8003a92:	4298      	cmp	r0, r3
 8003a94:	d303      	bcc.n	8003a9e <memmove+0x14>
 8003a96:	2300      	movs	r3, #0
 8003a98:	e007      	b.n	8003aaa <memmove+0x20>
 8003a9a:	5c8b      	ldrb	r3, [r1, r2]
 8003a9c:	5483      	strb	r3, [r0, r2]
 8003a9e:	3a01      	subs	r2, #1
 8003aa0:	d2fb      	bcs.n	8003a9a <memmove+0x10>
 8003aa2:	bd10      	pop	{r4, pc}
 8003aa4:	5ccc      	ldrb	r4, [r1, r3]
 8003aa6:	54c4      	strb	r4, [r0, r3]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d1fa      	bne.n	8003aa4 <memmove+0x1a>
 8003aae:	e7f8      	b.n	8003aa2 <memmove+0x18>

08003ab0 <_free_r>:
 8003ab0:	b570      	push	{r4, r5, r6, lr}
 8003ab2:	0005      	movs	r5, r0
 8003ab4:	2900      	cmp	r1, #0
 8003ab6:	d010      	beq.n	8003ada <_free_r+0x2a>
 8003ab8:	1f0c      	subs	r4, r1, #4
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	da00      	bge.n	8003ac2 <_free_r+0x12>
 8003ac0:	18e4      	adds	r4, r4, r3
 8003ac2:	0028      	movs	r0, r5
 8003ac4:	f000 f918 	bl	8003cf8 <__malloc_lock>
 8003ac8:	4a1d      	ldr	r2, [pc, #116]	; (8003b40 <_free_r+0x90>)
 8003aca:	6813      	ldr	r3, [r2, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <_free_r+0x2c>
 8003ad0:	6063      	str	r3, [r4, #4]
 8003ad2:	6014      	str	r4, [r2, #0]
 8003ad4:	0028      	movs	r0, r5
 8003ad6:	f000 f917 	bl	8003d08 <__malloc_unlock>
 8003ada:	bd70      	pop	{r4, r5, r6, pc}
 8003adc:	42a3      	cmp	r3, r4
 8003ade:	d908      	bls.n	8003af2 <_free_r+0x42>
 8003ae0:	6821      	ldr	r1, [r4, #0]
 8003ae2:	1860      	adds	r0, r4, r1
 8003ae4:	4283      	cmp	r3, r0
 8003ae6:	d1f3      	bne.n	8003ad0 <_free_r+0x20>
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	1841      	adds	r1, r0, r1
 8003aee:	6021      	str	r1, [r4, #0]
 8003af0:	e7ee      	b.n	8003ad0 <_free_r+0x20>
 8003af2:	001a      	movs	r2, r3
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <_free_r+0x4e>
 8003afa:	42a3      	cmp	r3, r4
 8003afc:	d9f9      	bls.n	8003af2 <_free_r+0x42>
 8003afe:	6811      	ldr	r1, [r2, #0]
 8003b00:	1850      	adds	r0, r2, r1
 8003b02:	42a0      	cmp	r0, r4
 8003b04:	d10b      	bne.n	8003b1e <_free_r+0x6e>
 8003b06:	6820      	ldr	r0, [r4, #0]
 8003b08:	1809      	adds	r1, r1, r0
 8003b0a:	1850      	adds	r0, r2, r1
 8003b0c:	6011      	str	r1, [r2, #0]
 8003b0e:	4283      	cmp	r3, r0
 8003b10:	d1e0      	bne.n	8003ad4 <_free_r+0x24>
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	1841      	adds	r1, r0, r1
 8003b18:	6011      	str	r1, [r2, #0]
 8003b1a:	6053      	str	r3, [r2, #4]
 8003b1c:	e7da      	b.n	8003ad4 <_free_r+0x24>
 8003b1e:	42a0      	cmp	r0, r4
 8003b20:	d902      	bls.n	8003b28 <_free_r+0x78>
 8003b22:	230c      	movs	r3, #12
 8003b24:	602b      	str	r3, [r5, #0]
 8003b26:	e7d5      	b.n	8003ad4 <_free_r+0x24>
 8003b28:	6821      	ldr	r1, [r4, #0]
 8003b2a:	1860      	adds	r0, r4, r1
 8003b2c:	4283      	cmp	r3, r0
 8003b2e:	d103      	bne.n	8003b38 <_free_r+0x88>
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	1841      	adds	r1, r0, r1
 8003b36:	6021      	str	r1, [r4, #0]
 8003b38:	6063      	str	r3, [r4, #4]
 8003b3a:	6054      	str	r4, [r2, #4]
 8003b3c:	e7ca      	b.n	8003ad4 <_free_r+0x24>
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	20000184 	.word	0x20000184

08003b44 <sbrk_aligned>:
 8003b44:	b570      	push	{r4, r5, r6, lr}
 8003b46:	4e0f      	ldr	r6, [pc, #60]	; (8003b84 <sbrk_aligned+0x40>)
 8003b48:	000d      	movs	r5, r1
 8003b4a:	6831      	ldr	r1, [r6, #0]
 8003b4c:	0004      	movs	r4, r0
 8003b4e:	2900      	cmp	r1, #0
 8003b50:	d102      	bne.n	8003b58 <sbrk_aligned+0x14>
 8003b52:	f000 f8bf 	bl	8003cd4 <_sbrk_r>
 8003b56:	6030      	str	r0, [r6, #0]
 8003b58:	0029      	movs	r1, r5
 8003b5a:	0020      	movs	r0, r4
 8003b5c:	f000 f8ba 	bl	8003cd4 <_sbrk_r>
 8003b60:	1c43      	adds	r3, r0, #1
 8003b62:	d00a      	beq.n	8003b7a <sbrk_aligned+0x36>
 8003b64:	2303      	movs	r3, #3
 8003b66:	1cc5      	adds	r5, r0, #3
 8003b68:	439d      	bics	r5, r3
 8003b6a:	42a8      	cmp	r0, r5
 8003b6c:	d007      	beq.n	8003b7e <sbrk_aligned+0x3a>
 8003b6e:	1a29      	subs	r1, r5, r0
 8003b70:	0020      	movs	r0, r4
 8003b72:	f000 f8af 	bl	8003cd4 <_sbrk_r>
 8003b76:	1c43      	adds	r3, r0, #1
 8003b78:	d101      	bne.n	8003b7e <sbrk_aligned+0x3a>
 8003b7a:	2501      	movs	r5, #1
 8003b7c:	426d      	negs	r5, r5
 8003b7e:	0028      	movs	r0, r5
 8003b80:	bd70      	pop	{r4, r5, r6, pc}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	20000188 	.word	0x20000188

08003b88 <_malloc_r>:
 8003b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	1ccb      	adds	r3, r1, #3
 8003b8e:	4393      	bics	r3, r2
 8003b90:	3308      	adds	r3, #8
 8003b92:	0006      	movs	r6, r0
 8003b94:	001f      	movs	r7, r3
 8003b96:	2b0c      	cmp	r3, #12
 8003b98:	d232      	bcs.n	8003c00 <_malloc_r+0x78>
 8003b9a:	270c      	movs	r7, #12
 8003b9c:	42b9      	cmp	r1, r7
 8003b9e:	d831      	bhi.n	8003c04 <_malloc_r+0x7c>
 8003ba0:	0030      	movs	r0, r6
 8003ba2:	f000 f8a9 	bl	8003cf8 <__malloc_lock>
 8003ba6:	4d32      	ldr	r5, [pc, #200]	; (8003c70 <_malloc_r+0xe8>)
 8003ba8:	682b      	ldr	r3, [r5, #0]
 8003baa:	001c      	movs	r4, r3
 8003bac:	2c00      	cmp	r4, #0
 8003bae:	d12e      	bne.n	8003c0e <_malloc_r+0x86>
 8003bb0:	0039      	movs	r1, r7
 8003bb2:	0030      	movs	r0, r6
 8003bb4:	f7ff ffc6 	bl	8003b44 <sbrk_aligned>
 8003bb8:	0004      	movs	r4, r0
 8003bba:	1c43      	adds	r3, r0, #1
 8003bbc:	d11e      	bne.n	8003bfc <_malloc_r+0x74>
 8003bbe:	682c      	ldr	r4, [r5, #0]
 8003bc0:	0025      	movs	r5, r4
 8003bc2:	2d00      	cmp	r5, #0
 8003bc4:	d14a      	bne.n	8003c5c <_malloc_r+0xd4>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	0029      	movs	r1, r5
 8003bca:	18e3      	adds	r3, r4, r3
 8003bcc:	0030      	movs	r0, r6
 8003bce:	9301      	str	r3, [sp, #4]
 8003bd0:	f000 f880 	bl	8003cd4 <_sbrk_r>
 8003bd4:	9b01      	ldr	r3, [sp, #4]
 8003bd6:	4283      	cmp	r3, r0
 8003bd8:	d143      	bne.n	8003c62 <_malloc_r+0xda>
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	3703      	adds	r7, #3
 8003bde:	1aff      	subs	r7, r7, r3
 8003be0:	2303      	movs	r3, #3
 8003be2:	439f      	bics	r7, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	2f0c      	cmp	r7, #12
 8003be8:	d200      	bcs.n	8003bec <_malloc_r+0x64>
 8003bea:	270c      	movs	r7, #12
 8003bec:	0039      	movs	r1, r7
 8003bee:	0030      	movs	r0, r6
 8003bf0:	f7ff ffa8 	bl	8003b44 <sbrk_aligned>
 8003bf4:	1c43      	adds	r3, r0, #1
 8003bf6:	d034      	beq.n	8003c62 <_malloc_r+0xda>
 8003bf8:	6823      	ldr	r3, [r4, #0]
 8003bfa:	19df      	adds	r7, r3, r7
 8003bfc:	6027      	str	r7, [r4, #0]
 8003bfe:	e013      	b.n	8003c28 <_malloc_r+0xa0>
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	dacb      	bge.n	8003b9c <_malloc_r+0x14>
 8003c04:	230c      	movs	r3, #12
 8003c06:	2500      	movs	r5, #0
 8003c08:	6033      	str	r3, [r6, #0]
 8003c0a:	0028      	movs	r0, r5
 8003c0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c0e:	6822      	ldr	r2, [r4, #0]
 8003c10:	1bd1      	subs	r1, r2, r7
 8003c12:	d420      	bmi.n	8003c56 <_malloc_r+0xce>
 8003c14:	290b      	cmp	r1, #11
 8003c16:	d917      	bls.n	8003c48 <_malloc_r+0xc0>
 8003c18:	19e2      	adds	r2, r4, r7
 8003c1a:	6027      	str	r7, [r4, #0]
 8003c1c:	42a3      	cmp	r3, r4
 8003c1e:	d111      	bne.n	8003c44 <_malloc_r+0xbc>
 8003c20:	602a      	str	r2, [r5, #0]
 8003c22:	6863      	ldr	r3, [r4, #4]
 8003c24:	6011      	str	r1, [r2, #0]
 8003c26:	6053      	str	r3, [r2, #4]
 8003c28:	0030      	movs	r0, r6
 8003c2a:	0025      	movs	r5, r4
 8003c2c:	f000 f86c 	bl	8003d08 <__malloc_unlock>
 8003c30:	2207      	movs	r2, #7
 8003c32:	350b      	adds	r5, #11
 8003c34:	1d23      	adds	r3, r4, #4
 8003c36:	4395      	bics	r5, r2
 8003c38:	1aea      	subs	r2, r5, r3
 8003c3a:	429d      	cmp	r5, r3
 8003c3c:	d0e5      	beq.n	8003c0a <_malloc_r+0x82>
 8003c3e:	1b5b      	subs	r3, r3, r5
 8003c40:	50a3      	str	r3, [r4, r2]
 8003c42:	e7e2      	b.n	8003c0a <_malloc_r+0x82>
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	e7ec      	b.n	8003c22 <_malloc_r+0x9a>
 8003c48:	6862      	ldr	r2, [r4, #4]
 8003c4a:	42a3      	cmp	r3, r4
 8003c4c:	d101      	bne.n	8003c52 <_malloc_r+0xca>
 8003c4e:	602a      	str	r2, [r5, #0]
 8003c50:	e7ea      	b.n	8003c28 <_malloc_r+0xa0>
 8003c52:	605a      	str	r2, [r3, #4]
 8003c54:	e7e8      	b.n	8003c28 <_malloc_r+0xa0>
 8003c56:	0023      	movs	r3, r4
 8003c58:	6864      	ldr	r4, [r4, #4]
 8003c5a:	e7a7      	b.n	8003bac <_malloc_r+0x24>
 8003c5c:	002c      	movs	r4, r5
 8003c5e:	686d      	ldr	r5, [r5, #4]
 8003c60:	e7af      	b.n	8003bc2 <_malloc_r+0x3a>
 8003c62:	230c      	movs	r3, #12
 8003c64:	0030      	movs	r0, r6
 8003c66:	6033      	str	r3, [r6, #0]
 8003c68:	f000 f84e 	bl	8003d08 <__malloc_unlock>
 8003c6c:	e7cd      	b.n	8003c0a <_malloc_r+0x82>
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	20000184 	.word	0x20000184

08003c74 <_realloc_r>:
 8003c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c76:	0007      	movs	r7, r0
 8003c78:	000e      	movs	r6, r1
 8003c7a:	0014      	movs	r4, r2
 8003c7c:	2900      	cmp	r1, #0
 8003c7e:	d105      	bne.n	8003c8c <_realloc_r+0x18>
 8003c80:	0011      	movs	r1, r2
 8003c82:	f7ff ff81 	bl	8003b88 <_malloc_r>
 8003c86:	0005      	movs	r5, r0
 8003c88:	0028      	movs	r0, r5
 8003c8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c8c:	2a00      	cmp	r2, #0
 8003c8e:	d103      	bne.n	8003c98 <_realloc_r+0x24>
 8003c90:	f7ff ff0e 	bl	8003ab0 <_free_r>
 8003c94:	0025      	movs	r5, r4
 8003c96:	e7f7      	b.n	8003c88 <_realloc_r+0x14>
 8003c98:	f000 f83e 	bl	8003d18 <_malloc_usable_size_r>
 8003c9c:	9001      	str	r0, [sp, #4]
 8003c9e:	4284      	cmp	r4, r0
 8003ca0:	d803      	bhi.n	8003caa <_realloc_r+0x36>
 8003ca2:	0035      	movs	r5, r6
 8003ca4:	0843      	lsrs	r3, r0, #1
 8003ca6:	42a3      	cmp	r3, r4
 8003ca8:	d3ee      	bcc.n	8003c88 <_realloc_r+0x14>
 8003caa:	0021      	movs	r1, r4
 8003cac:	0038      	movs	r0, r7
 8003cae:	f7ff ff6b 	bl	8003b88 <_malloc_r>
 8003cb2:	1e05      	subs	r5, r0, #0
 8003cb4:	d0e8      	beq.n	8003c88 <_realloc_r+0x14>
 8003cb6:	9b01      	ldr	r3, [sp, #4]
 8003cb8:	0022      	movs	r2, r4
 8003cba:	429c      	cmp	r4, r3
 8003cbc:	d900      	bls.n	8003cc0 <_realloc_r+0x4c>
 8003cbe:	001a      	movs	r2, r3
 8003cc0:	0031      	movs	r1, r6
 8003cc2:	0028      	movs	r0, r5
 8003cc4:	f7ff fbc0 	bl	8003448 <memcpy>
 8003cc8:	0031      	movs	r1, r6
 8003cca:	0038      	movs	r0, r7
 8003ccc:	f7ff fef0 	bl	8003ab0 <_free_r>
 8003cd0:	e7da      	b.n	8003c88 <_realloc_r+0x14>
	...

08003cd4 <_sbrk_r>:
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	b570      	push	{r4, r5, r6, lr}
 8003cd8:	4d06      	ldr	r5, [pc, #24]	; (8003cf4 <_sbrk_r+0x20>)
 8003cda:	0004      	movs	r4, r0
 8003cdc:	0008      	movs	r0, r1
 8003cde:	602b      	str	r3, [r5, #0]
 8003ce0:	f7fd f826 	bl	8000d30 <_sbrk>
 8003ce4:	1c43      	adds	r3, r0, #1
 8003ce6:	d103      	bne.n	8003cf0 <_sbrk_r+0x1c>
 8003ce8:	682b      	ldr	r3, [r5, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d000      	beq.n	8003cf0 <_sbrk_r+0x1c>
 8003cee:	6023      	str	r3, [r4, #0]
 8003cf0:	bd70      	pop	{r4, r5, r6, pc}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	2000018c 	.word	0x2000018c

08003cf8 <__malloc_lock>:
 8003cf8:	b510      	push	{r4, lr}
 8003cfa:	4802      	ldr	r0, [pc, #8]	; (8003d04 <__malloc_lock+0xc>)
 8003cfc:	f000 f814 	bl	8003d28 <__retarget_lock_acquire_recursive>
 8003d00:	bd10      	pop	{r4, pc}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	20000190 	.word	0x20000190

08003d08 <__malloc_unlock>:
 8003d08:	b510      	push	{r4, lr}
 8003d0a:	4802      	ldr	r0, [pc, #8]	; (8003d14 <__malloc_unlock+0xc>)
 8003d0c:	f000 f80d 	bl	8003d2a <__retarget_lock_release_recursive>
 8003d10:	bd10      	pop	{r4, pc}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	20000190 	.word	0x20000190

08003d18 <_malloc_usable_size_r>:
 8003d18:	1f0b      	subs	r3, r1, #4
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	1f18      	subs	r0, r3, #4
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	da01      	bge.n	8003d26 <_malloc_usable_size_r+0xe>
 8003d22:	580b      	ldr	r3, [r1, r0]
 8003d24:	18c0      	adds	r0, r0, r3
 8003d26:	4770      	bx	lr

08003d28 <__retarget_lock_acquire_recursive>:
 8003d28:	4770      	bx	lr

08003d2a <__retarget_lock_release_recursive>:
 8003d2a:	4770      	bx	lr

08003d2c <_init>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d32:	bc08      	pop	{r3}
 8003d34:	469e      	mov	lr, r3
 8003d36:	4770      	bx	lr

08003d38 <_fini>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3e:	bc08      	pop	{r3}
 8003d40:	469e      	mov	lr, r3
 8003d42:	4770      	bx	lr
