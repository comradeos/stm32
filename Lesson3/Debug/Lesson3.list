
Lesson3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080026b4  080026b4  000126b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002700  08002700  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002700  08002700  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002700  08002700  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002700  08002700  00012700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002704  08002704  00012704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08002714  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08002714  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c86  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001705  00000000  00000000  00028cba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  0002a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000608  00000000  00000000  0002aa50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000113c8  00000000  00000000  0002b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008f5b  00000000  00000000  0003c420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067b2e  00000000  00000000  0004537b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000acea9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000160c  00000000  00000000  000acefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800269c 	.word	0x0800269c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800269c 	.word	0x0800269c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <HAL_UART_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]

}
 8000238:	46c0      	nop			; (mov r8, r8)
 800023a:	46bd      	mov	sp, r7
 800023c:	b002      	add	sp, #8
 800023e:	bd80      	pop	{r7, pc}

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b590      	push	{r4, r7, lr}
 8000242:	b087      	sub	sp, #28
 8000244:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000246:	f000 f9e1 	bl	800060c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024a:	f000 f837 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024e:	f000 f8af 	bl	80003b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000252:	f000 f87d 	bl	8000350 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t counter = 0;
 8000256:	2317      	movs	r3, #23
 8000258:	18fb      	adds	r3, r7, r3
 800025a:	2200      	movs	r2, #0
 800025c:	701a      	strb	r2, [r3, #0]
  char message[] = "Getting message...\n";
 800025e:	003b      	movs	r3, r7
 8000260:	4a13      	ldr	r2, [pc, #76]	; (80002b0 <main+0x70>)
 8000262:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000264:	c313      	stmia	r3!, {r0, r1, r4}
 8000266:	ca03      	ldmia	r2!, {r0, r1}
 8000268:	c303      	stmia	r3!, {r0, r1}
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  counter++;
 800026a:	2417      	movs	r4, #23
 800026c:	193b      	adds	r3, r7, r4
 800026e:	781a      	ldrb	r2, [r3, #0]
 8000270:	193b      	adds	r3, r7, r4
 8000272:	3201      	adds	r2, #1
 8000274:	701a      	strb	r2, [r3, #0]
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000276:	2380      	movs	r3, #128	; 0x80
 8000278:	009b      	lsls	r3, r3, #2
 800027a:	4a0e      	ldr	r2, [pc, #56]	; (80002b4 <main+0x74>)
 800027c:	0019      	movs	r1, r3
 800027e:	0010      	movs	r0, r2
 8000280:	f000 fd35 	bl	8000cee <HAL_GPIO_TogglePin>
	 HAL_Delay(50);
 8000284:	2032      	movs	r0, #50	; 0x32
 8000286:	f000 fa25 	bl	80006d4 <HAL_Delay>
	 if (counter == 20)
 800028a:	193b      	adds	r3, r7, r4
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b14      	cmp	r3, #20
 8000290:	d1eb      	bne.n	800026a <main+0x2a>
	 {
		 // вывести сообщение в консоль (ком порт, конектиться через Arduino IDE)
		 // Arduino IDE -> Select Board -> Select other boards and ports -> [Arduino BT, USBToUART Serial Port] -> OK -> Serial Monitor
		 //
		 HAL_UART_Transmit_IT(&huart2, (uint8_t * ) message, strlen(message));
 8000292:	003b      	movs	r3, r7
 8000294:	0018      	movs	r0, r3
 8000296:	f7ff ff37 	bl	8000108 <strlen>
 800029a:	0003      	movs	r3, r0
 800029c:	b29a      	uxth	r2, r3
 800029e:	0039      	movs	r1, r7
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <main+0x78>)
 80002a2:	0018      	movs	r0, r3
 80002a4:	f001 f9fe 	bl	80016a4 <HAL_UART_Transmit_IT>
		 counter = 0;
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	2200      	movs	r2, #0
 80002ac:	701a      	strb	r2, [r3, #0]
	  counter++;
 80002ae:	e7dc      	b.n	800026a <main+0x2a>
 80002b0:	080026b4 	.word	0x080026b4
 80002b4:	48000800 	.word	0x48000800
 80002b8:	20000028 	.word	0x20000028

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b590      	push	{r4, r7, lr}
 80002be:	b091      	sub	sp, #68	; 0x44
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	2410      	movs	r4, #16
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	0018      	movs	r0, r3
 80002c8:	2330      	movs	r3, #48	; 0x30
 80002ca:	001a      	movs	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	f002 f9dd 	bl	800268c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d2:	003b      	movs	r3, r7
 80002d4:	0018      	movs	r0, r3
 80002d6:	2310      	movs	r3, #16
 80002d8:	001a      	movs	r2, r3
 80002da:	2100      	movs	r1, #0
 80002dc:	f002 f9d6 	bl	800268c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e0:	0021      	movs	r1, r4
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2202      	movs	r2, #2
 80002e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2201      	movs	r2, #1
 80002ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2210      	movs	r2, #16
 80002f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2202      	movs	r2, #2
 80002f8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2200      	movs	r2, #0
 80002fe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	22a0      	movs	r2, #160	; 0xa0
 8000304:	0392      	lsls	r2, r2, #14
 8000306:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2200      	movs	r2, #0
 800030c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030e:	187b      	adds	r3, r7, r1
 8000310:	0018      	movs	r0, r3
 8000312:	f000 fd07 	bl	8000d24 <HAL_RCC_OscConfig>
 8000316:	1e03      	subs	r3, r0, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800031a:	f000 f8a5 	bl	8000468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031e:	003b      	movs	r3, r7
 8000320:	2207      	movs	r2, #7
 8000322:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000324:	003b      	movs	r3, r7
 8000326:	2202      	movs	r2, #2
 8000328:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032a:	003b      	movs	r3, r7
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000330:	003b      	movs	r3, r7
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000336:	003b      	movs	r3, r7
 8000338:	2101      	movs	r1, #1
 800033a:	0018      	movs	r0, r3
 800033c:	f001 f80c 	bl	8001358 <HAL_RCC_ClockConfig>
 8000340:	1e03      	subs	r3, r0, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000344:	f000 f890 	bl	8000468 <Error_Handler>
  }
}
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b011      	add	sp, #68	; 0x44
 800034e:	bd90      	pop	{r4, r7, pc}

08000350 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000354:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000356:	4a15      	ldr	r2, [pc, #84]	; (80003ac <MX_USART2_UART_Init+0x5c>)
 8000358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800035a:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 800035c:	2296      	movs	r2, #150	; 0x96
 800035e:	0192      	lsls	r2, r2, #6
 8000360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000362:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000376:	220c      	movs	r2, #12
 8000378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 800037c:	2200      	movs	r2, #0
 800037e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000382:	2200      	movs	r2, #0
 8000384:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000388:	2200      	movs	r2, #0
 800038a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 800038e:	2200      	movs	r2, #0
 8000390:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000392:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <MX_USART2_UART_Init+0x58>)
 8000394:	0018      	movs	r0, r3
 8000396:	f001 f931 	bl	80015fc <HAL_UART_Init>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800039e:	f000 f863 	bl	8000468 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000028 	.word	0x20000028
 80003ac:	40004400 	.word	0x40004400

080003b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b0:	b590      	push	{r4, r7, lr}
 80003b2:	b089      	sub	sp, #36	; 0x24
 80003b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	240c      	movs	r4, #12
 80003b8:	193b      	adds	r3, r7, r4
 80003ba:	0018      	movs	r0, r3
 80003bc:	2314      	movs	r3, #20
 80003be:	001a      	movs	r2, r3
 80003c0:	2100      	movs	r1, #0
 80003c2:	f002 f963 	bl	800268c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c6:	4b26      	ldr	r3, [pc, #152]	; (8000460 <MX_GPIO_Init+0xb0>)
 80003c8:	695a      	ldr	r2, [r3, #20]
 80003ca:	4b25      	ldr	r3, [pc, #148]	; (8000460 <MX_GPIO_Init+0xb0>)
 80003cc:	2180      	movs	r1, #128	; 0x80
 80003ce:	0289      	lsls	r1, r1, #10
 80003d0:	430a      	orrs	r2, r1
 80003d2:	615a      	str	r2, [r3, #20]
 80003d4:	4b22      	ldr	r3, [pc, #136]	; (8000460 <MX_GPIO_Init+0xb0>)
 80003d6:	695a      	ldr	r2, [r3, #20]
 80003d8:	2380      	movs	r3, #128	; 0x80
 80003da:	029b      	lsls	r3, r3, #10
 80003dc:	4013      	ands	r3, r2
 80003de:	60bb      	str	r3, [r7, #8]
 80003e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e2:	4b1f      	ldr	r3, [pc, #124]	; (8000460 <MX_GPIO_Init+0xb0>)
 80003e4:	695a      	ldr	r2, [r3, #20]
 80003e6:	4b1e      	ldr	r3, [pc, #120]	; (8000460 <MX_GPIO_Init+0xb0>)
 80003e8:	2180      	movs	r1, #128	; 0x80
 80003ea:	0309      	lsls	r1, r1, #12
 80003ec:	430a      	orrs	r2, r1
 80003ee:	615a      	str	r2, [r3, #20]
 80003f0:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <MX_GPIO_Init+0xb0>)
 80003f2:	695a      	ldr	r2, [r3, #20]
 80003f4:	2380      	movs	r3, #128	; 0x80
 80003f6:	031b      	lsls	r3, r3, #12
 80003f8:	4013      	ands	r3, r2
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80003fe:	23c0      	movs	r3, #192	; 0xc0
 8000400:	009b      	lsls	r3, r3, #2
 8000402:	4818      	ldr	r0, [pc, #96]	; (8000464 <MX_GPIO_Init+0xb4>)
 8000404:	2200      	movs	r2, #0
 8000406:	0019      	movs	r1, r3
 8000408:	f000 fc54 	bl	8000cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800040c:	193b      	adds	r3, r7, r4
 800040e:	2201      	movs	r2, #1
 8000410:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000412:	193b      	adds	r3, r7, r4
 8000414:	2290      	movs	r2, #144	; 0x90
 8000416:	0352      	lsls	r2, r2, #13
 8000418:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	193b      	adds	r3, r7, r4
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000420:	193a      	adds	r2, r7, r4
 8000422:	2390      	movs	r3, #144	; 0x90
 8000424:	05db      	lsls	r3, r3, #23
 8000426:	0011      	movs	r1, r2
 8000428:	0018      	movs	r0, r3
 800042a:	f000 fad3 	bl	80009d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 800042e:	0021      	movs	r1, r4
 8000430:	187b      	adds	r3, r7, r1
 8000432:	22c0      	movs	r2, #192	; 0xc0
 8000434:	0092      	lsls	r2, r2, #2
 8000436:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000438:	187b      	adds	r3, r7, r1
 800043a:	2201      	movs	r2, #1
 800043c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000444:	187b      	adds	r3, r7, r1
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800044a:	187b      	adds	r3, r7, r1
 800044c:	4a05      	ldr	r2, [pc, #20]	; (8000464 <MX_GPIO_Init+0xb4>)
 800044e:	0019      	movs	r1, r3
 8000450:	0010      	movs	r0, r2
 8000452:	f000 fabf 	bl	80009d4 <HAL_GPIO_Init>

}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b009      	add	sp, #36	; 0x24
 800045c:	bd90      	pop	{r4, r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	40021000 	.word	0x40021000
 8000464:	48000800 	.word	0x48000800

08000468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046c:	b672      	cpsid	i
}
 800046e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000470:	e7fe      	b.n	8000470 <Error_Handler+0x8>
	...

08000474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <HAL_MspInit+0x44>)
 800047c:	699a      	ldr	r2, [r3, #24]
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <HAL_MspInit+0x44>)
 8000480:	2101      	movs	r1, #1
 8000482:	430a      	orrs	r2, r1
 8000484:	619a      	str	r2, [r3, #24]
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <HAL_MspInit+0x44>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	2201      	movs	r2, #1
 800048c:	4013      	ands	r3, r2
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000492:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <HAL_MspInit+0x44>)
 8000494:	69da      	ldr	r2, [r3, #28]
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <HAL_MspInit+0x44>)
 8000498:	2180      	movs	r1, #128	; 0x80
 800049a:	0549      	lsls	r1, r1, #21
 800049c:	430a      	orrs	r2, r1
 800049e:	61da      	str	r2, [r3, #28]
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <HAL_MspInit+0x44>)
 80004a2:	69da      	ldr	r2, [r3, #28]
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	055b      	lsls	r3, r3, #21
 80004a8:	4013      	ands	r3, r2
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b002      	add	sp, #8
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000

080004bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b08b      	sub	sp, #44	; 0x2c
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c4:	2414      	movs	r4, #20
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	0018      	movs	r0, r3
 80004ca:	2314      	movs	r3, #20
 80004cc:	001a      	movs	r2, r3
 80004ce:	2100      	movs	r1, #0
 80004d0:	f002 f8dc 	bl	800268c <memset>
  if(huart->Instance==USART2)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a20      	ldr	r2, [pc, #128]	; (800055c <HAL_UART_MspInit+0xa0>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d13a      	bne.n	8000554 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004de:	4b20      	ldr	r3, [pc, #128]	; (8000560 <HAL_UART_MspInit+0xa4>)
 80004e0:	69da      	ldr	r2, [r3, #28]
 80004e2:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <HAL_UART_MspInit+0xa4>)
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	0289      	lsls	r1, r1, #10
 80004e8:	430a      	orrs	r2, r1
 80004ea:	61da      	str	r2, [r3, #28]
 80004ec:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <HAL_UART_MspInit+0xa4>)
 80004ee:	69da      	ldr	r2, [r3, #28]
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	029b      	lsls	r3, r3, #10
 80004f4:	4013      	ands	r3, r2
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b19      	ldr	r3, [pc, #100]	; (8000560 <HAL_UART_MspInit+0xa4>)
 80004fc:	695a      	ldr	r2, [r3, #20]
 80004fe:	4b18      	ldr	r3, [pc, #96]	; (8000560 <HAL_UART_MspInit+0xa4>)
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	0289      	lsls	r1, r1, #10
 8000504:	430a      	orrs	r2, r1
 8000506:	615a      	str	r2, [r3, #20]
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <HAL_UART_MspInit+0xa4>)
 800050a:	695a      	ldr	r2, [r3, #20]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	029b      	lsls	r3, r3, #10
 8000510:	4013      	ands	r3, r2
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000516:	0021      	movs	r1, r4
 8000518:	187b      	adds	r3, r7, r1
 800051a:	220c      	movs	r2, #12
 800051c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2202      	movs	r2, #2
 8000522:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2203      	movs	r2, #3
 800052e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2201      	movs	r2, #1
 8000534:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000536:	187a      	adds	r2, r7, r1
 8000538:	2390      	movs	r3, #144	; 0x90
 800053a:	05db      	lsls	r3, r3, #23
 800053c:	0011      	movs	r1, r2
 800053e:	0018      	movs	r0, r3
 8000540:	f000 fa48 	bl	80009d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000544:	2200      	movs	r2, #0
 8000546:	2100      	movs	r1, #0
 8000548:	201c      	movs	r0, #28
 800054a:	f000 f993 	bl	8000874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800054e:	201c      	movs	r0, #28
 8000550:	f000 f9a5 	bl	800089e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	b00b      	add	sp, #44	; 0x2c
 800055a:	bd90      	pop	{r4, r7, pc}
 800055c:	40004400 	.word	0x40004400
 8000560:	40021000 	.word	0x40021000

08000564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <NMI_Handler+0x4>

0800056a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <HardFault_Handler+0x4>

08000570 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000574:	46c0      	nop			; (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000588:	f000 f888 	bl	800069c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <USART2_IRQHandler+0x14>)
 800059a:	0018      	movs	r0, r3
 800059c:	f001 f902 	bl	80017a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	20000028 	.word	0x20000028

080005ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
    ldr   r0, =_estack
 80005b8:	480d      	ldr	r0, [pc, #52]	; (80005f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005bc:	480d      	ldr	r0, [pc, #52]	; (80005f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005be:	490e      	ldr	r1, [pc, #56]	; (80005f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c0:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <LoopForever+0xe>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c4:	e002      	b.n	80005cc <LoopCopyDataInit>

080005c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ca:	3304      	adds	r3, #4

080005cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d0:	d3f9      	bcc.n	80005c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d2:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d4:	4c0b      	ldr	r4, [pc, #44]	; (8000604 <LoopForever+0x16>)
  movs r3, #0
 80005d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d8:	e001      	b.n	80005de <LoopFillZerobss>

080005da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005dc:	3204      	adds	r2, #4

080005de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e0:	d3fb      	bcc.n	80005da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005e2:	f7ff ffe3 	bl	80005ac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80005e6:	f002 f82d 	bl	8002644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ea:	f7ff fe29 	bl	8000240 <main>

080005ee <LoopForever>:

LoopForever:
    b LoopForever
 80005ee:	e7fe      	b.n	80005ee <LoopForever>
    ldr   r0, =_estack
 80005f0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80005f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005fc:	08002708 	.word	0x08002708
  ldr r2, =_sbss
 8000600:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000604:	200000b0 	.word	0x200000b0

08000608 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000608:	e7fe      	b.n	8000608 <ADC1_COMP_IRQHandler>
	...

0800060c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <HAL_Init+0x24>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <HAL_Init+0x24>)
 8000616:	2110      	movs	r1, #16
 8000618:	430a      	orrs	r2, r1
 800061a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800061c:	2000      	movs	r0, #0
 800061e:	f000 f809 	bl	8000634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000622:	f7ff ff27 	bl	8000474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000626:	2300      	movs	r3, #0
}
 8000628:	0018      	movs	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	40022000 	.word	0x40022000

08000634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <HAL_InitTick+0x5c>)
 800063e:	681c      	ldr	r4, [r3, #0]
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <HAL_InitTick+0x60>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	0019      	movs	r1, r3
 8000646:	23fa      	movs	r3, #250	; 0xfa
 8000648:	0098      	lsls	r0, r3, #2
 800064a:	f7ff fd65 	bl	8000118 <__udivsi3>
 800064e:	0003      	movs	r3, r0
 8000650:	0019      	movs	r1, r3
 8000652:	0020      	movs	r0, r4
 8000654:	f7ff fd60 	bl	8000118 <__udivsi3>
 8000658:	0003      	movs	r3, r0
 800065a:	0018      	movs	r0, r3
 800065c:	f000 f92f 	bl	80008be <HAL_SYSTICK_Config>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d001      	beq.n	8000668 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000664:	2301      	movs	r3, #1
 8000666:	e00f      	b.n	8000688 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b03      	cmp	r3, #3
 800066c:	d80b      	bhi.n	8000686 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800066e:	6879      	ldr	r1, [r7, #4]
 8000670:	2301      	movs	r3, #1
 8000672:	425b      	negs	r3, r3
 8000674:	2200      	movs	r2, #0
 8000676:	0018      	movs	r0, r3
 8000678:	f000 f8fc 	bl	8000874 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_InitTick+0x64>)
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000682:	2300      	movs	r3, #0
 8000684:	e000      	b.n	8000688 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
}
 8000688:	0018      	movs	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	b003      	add	sp, #12
 800068e:	bd90      	pop	{r4, r7, pc}
 8000690:	20000000 	.word	0x20000000
 8000694:	20000008 	.word	0x20000008
 8000698:	20000004 	.word	0x20000004

0800069c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <HAL_IncTick+0x1c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	001a      	movs	r2, r3
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_IncTick+0x20>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	18d2      	adds	r2, r2, r3
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <HAL_IncTick+0x20>)
 80006ae:	601a      	str	r2, [r3, #0]
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	20000008 	.word	0x20000008
 80006bc:	200000ac 	.word	0x200000ac

080006c0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  return uwTick;
 80006c4:	4b02      	ldr	r3, [pc, #8]	; (80006d0 <HAL_GetTick+0x10>)
 80006c6:	681b      	ldr	r3, [r3, #0]
}
 80006c8:	0018      	movs	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	200000ac 	.word	0x200000ac

080006d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006dc:	f7ff fff0 	bl	80006c0 <HAL_GetTick>
 80006e0:	0003      	movs	r3, r0
 80006e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	3301      	adds	r3, #1
 80006ec:	d005      	beq.n	80006fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <HAL_Delay+0x44>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	001a      	movs	r2, r3
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	189b      	adds	r3, r3, r2
 80006f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	f7ff ffe0 	bl	80006c0 <HAL_GetTick>
 8000700:	0002      	movs	r2, r0
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	429a      	cmp	r2, r3
 800070a:	d8f7      	bhi.n	80006fc <HAL_Delay+0x28>
  {
  }
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b004      	add	sp, #16
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	20000008 	.word	0x20000008

0800071c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	0002      	movs	r2, r0
 8000724:	1dfb      	adds	r3, r7, #7
 8000726:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b7f      	cmp	r3, #127	; 0x7f
 800072e:	d809      	bhi.n	8000744 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	001a      	movs	r2, r3
 8000736:	231f      	movs	r3, #31
 8000738:	401a      	ands	r2, r3
 800073a:	4b04      	ldr	r3, [pc, #16]	; (800074c <__NVIC_EnableIRQ+0x30>)
 800073c:	2101      	movs	r1, #1
 800073e:	4091      	lsls	r1, r2
 8000740:	000a      	movs	r2, r1
 8000742:	601a      	str	r2, [r3, #0]
  }
}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	b002      	add	sp, #8
 800074a:	bd80      	pop	{r7, pc}
 800074c:	e000e100 	.word	0xe000e100

08000750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000750:	b590      	push	{r4, r7, lr}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	0002      	movs	r2, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800075e:	1dfb      	adds	r3, r7, #7
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b7f      	cmp	r3, #127	; 0x7f
 8000764:	d828      	bhi.n	80007b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000766:	4a2f      	ldr	r2, [pc, #188]	; (8000824 <__NVIC_SetPriority+0xd4>)
 8000768:	1dfb      	adds	r3, r7, #7
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b25b      	sxtb	r3, r3
 800076e:	089b      	lsrs	r3, r3, #2
 8000770:	33c0      	adds	r3, #192	; 0xc0
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	589b      	ldr	r3, [r3, r2]
 8000776:	1dfa      	adds	r2, r7, #7
 8000778:	7812      	ldrb	r2, [r2, #0]
 800077a:	0011      	movs	r1, r2
 800077c:	2203      	movs	r2, #3
 800077e:	400a      	ands	r2, r1
 8000780:	00d2      	lsls	r2, r2, #3
 8000782:	21ff      	movs	r1, #255	; 0xff
 8000784:	4091      	lsls	r1, r2
 8000786:	000a      	movs	r2, r1
 8000788:	43d2      	mvns	r2, r2
 800078a:	401a      	ands	r2, r3
 800078c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	019b      	lsls	r3, r3, #6
 8000792:	22ff      	movs	r2, #255	; 0xff
 8000794:	401a      	ands	r2, r3
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	0018      	movs	r0, r3
 800079c:	2303      	movs	r3, #3
 800079e:	4003      	ands	r3, r0
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a4:	481f      	ldr	r0, [pc, #124]	; (8000824 <__NVIC_SetPriority+0xd4>)
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	089b      	lsrs	r3, r3, #2
 80007ae:	430a      	orrs	r2, r1
 80007b0:	33c0      	adds	r3, #192	; 0xc0
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007b6:	e031      	b.n	800081c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b8:	4a1b      	ldr	r2, [pc, #108]	; (8000828 <__NVIC_SetPriority+0xd8>)
 80007ba:	1dfb      	adds	r3, r7, #7
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	0019      	movs	r1, r3
 80007c0:	230f      	movs	r3, #15
 80007c2:	400b      	ands	r3, r1
 80007c4:	3b08      	subs	r3, #8
 80007c6:	089b      	lsrs	r3, r3, #2
 80007c8:	3306      	adds	r3, #6
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	18d3      	adds	r3, r2, r3
 80007ce:	3304      	adds	r3, #4
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	1dfa      	adds	r2, r7, #7
 80007d4:	7812      	ldrb	r2, [r2, #0]
 80007d6:	0011      	movs	r1, r2
 80007d8:	2203      	movs	r2, #3
 80007da:	400a      	ands	r2, r1
 80007dc:	00d2      	lsls	r2, r2, #3
 80007de:	21ff      	movs	r1, #255	; 0xff
 80007e0:	4091      	lsls	r1, r2
 80007e2:	000a      	movs	r2, r1
 80007e4:	43d2      	mvns	r2, r2
 80007e6:	401a      	ands	r2, r3
 80007e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	019b      	lsls	r3, r3, #6
 80007ee:	22ff      	movs	r2, #255	; 0xff
 80007f0:	401a      	ands	r2, r3
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	0018      	movs	r0, r3
 80007f8:	2303      	movs	r3, #3
 80007fa:	4003      	ands	r3, r0
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <__NVIC_SetPriority+0xd8>)
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	001c      	movs	r4, r3
 8000808:	230f      	movs	r3, #15
 800080a:	4023      	ands	r3, r4
 800080c:	3b08      	subs	r3, #8
 800080e:	089b      	lsrs	r3, r3, #2
 8000810:	430a      	orrs	r2, r1
 8000812:	3306      	adds	r3, #6
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	18c3      	adds	r3, r0, r3
 8000818:	3304      	adds	r3, #4
 800081a:	601a      	str	r2, [r3, #0]
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b003      	add	sp, #12
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	e000e100 	.word	0xe000e100
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	1e5a      	subs	r2, r3, #1
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	045b      	lsls	r3, r3, #17
 800083c:	429a      	cmp	r2, r3
 800083e:	d301      	bcc.n	8000844 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000840:	2301      	movs	r3, #1
 8000842:	e010      	b.n	8000866 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <SysTick_Config+0x44>)
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	3a01      	subs	r2, #1
 800084a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800084c:	2301      	movs	r3, #1
 800084e:	425b      	negs	r3, r3
 8000850:	2103      	movs	r1, #3
 8000852:	0018      	movs	r0, r3
 8000854:	f7ff ff7c 	bl	8000750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <SysTick_Config+0x44>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <SysTick_Config+0x44>)
 8000860:	2207      	movs	r2, #7
 8000862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000864:	2300      	movs	r3, #0
}
 8000866:	0018      	movs	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	e000e010 	.word	0xe000e010

08000874 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
 800087e:	210f      	movs	r1, #15
 8000880:	187b      	adds	r3, r7, r1
 8000882:	1c02      	adds	r2, r0, #0
 8000884:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	187b      	adds	r3, r7, r1
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b25b      	sxtb	r3, r3
 800088e:	0011      	movs	r1, r2
 8000890:	0018      	movs	r0, r3
 8000892:	f7ff ff5d 	bl	8000750 <__NVIC_SetPriority>
}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b004      	add	sp, #16
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	0002      	movs	r2, r0
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	b25b      	sxtb	r3, r3
 80008b0:	0018      	movs	r0, r3
 80008b2:	f7ff ff33 	bl	800071c <__NVIC_EnableIRQ>
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b002      	add	sp, #8
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	0018      	movs	r0, r3
 80008ca:	f7ff ffaf 	bl	800082c <SysTick_Config>
 80008ce:	0003      	movs	r3, r0
}
 80008d0:	0018      	movs	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b002      	add	sp, #8
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2221      	movs	r2, #33	; 0x21
 80008e4:	5c9b      	ldrb	r3, [r3, r2]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d008      	beq.n	80008fe <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2204      	movs	r2, #4
 80008f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2220      	movs	r2, #32
 80008f6:	2100      	movs	r1, #0
 80008f8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e020      	b.n	8000940 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	210e      	movs	r1, #14
 800090a:	438a      	bics	r2, r1
 800090c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2101      	movs	r1, #1
 800091a:	438a      	bics	r2, r1
 800091c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000926:	2101      	movs	r1, #1
 8000928:	4091      	lsls	r1, r2
 800092a:	000a      	movs	r2, r1
 800092c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2221      	movs	r2, #33	; 0x21
 8000932:	2101      	movs	r1, #1
 8000934:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2220      	movs	r2, #32
 800093a:	2100      	movs	r1, #0
 800093c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800093e:	2300      	movs	r3, #0
}
 8000940:	0018      	movs	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	b002      	add	sp, #8
 8000946:	bd80      	pop	{r7, pc}

08000948 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000950:	210f      	movs	r1, #15
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2221      	movs	r2, #33	; 0x21
 800095c:	5c9b      	ldrb	r3, [r3, r2]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b02      	cmp	r3, #2
 8000962:	d006      	beq.n	8000972 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2204      	movs	r2, #4
 8000968:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2201      	movs	r2, #1
 800096e:	701a      	strb	r2, [r3, #0]
 8000970:	e028      	b.n	80009c4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	210e      	movs	r1, #14
 800097e:	438a      	bics	r2, r1
 8000980:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2101      	movs	r1, #1
 800098e:	438a      	bics	r2, r1
 8000990:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800099a:	2101      	movs	r1, #1
 800099c:	4091      	lsls	r1, r2
 800099e:	000a      	movs	r2, r1
 80009a0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2221      	movs	r2, #33	; 0x21
 80009a6:	2101      	movs	r1, #1
 80009a8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2220      	movs	r2, #32
 80009ae:	2100      	movs	r1, #0
 80009b0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d004      	beq.n	80009c4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	0010      	movs	r0, r2
 80009c2:	4798      	blx	r3
    } 
  }
  return status;
 80009c4:	230f      	movs	r3, #15
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	781b      	ldrb	r3, [r3, #0]
}
 80009ca:	0018      	movs	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b004      	add	sp, #16
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009e2:	e14f      	b.n	8000c84 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2101      	movs	r1, #1
 80009ea:	697a      	ldr	r2, [r7, #20]
 80009ec:	4091      	lsls	r1, r2
 80009ee:	000a      	movs	r2, r1
 80009f0:	4013      	ands	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d100      	bne.n	80009fc <HAL_GPIO_Init+0x28>
 80009fa:	e140      	b.n	8000c7e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	2203      	movs	r2, #3
 8000a02:	4013      	ands	r3, r2
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d005      	beq.n	8000a14 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d130      	bne.n	8000a76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	2203      	movs	r2, #3
 8000a20:	409a      	lsls	r2, r3
 8000a22:	0013      	movs	r3, r2
 8000a24:	43da      	mvns	r2, r3
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	68da      	ldr	r2, [r3, #12]
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	409a      	lsls	r2, r3
 8000a36:	0013      	movs	r3, r2
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	409a      	lsls	r2, r3
 8000a50:	0013      	movs	r3, r2
 8000a52:	43da      	mvns	r2, r3
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	091b      	lsrs	r3, r3, #4
 8000a60:	2201      	movs	r2, #1
 8000a62:	401a      	ands	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	409a      	lsls	r2, r3
 8000a68:	0013      	movs	r3, r2
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	2203      	movs	r2, #3
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	d017      	beq.n	8000ab2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	409a      	lsls	r2, r3
 8000a90:	0013      	movs	r3, r2
 8000a92:	43da      	mvns	r2, r3
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	409a      	lsls	r2, r3
 8000aa4:	0013      	movs	r3, r2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	4013      	ands	r3, r2
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d123      	bne.n	8000b06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	08da      	lsrs	r2, r3, #3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3208      	adds	r2, #8
 8000ac6:	0092      	lsls	r2, r2, #2
 8000ac8:	58d3      	ldr	r3, [r2, r3]
 8000aca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	2207      	movs	r2, #7
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	220f      	movs	r2, #15
 8000ad6:	409a      	lsls	r2, r3
 8000ad8:	0013      	movs	r3, r2
 8000ada:	43da      	mvns	r2, r3
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	691a      	ldr	r2, [r3, #16]
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	2107      	movs	r1, #7
 8000aea:	400b      	ands	r3, r1
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	409a      	lsls	r2, r3
 8000af0:	0013      	movs	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	08da      	lsrs	r2, r3, #3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3208      	adds	r2, #8
 8000b00:	0092      	lsls	r2, r2, #2
 8000b02:	6939      	ldr	r1, [r7, #16]
 8000b04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	2203      	movs	r2, #3
 8000b12:	409a      	lsls	r2, r3
 8000b14:	0013      	movs	r3, r2
 8000b16:	43da      	mvns	r2, r3
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	2203      	movs	r2, #3
 8000b24:	401a      	ands	r2, r3
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	409a      	lsls	r2, r3
 8000b2c:	0013      	movs	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	23c0      	movs	r3, #192	; 0xc0
 8000b40:	029b      	lsls	r3, r3, #10
 8000b42:	4013      	ands	r3, r2
 8000b44:	d100      	bne.n	8000b48 <HAL_GPIO_Init+0x174>
 8000b46:	e09a      	b.n	8000c7e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b48:	4b54      	ldr	r3, [pc, #336]	; (8000c9c <HAL_GPIO_Init+0x2c8>)
 8000b4a:	699a      	ldr	r2, [r3, #24]
 8000b4c:	4b53      	ldr	r3, [pc, #332]	; (8000c9c <HAL_GPIO_Init+0x2c8>)
 8000b4e:	2101      	movs	r1, #1
 8000b50:	430a      	orrs	r2, r1
 8000b52:	619a      	str	r2, [r3, #24]
 8000b54:	4b51      	ldr	r3, [pc, #324]	; (8000c9c <HAL_GPIO_Init+0x2c8>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	2201      	movs	r2, #1
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b60:	4a4f      	ldr	r2, [pc, #316]	; (8000ca0 <HAL_GPIO_Init+0x2cc>)
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	089b      	lsrs	r3, r3, #2
 8000b66:	3302      	adds	r3, #2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	589b      	ldr	r3, [r3, r2]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	2203      	movs	r2, #3
 8000b72:	4013      	ands	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	220f      	movs	r2, #15
 8000b78:	409a      	lsls	r2, r3
 8000b7a:	0013      	movs	r3, r2
 8000b7c:	43da      	mvns	r2, r3
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	2390      	movs	r3, #144	; 0x90
 8000b88:	05db      	lsls	r3, r3, #23
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d013      	beq.n	8000bb6 <HAL_GPIO_Init+0x1e2>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a44      	ldr	r2, [pc, #272]	; (8000ca4 <HAL_GPIO_Init+0x2d0>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d00d      	beq.n	8000bb2 <HAL_GPIO_Init+0x1de>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a43      	ldr	r2, [pc, #268]	; (8000ca8 <HAL_GPIO_Init+0x2d4>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d007      	beq.n	8000bae <HAL_GPIO_Init+0x1da>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a42      	ldr	r2, [pc, #264]	; (8000cac <HAL_GPIO_Init+0x2d8>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d101      	bne.n	8000baa <HAL_GPIO_Init+0x1d6>
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	e006      	b.n	8000bb8 <HAL_GPIO_Init+0x1e4>
 8000baa:	2305      	movs	r3, #5
 8000bac:	e004      	b.n	8000bb8 <HAL_GPIO_Init+0x1e4>
 8000bae:	2302      	movs	r3, #2
 8000bb0:	e002      	b.n	8000bb8 <HAL_GPIO_Init+0x1e4>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e000      	b.n	8000bb8 <HAL_GPIO_Init+0x1e4>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	697a      	ldr	r2, [r7, #20]
 8000bba:	2103      	movs	r1, #3
 8000bbc:	400a      	ands	r2, r1
 8000bbe:	0092      	lsls	r2, r2, #2
 8000bc0:	4093      	lsls	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bc8:	4935      	ldr	r1, [pc, #212]	; (8000ca0 <HAL_GPIO_Init+0x2cc>)
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	089b      	lsrs	r3, r3, #2
 8000bce:	3302      	adds	r3, #2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bd6:	4b36      	ldr	r3, [pc, #216]	; (8000cb0 <HAL_GPIO_Init+0x2dc>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	43da      	mvns	r2, r3
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	025b      	lsls	r3, r3, #9
 8000bee:	4013      	ands	r3, r2
 8000bf0:	d003      	beq.n	8000bfa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bfa:	4b2d      	ldr	r3, [pc, #180]	; (8000cb0 <HAL_GPIO_Init+0x2dc>)
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c00:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <HAL_GPIO_Init+0x2dc>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	43da      	mvns	r2, r3
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	029b      	lsls	r3, r3, #10
 8000c18:	4013      	ands	r3, r2
 8000c1a:	d003      	beq.n	8000c24 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <HAL_GPIO_Init+0x2dc>)
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <HAL_GPIO_Init+0x2dc>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	43da      	mvns	r2, r3
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	2380      	movs	r3, #128	; 0x80
 8000c40:	035b      	lsls	r3, r3, #13
 8000c42:	4013      	ands	r3, r2
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <HAL_GPIO_Init+0x2dc>)
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <HAL_GPIO_Init+0x2dc>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	43da      	mvns	r2, r3
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	039b      	lsls	r3, r3, #14
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	d003      	beq.n	8000c78 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c78:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <HAL_GPIO_Init+0x2dc>)
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3301      	adds	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	40da      	lsrs	r2, r3
 8000c8c:	1e13      	subs	r3, r2, #0
 8000c8e:	d000      	beq.n	8000c92 <HAL_GPIO_Init+0x2be>
 8000c90:	e6a8      	b.n	80009e4 <HAL_GPIO_Init+0x10>
  } 
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b006      	add	sp, #24
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010000 	.word	0x40010000
 8000ca4:	48000400 	.word	0x48000400
 8000ca8:	48000800 	.word	0x48000800
 8000cac:	48000c00 	.word	0x48000c00
 8000cb0:	40010400 	.word	0x40010400

08000cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	0008      	movs	r0, r1
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	1cbb      	adds	r3, r7, #2
 8000cc2:	1c02      	adds	r2, r0, #0
 8000cc4:	801a      	strh	r2, [r3, #0]
 8000cc6:	1c7b      	adds	r3, r7, #1
 8000cc8:	1c0a      	adds	r2, r1, #0
 8000cca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ccc:	1c7b      	adds	r3, r7, #1
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d004      	beq.n	8000cde <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cd4:	1cbb      	adds	r3, r7, #2
 8000cd6:	881a      	ldrh	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cdc:	e003      	b.n	8000ce6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cde:	1cbb      	adds	r3, r7, #2
 8000ce0:	881a      	ldrh	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b084      	sub	sp, #16
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	000a      	movs	r2, r1
 8000cf8:	1cbb      	adds	r3, r7, #2
 8000cfa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d02:	1cbb      	adds	r3, r7, #2
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	041a      	lsls	r2, r3, #16
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	1cb9      	adds	r1, r7, #2
 8000d12:	8809      	ldrh	r1, [r1, #0]
 8000d14:	400b      	ands	r3, r1
 8000d16:	431a      	orrs	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	619a      	str	r2, [r3, #24]
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b004      	add	sp, #16
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e301      	b.n	800133a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	d100      	bne.n	8000d42 <HAL_RCC_OscConfig+0x1e>
 8000d40:	e08d      	b.n	8000e5e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d42:	4bc3      	ldr	r3, [pc, #780]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	220c      	movs	r2, #12
 8000d48:	4013      	ands	r3, r2
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	d00e      	beq.n	8000d6c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d4e:	4bc0      	ldr	r3, [pc, #768]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	220c      	movs	r2, #12
 8000d54:	4013      	ands	r3, r2
 8000d56:	2b08      	cmp	r3, #8
 8000d58:	d116      	bne.n	8000d88 <HAL_RCC_OscConfig+0x64>
 8000d5a:	4bbd      	ldr	r3, [pc, #756]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	025b      	lsls	r3, r3, #9
 8000d62:	401a      	ands	r2, r3
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	025b      	lsls	r3, r3, #9
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d10d      	bne.n	8000d88 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d6c:	4bb8      	ldr	r3, [pc, #736]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	029b      	lsls	r3, r3, #10
 8000d74:	4013      	ands	r3, r2
 8000d76:	d100      	bne.n	8000d7a <HAL_RCC_OscConfig+0x56>
 8000d78:	e070      	b.n	8000e5c <HAL_RCC_OscConfig+0x138>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d000      	beq.n	8000d84 <HAL_RCC_OscConfig+0x60>
 8000d82:	e06b      	b.n	8000e5c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e2d8      	b.n	800133a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d107      	bne.n	8000da0 <HAL_RCC_OscConfig+0x7c>
 8000d90:	4baf      	ldr	r3, [pc, #700]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4bae      	ldr	r3, [pc, #696]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000d96:	2180      	movs	r1, #128	; 0x80
 8000d98:	0249      	lsls	r1, r1, #9
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	e02f      	b.n	8000e00 <HAL_RCC_OscConfig+0xdc>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d10c      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x9e>
 8000da8:	4ba9      	ldr	r3, [pc, #676]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4ba8      	ldr	r3, [pc, #672]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000dae:	49a9      	ldr	r1, [pc, #676]	; (8001054 <HAL_RCC_OscConfig+0x330>)
 8000db0:	400a      	ands	r2, r1
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	4ba6      	ldr	r3, [pc, #664]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4ba5      	ldr	r3, [pc, #660]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000dba:	49a7      	ldr	r1, [pc, #668]	; (8001058 <HAL_RCC_OscConfig+0x334>)
 8000dbc:	400a      	ands	r2, r1
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	e01e      	b.n	8000e00 <HAL_RCC_OscConfig+0xdc>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b05      	cmp	r3, #5
 8000dc8:	d10e      	bne.n	8000de8 <HAL_RCC_OscConfig+0xc4>
 8000dca:	4ba1      	ldr	r3, [pc, #644]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	4ba0      	ldr	r3, [pc, #640]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	02c9      	lsls	r1, r1, #11
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	4b9d      	ldr	r3, [pc, #628]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b9c      	ldr	r3, [pc, #624]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	0249      	lsls	r1, r1, #9
 8000de2:	430a      	orrs	r2, r1
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	e00b      	b.n	8000e00 <HAL_RCC_OscConfig+0xdc>
 8000de8:	4b99      	ldr	r3, [pc, #612]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b98      	ldr	r3, [pc, #608]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000dee:	4999      	ldr	r1, [pc, #612]	; (8001054 <HAL_RCC_OscConfig+0x330>)
 8000df0:	400a      	ands	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	4b96      	ldr	r3, [pc, #600]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b95      	ldr	r3, [pc, #596]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000dfa:	4997      	ldr	r1, [pc, #604]	; (8001058 <HAL_RCC_OscConfig+0x334>)
 8000dfc:	400a      	ands	r2, r1
 8000dfe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d014      	beq.n	8000e32 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e08:	f7ff fc5a 	bl	80006c0 <HAL_GetTick>
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e10:	e008      	b.n	8000e24 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e12:	f7ff fc55 	bl	80006c0 <HAL_GetTick>
 8000e16:	0002      	movs	r2, r0
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b64      	cmp	r3, #100	; 0x64
 8000e1e:	d901      	bls.n	8000e24 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e28a      	b.n	800133a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e24:	4b8a      	ldr	r3, [pc, #552]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	029b      	lsls	r3, r3, #10
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	d0f0      	beq.n	8000e12 <HAL_RCC_OscConfig+0xee>
 8000e30:	e015      	b.n	8000e5e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e32:	f7ff fc45 	bl	80006c0 <HAL_GetTick>
 8000e36:	0003      	movs	r3, r0
 8000e38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e3a:	e008      	b.n	8000e4e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e3c:	f7ff fc40 	bl	80006c0 <HAL_GetTick>
 8000e40:	0002      	movs	r2, r0
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b64      	cmp	r3, #100	; 0x64
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e275      	b.n	800133a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e4e:	4b80      	ldr	r3, [pc, #512]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	029b      	lsls	r3, r3, #10
 8000e56:	4013      	ands	r3, r2
 8000e58:	d1f0      	bne.n	8000e3c <HAL_RCC_OscConfig+0x118>
 8000e5a:	e000      	b.n	8000e5e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2202      	movs	r2, #2
 8000e64:	4013      	ands	r3, r2
 8000e66:	d100      	bne.n	8000e6a <HAL_RCC_OscConfig+0x146>
 8000e68:	e069      	b.n	8000f3e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e6a:	4b79      	ldr	r3, [pc, #484]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	220c      	movs	r2, #12
 8000e70:	4013      	ands	r3, r2
 8000e72:	d00b      	beq.n	8000e8c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e74:	4b76      	ldr	r3, [pc, #472]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	220c      	movs	r2, #12
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b08      	cmp	r3, #8
 8000e7e:	d11c      	bne.n	8000eba <HAL_RCC_OscConfig+0x196>
 8000e80:	4b73      	ldr	r3, [pc, #460]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	025b      	lsls	r3, r3, #9
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d116      	bne.n	8000eba <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e8c:	4b70      	ldr	r3, [pc, #448]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2202      	movs	r2, #2
 8000e92:	4013      	ands	r3, r2
 8000e94:	d005      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x17e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d001      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e24b      	b.n	800133a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea2:	4b6b      	ldr	r3, [pc, #428]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	22f8      	movs	r2, #248	; 0xf8
 8000ea8:	4393      	bics	r3, r2
 8000eaa:	0019      	movs	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	00da      	lsls	r2, r3, #3
 8000eb2:	4b67      	ldr	r3, [pc, #412]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb8:	e041      	b.n	8000f3e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d024      	beq.n	8000f0c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ec2:	4b63      	ldr	r3, [pc, #396]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b62      	ldr	r3, [pc, #392]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000ec8:	2101      	movs	r1, #1
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ece:	f7ff fbf7 	bl	80006c0 <HAL_GetTick>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ed8:	f7ff fbf2 	bl	80006c0 <HAL_GetTick>
 8000edc:	0002      	movs	r2, r0
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e227      	b.n	800133a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eea:	4b59      	ldr	r3, [pc, #356]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2202      	movs	r2, #2
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d0f1      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef4:	4b56      	ldr	r3, [pc, #344]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	22f8      	movs	r2, #248	; 0xf8
 8000efa:	4393      	bics	r3, r2
 8000efc:	0019      	movs	r1, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	00da      	lsls	r2, r3, #3
 8000f04:	4b52      	ldr	r3, [pc, #328]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000f06:	430a      	orrs	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	e018      	b.n	8000f3e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f0c:	4b50      	ldr	r3, [pc, #320]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b4f      	ldr	r3, [pc, #316]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000f12:	2101      	movs	r1, #1
 8000f14:	438a      	bics	r2, r1
 8000f16:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f18:	f7ff fbd2 	bl	80006c0 <HAL_GetTick>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f20:	e008      	b.n	8000f34 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f22:	f7ff fbcd 	bl	80006c0 <HAL_GetTick>
 8000f26:	0002      	movs	r2, r0
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e202      	b.n	800133a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f34:	4b46      	ldr	r3, [pc, #280]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2202      	movs	r2, #2
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	d1f1      	bne.n	8000f22 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2208      	movs	r2, #8
 8000f44:	4013      	ands	r3, r2
 8000f46:	d036      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d019      	beq.n	8000f84 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f50:	4b3f      	ldr	r3, [pc, #252]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f54:	4b3e      	ldr	r3, [pc, #248]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000f56:	2101      	movs	r1, #1
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f5c:	f7ff fbb0 	bl	80006c0 <HAL_GetTick>
 8000f60:	0003      	movs	r3, r0
 8000f62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f64:	e008      	b.n	8000f78 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f66:	f7ff fbab 	bl	80006c0 <HAL_GetTick>
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e1e0      	b.n	800133a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f78:	4b35      	ldr	r3, [pc, #212]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d0f1      	beq.n	8000f66 <HAL_RCC_OscConfig+0x242>
 8000f82:	e018      	b.n	8000fb6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f84:	4b32      	ldr	r3, [pc, #200]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f88:	4b31      	ldr	r3, [pc, #196]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	438a      	bics	r2, r1
 8000f8e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f90:	f7ff fb96 	bl	80006c0 <HAL_GetTick>
 8000f94:	0003      	movs	r3, r0
 8000f96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f98:	e008      	b.n	8000fac <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f9a:	f7ff fb91 	bl	80006c0 <HAL_GetTick>
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e1c6      	b.n	800133a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fac:	4b28      	ldr	r3, [pc, #160]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	d1f1      	bne.n	8000f9a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2204      	movs	r2, #4
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d100      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x29e>
 8000fc0:	e0b4      	b.n	800112c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fc2:	201f      	movs	r0, #31
 8000fc4:	183b      	adds	r3, r7, r0
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000fcc:	69da      	ldr	r2, [r3, #28]
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	055b      	lsls	r3, r3, #21
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d110      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000fd8:	69da      	ldr	r2, [r3, #28]
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000fdc:	2180      	movs	r1, #128	; 0x80
 8000fde:	0549      	lsls	r1, r1, #21
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	61da      	str	r2, [r3, #28]
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000fe6:	69da      	ldr	r2, [r3, #28]
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	055b      	lsls	r3, r3, #21
 8000fec:	4013      	ands	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ff2:	183b      	adds	r3, r7, r0
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <HAL_RCC_OscConfig+0x338>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4013      	ands	r3, r2
 8001002:	d11a      	bne.n	800103a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_RCC_OscConfig+0x338>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <HAL_RCC_OscConfig+0x338>)
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	0049      	lsls	r1, r1, #1
 800100e:	430a      	orrs	r2, r1
 8001010:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001012:	f7ff fb55 	bl	80006c0 <HAL_GetTick>
 8001016:	0003      	movs	r3, r0
 8001018:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800101c:	f7ff fb50 	bl	80006c0 <HAL_GetTick>
 8001020:	0002      	movs	r2, r0
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b64      	cmp	r3, #100	; 0x64
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e185      	b.n	800133a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <HAL_RCC_OscConfig+0x338>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	4013      	ands	r3, r2
 8001038:	d0f0      	beq.n	800101c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d10e      	bne.n	8001060 <HAL_RCC_OscConfig+0x33c>
 8001042:	4b03      	ldr	r3, [pc, #12]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8001044:	6a1a      	ldr	r2, [r3, #32]
 8001046:	4b02      	ldr	r3, [pc, #8]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8001048:	2101      	movs	r1, #1
 800104a:	430a      	orrs	r2, r1
 800104c:	621a      	str	r2, [r3, #32]
 800104e:	e035      	b.n	80010bc <HAL_RCC_OscConfig+0x398>
 8001050:	40021000 	.word	0x40021000
 8001054:	fffeffff 	.word	0xfffeffff
 8001058:	fffbffff 	.word	0xfffbffff
 800105c:	40007000 	.word	0x40007000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d10c      	bne.n	8001082 <HAL_RCC_OscConfig+0x35e>
 8001068:	4bb6      	ldr	r3, [pc, #728]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 800106a:	6a1a      	ldr	r2, [r3, #32]
 800106c:	4bb5      	ldr	r3, [pc, #724]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 800106e:	2101      	movs	r1, #1
 8001070:	438a      	bics	r2, r1
 8001072:	621a      	str	r2, [r3, #32]
 8001074:	4bb3      	ldr	r3, [pc, #716]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 8001076:	6a1a      	ldr	r2, [r3, #32]
 8001078:	4bb2      	ldr	r3, [pc, #712]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 800107a:	2104      	movs	r1, #4
 800107c:	438a      	bics	r2, r1
 800107e:	621a      	str	r2, [r3, #32]
 8001080:	e01c      	b.n	80010bc <HAL_RCC_OscConfig+0x398>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	2b05      	cmp	r3, #5
 8001088:	d10c      	bne.n	80010a4 <HAL_RCC_OscConfig+0x380>
 800108a:	4bae      	ldr	r3, [pc, #696]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 800108c:	6a1a      	ldr	r2, [r3, #32]
 800108e:	4bad      	ldr	r3, [pc, #692]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 8001090:	2104      	movs	r1, #4
 8001092:	430a      	orrs	r2, r1
 8001094:	621a      	str	r2, [r3, #32]
 8001096:	4bab      	ldr	r3, [pc, #684]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 8001098:	6a1a      	ldr	r2, [r3, #32]
 800109a:	4baa      	ldr	r3, [pc, #680]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 800109c:	2101      	movs	r1, #1
 800109e:	430a      	orrs	r2, r1
 80010a0:	621a      	str	r2, [r3, #32]
 80010a2:	e00b      	b.n	80010bc <HAL_RCC_OscConfig+0x398>
 80010a4:	4ba7      	ldr	r3, [pc, #668]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 80010a6:	6a1a      	ldr	r2, [r3, #32]
 80010a8:	4ba6      	ldr	r3, [pc, #664]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	438a      	bics	r2, r1
 80010ae:	621a      	str	r2, [r3, #32]
 80010b0:	4ba4      	ldr	r3, [pc, #656]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 80010b2:	6a1a      	ldr	r2, [r3, #32]
 80010b4:	4ba3      	ldr	r3, [pc, #652]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 80010b6:	2104      	movs	r1, #4
 80010b8:	438a      	bics	r2, r1
 80010ba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d014      	beq.n	80010ee <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c4:	f7ff fafc 	bl	80006c0 <HAL_GetTick>
 80010c8:	0003      	movs	r3, r0
 80010ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010cc:	e009      	b.n	80010e2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ce:	f7ff faf7 	bl	80006c0 <HAL_GetTick>
 80010d2:	0002      	movs	r2, r0
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	4a9b      	ldr	r2, [pc, #620]	; (8001348 <HAL_RCC_OscConfig+0x624>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e12b      	b.n	800133a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e2:	4b98      	ldr	r3, [pc, #608]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	2202      	movs	r2, #2
 80010e8:	4013      	ands	r3, r2
 80010ea:	d0f0      	beq.n	80010ce <HAL_RCC_OscConfig+0x3aa>
 80010ec:	e013      	b.n	8001116 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ee:	f7ff fae7 	bl	80006c0 <HAL_GetTick>
 80010f2:	0003      	movs	r3, r0
 80010f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f6:	e009      	b.n	800110c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010f8:	f7ff fae2 	bl	80006c0 <HAL_GetTick>
 80010fc:	0002      	movs	r2, r0
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	4a91      	ldr	r2, [pc, #580]	; (8001348 <HAL_RCC_OscConfig+0x624>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e116      	b.n	800133a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800110c:	4b8d      	ldr	r3, [pc, #564]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	2202      	movs	r2, #2
 8001112:	4013      	ands	r3, r2
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001116:	231f      	movs	r3, #31
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d105      	bne.n	800112c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001120:	4b88      	ldr	r3, [pc, #544]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 8001122:	69da      	ldr	r2, [r3, #28]
 8001124:	4b87      	ldr	r3, [pc, #540]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 8001126:	4989      	ldr	r1, [pc, #548]	; (800134c <HAL_RCC_OscConfig+0x628>)
 8001128:	400a      	ands	r2, r1
 800112a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2210      	movs	r2, #16
 8001132:	4013      	ands	r3, r2
 8001134:	d063      	beq.n	80011fe <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d12a      	bne.n	8001194 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800113e:	4b81      	ldr	r3, [pc, #516]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 8001140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001142:	4b80      	ldr	r3, [pc, #512]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 8001144:	2104      	movs	r1, #4
 8001146:	430a      	orrs	r2, r1
 8001148:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800114a:	4b7e      	ldr	r3, [pc, #504]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 800114c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800114e:	4b7d      	ldr	r3, [pc, #500]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 8001150:	2101      	movs	r1, #1
 8001152:	430a      	orrs	r2, r1
 8001154:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001156:	f7ff fab3 	bl	80006c0 <HAL_GetTick>
 800115a:	0003      	movs	r3, r0
 800115c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001160:	f7ff faae 	bl	80006c0 <HAL_GetTick>
 8001164:	0002      	movs	r2, r0
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e0e3      	b.n	800133a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001172:	4b74      	ldr	r3, [pc, #464]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 8001174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001176:	2202      	movs	r2, #2
 8001178:	4013      	ands	r3, r2
 800117a:	d0f1      	beq.n	8001160 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800117c:	4b71      	ldr	r3, [pc, #452]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 800117e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001180:	22f8      	movs	r2, #248	; 0xf8
 8001182:	4393      	bics	r3, r2
 8001184:	0019      	movs	r1, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	00da      	lsls	r2, r3, #3
 800118c:	4b6d      	ldr	r3, [pc, #436]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 800118e:	430a      	orrs	r2, r1
 8001190:	635a      	str	r2, [r3, #52]	; 0x34
 8001192:	e034      	b.n	80011fe <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	3305      	adds	r3, #5
 800119a:	d111      	bne.n	80011c0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800119c:	4b69      	ldr	r3, [pc, #420]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 800119e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011a0:	4b68      	ldr	r3, [pc, #416]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 80011a2:	2104      	movs	r1, #4
 80011a4:	438a      	bics	r2, r1
 80011a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011a8:	4b66      	ldr	r3, [pc, #408]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 80011aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ac:	22f8      	movs	r2, #248	; 0xf8
 80011ae:	4393      	bics	r3, r2
 80011b0:	0019      	movs	r1, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	00da      	lsls	r2, r3, #3
 80011b8:	4b62      	ldr	r3, [pc, #392]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 80011ba:	430a      	orrs	r2, r1
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34
 80011be:	e01e      	b.n	80011fe <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011c0:	4b60      	ldr	r3, [pc, #384]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 80011c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011c4:	4b5f      	ldr	r3, [pc, #380]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 80011c6:	2104      	movs	r1, #4
 80011c8:	430a      	orrs	r2, r1
 80011ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80011cc:	4b5d      	ldr	r3, [pc, #372]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 80011ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011d0:	4b5c      	ldr	r3, [pc, #368]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 80011d2:	2101      	movs	r1, #1
 80011d4:	438a      	bics	r2, r1
 80011d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d8:	f7ff fa72 	bl	80006c0 <HAL_GetTick>
 80011dc:	0003      	movs	r3, r0
 80011de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011e2:	f7ff fa6d 	bl	80006c0 <HAL_GetTick>
 80011e6:	0002      	movs	r2, r0
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e0a2      	b.n	800133a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011f4:	4b53      	ldr	r3, [pc, #332]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 80011f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f8:	2202      	movs	r2, #2
 80011fa:	4013      	ands	r3, r2
 80011fc:	d1f1      	bne.n	80011e2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d100      	bne.n	8001208 <HAL_RCC_OscConfig+0x4e4>
 8001206:	e097      	b.n	8001338 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001208:	4b4e      	ldr	r3, [pc, #312]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	220c      	movs	r2, #12
 800120e:	4013      	ands	r3, r2
 8001210:	2b08      	cmp	r3, #8
 8001212:	d100      	bne.n	8001216 <HAL_RCC_OscConfig+0x4f2>
 8001214:	e06b      	b.n	80012ee <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d14c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800121e:	4b49      	ldr	r3, [pc, #292]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b48      	ldr	r3, [pc, #288]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 8001224:	494a      	ldr	r1, [pc, #296]	; (8001350 <HAL_RCC_OscConfig+0x62c>)
 8001226:	400a      	ands	r2, r1
 8001228:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122a:	f7ff fa49 	bl	80006c0 <HAL_GetTick>
 800122e:	0003      	movs	r3, r0
 8001230:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001234:	f7ff fa44 	bl	80006c0 <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e079      	b.n	800133a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001246:	4b3f      	ldr	r3, [pc, #252]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	049b      	lsls	r3, r3, #18
 800124e:	4013      	ands	r3, r2
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001252:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 8001254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001256:	220f      	movs	r2, #15
 8001258:	4393      	bics	r3, r2
 800125a:	0019      	movs	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001260:	4b38      	ldr	r3, [pc, #224]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 8001262:	430a      	orrs	r2, r1
 8001264:	62da      	str	r2, [r3, #44]	; 0x2c
 8001266:	4b37      	ldr	r3, [pc, #220]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4a3a      	ldr	r2, [pc, #232]	; (8001354 <HAL_RCC_OscConfig+0x630>)
 800126c:	4013      	ands	r3, r2
 800126e:	0019      	movs	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	431a      	orrs	r2, r3
 800127a:	4b32      	ldr	r3, [pc, #200]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 800127c:	430a      	orrs	r2, r1
 800127e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001280:	4b30      	ldr	r3, [pc, #192]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 8001286:	2180      	movs	r1, #128	; 0x80
 8001288:	0449      	lsls	r1, r1, #17
 800128a:	430a      	orrs	r2, r1
 800128c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128e:	f7ff fa17 	bl	80006c0 <HAL_GetTick>
 8001292:	0003      	movs	r3, r0
 8001294:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001298:	f7ff fa12 	bl	80006c0 <HAL_GetTick>
 800129c:	0002      	movs	r2, r0
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e047      	b.n	800133a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012aa:	4b26      	ldr	r3, [pc, #152]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	049b      	lsls	r3, r3, #18
 80012b2:	4013      	ands	r3, r2
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0x574>
 80012b6:	e03f      	b.n	8001338 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 80012be:	4924      	ldr	r1, [pc, #144]	; (8001350 <HAL_RCC_OscConfig+0x62c>)
 80012c0:	400a      	ands	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff f9fc 	bl	80006c0 <HAL_GetTick>
 80012c8:	0003      	movs	r3, r0
 80012ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ce:	f7ff f9f7 	bl	80006c0 <HAL_GetTick>
 80012d2:	0002      	movs	r2, r0
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e02c      	b.n	800133a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	049b      	lsls	r3, r3, #18
 80012e8:	4013      	ands	r3, r2
 80012ea:	d1f0      	bne.n	80012ce <HAL_RCC_OscConfig+0x5aa>
 80012ec:	e024      	b.n	8001338 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e01f      	b.n	800133a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001300:	4b10      	ldr	r3, [pc, #64]	; (8001344 <HAL_RCC_OscConfig+0x620>)
 8001302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001304:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	025b      	lsls	r3, r3, #9
 800130c:	401a      	ands	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	429a      	cmp	r2, r3
 8001314:	d10e      	bne.n	8001334 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	220f      	movs	r2, #15
 800131a:	401a      	ands	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001320:	429a      	cmp	r2, r3
 8001322:	d107      	bne.n	8001334 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	23f0      	movs	r3, #240	; 0xf0
 8001328:	039b      	lsls	r3, r3, #14
 800132a:	401a      	ands	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001330:	429a      	cmp	r2, r3
 8001332:	d001      	beq.n	8001338 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	0018      	movs	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	b008      	add	sp, #32
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	40021000 	.word	0x40021000
 8001348:	00001388 	.word	0x00001388
 800134c:	efffffff 	.word	0xefffffff
 8001350:	feffffff 	.word	0xfeffffff
 8001354:	ffc2ffff 	.word	0xffc2ffff

08001358 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e0b3      	b.n	80014d4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800136c:	4b5b      	ldr	r3, [pc, #364]	; (80014dc <HAL_RCC_ClockConfig+0x184>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2201      	movs	r2, #1
 8001372:	4013      	ands	r3, r2
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d911      	bls.n	800139e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137a:	4b58      	ldr	r3, [pc, #352]	; (80014dc <HAL_RCC_ClockConfig+0x184>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2201      	movs	r2, #1
 8001380:	4393      	bics	r3, r2
 8001382:	0019      	movs	r1, r3
 8001384:	4b55      	ldr	r3, [pc, #340]	; (80014dc <HAL_RCC_ClockConfig+0x184>)
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	430a      	orrs	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800138c:	4b53      	ldr	r3, [pc, #332]	; (80014dc <HAL_RCC_ClockConfig+0x184>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2201      	movs	r2, #1
 8001392:	4013      	ands	r3, r2
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d001      	beq.n	800139e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e09a      	b.n	80014d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2202      	movs	r2, #2
 80013a4:	4013      	ands	r3, r2
 80013a6:	d015      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2204      	movs	r2, #4
 80013ae:	4013      	ands	r3, r2
 80013b0:	d006      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013b2:	4b4b      	ldr	r3, [pc, #300]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	4b4a      	ldr	r3, [pc, #296]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 80013b8:	21e0      	movs	r1, #224	; 0xe0
 80013ba:	00c9      	lsls	r1, r1, #3
 80013bc:	430a      	orrs	r2, r1
 80013be:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c0:	4b47      	ldr	r3, [pc, #284]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	22f0      	movs	r2, #240	; 0xf0
 80013c6:	4393      	bics	r3, r2
 80013c8:	0019      	movs	r1, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	4b44      	ldr	r3, [pc, #272]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 80013d0:	430a      	orrs	r2, r1
 80013d2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2201      	movs	r2, #1
 80013da:	4013      	ands	r3, r2
 80013dc:	d040      	beq.n	8001460 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d107      	bne.n	80013f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	029b      	lsls	r3, r3, #10
 80013ee:	4013      	ands	r3, r2
 80013f0:	d114      	bne.n	800141c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e06e      	b.n	80014d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d107      	bne.n	800140e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	049b      	lsls	r3, r3, #18
 8001406:	4013      	ands	r3, r2
 8001408:	d108      	bne.n	800141c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e062      	b.n	80014d4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140e:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2202      	movs	r2, #2
 8001414:	4013      	ands	r3, r2
 8001416:	d101      	bne.n	800141c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e05b      	b.n	80014d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800141c:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2203      	movs	r2, #3
 8001422:	4393      	bics	r3, r2
 8001424:	0019      	movs	r1, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 800142c:	430a      	orrs	r2, r1
 800142e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001430:	f7ff f946 	bl	80006c0 <HAL_GetTick>
 8001434:	0003      	movs	r3, r0
 8001436:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001438:	e009      	b.n	800144e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800143a:	f7ff f941 	bl	80006c0 <HAL_GetTick>
 800143e:	0002      	movs	r2, r0
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <HAL_RCC_ClockConfig+0x18c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e042      	b.n	80014d4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144e:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	220c      	movs	r2, #12
 8001454:	401a      	ands	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	429a      	cmp	r2, r3
 800145e:	d1ec      	bne.n	800143a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <HAL_RCC_ClockConfig+0x184>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2201      	movs	r2, #1
 8001466:	4013      	ands	r3, r2
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d211      	bcs.n	8001492 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <HAL_RCC_ClockConfig+0x184>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2201      	movs	r2, #1
 8001474:	4393      	bics	r3, r2
 8001476:	0019      	movs	r1, r3
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_RCC_ClockConfig+0x184>)
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HAL_RCC_ClockConfig+0x184>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2201      	movs	r2, #1
 8001486:	4013      	ands	r3, r2
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	d001      	beq.n	8001492 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e020      	b.n	80014d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2204      	movs	r2, #4
 8001498:	4013      	ands	r3, r2
 800149a:	d009      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	4a11      	ldr	r2, [pc, #68]	; (80014e8 <HAL_RCC_ClockConfig+0x190>)
 80014a2:	4013      	ands	r3, r2
 80014a4:	0019      	movs	r1, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 80014ac:	430a      	orrs	r2, r1
 80014ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80014b0:	f000 f820 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 80014b4:	0001      	movs	r1, r0
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_RCC_ClockConfig+0x188>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	220f      	movs	r2, #15
 80014be:	4013      	ands	r3, r2
 80014c0:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_RCC_ClockConfig+0x194>)
 80014c2:	5cd3      	ldrb	r3, [r2, r3]
 80014c4:	000a      	movs	r2, r1
 80014c6:	40da      	lsrs	r2, r3
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_RCC_ClockConfig+0x198>)
 80014ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff f8b1 	bl	8000634 <HAL_InitTick>
  
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	0018      	movs	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	b004      	add	sp, #16
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40022000 	.word	0x40022000
 80014e0:	40021000 	.word	0x40021000
 80014e4:	00001388 	.word	0x00001388
 80014e8:	fffff8ff 	.word	0xfffff8ff
 80014ec:	080026e8 	.word	0x080026e8
 80014f0:	20000000 	.word	0x20000000

080014f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b08f      	sub	sp, #60	; 0x3c
 80014f8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80014fa:	2314      	movs	r3, #20
 80014fc:	18fb      	adds	r3, r7, r3
 80014fe:	4a2b      	ldr	r2, [pc, #172]	; (80015ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001500:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001502:	c313      	stmia	r3!, {r0, r1, r4}
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	4a29      	ldr	r2, [pc, #164]	; (80015b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800150c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800150e:	c313      	stmia	r3!, {r0, r1, r4}
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001518:	2300      	movs	r3, #0
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
 800151c:	2300      	movs	r3, #0
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001524:	2300      	movs	r3, #0
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001528:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001530:	220c      	movs	r2, #12
 8001532:	4013      	ands	r3, r2
 8001534:	2b04      	cmp	r3, #4
 8001536:	d002      	beq.n	800153e <HAL_RCC_GetSysClockFreq+0x4a>
 8001538:	2b08      	cmp	r3, #8
 800153a:	d003      	beq.n	8001544 <HAL_RCC_GetSysClockFreq+0x50>
 800153c:	e02d      	b.n	800159a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800153e:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001542:	e02d      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001546:	0c9b      	lsrs	r3, r3, #18
 8001548:	220f      	movs	r2, #15
 800154a:	4013      	ands	r3, r2
 800154c:	2214      	movs	r2, #20
 800154e:	18ba      	adds	r2, r7, r2
 8001550:	5cd3      	ldrb	r3, [r2, r3]
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	220f      	movs	r2, #15
 800155a:	4013      	ands	r3, r2
 800155c:	1d3a      	adds	r2, r7, #4
 800155e:	5cd3      	ldrb	r3, [r2, r3]
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	025b      	lsls	r3, r3, #9
 8001568:	4013      	ands	r3, r2
 800156a:	d009      	beq.n	8001580 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800156c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800156e:	4812      	ldr	r0, [pc, #72]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001570:	f7fe fdd2 	bl	8000118 <__udivsi3>
 8001574:	0003      	movs	r3, r0
 8001576:	001a      	movs	r2, r3
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	4353      	muls	r3, r2
 800157c:	637b      	str	r3, [r7, #52]	; 0x34
 800157e:	e009      	b.n	8001594 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001582:	000a      	movs	r2, r1
 8001584:	0152      	lsls	r2, r2, #5
 8001586:	1a52      	subs	r2, r2, r1
 8001588:	0193      	lsls	r3, r2, #6
 800158a:	1a9b      	subs	r3, r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	185b      	adds	r3, r3, r1
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001598:	e002      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800159c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800159e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80015a2:	0018      	movs	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b00f      	add	sp, #60	; 0x3c
 80015a8:	bd90      	pop	{r4, r7, pc}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	080026c8 	.word	0x080026c8
 80015b0:	080026d8 	.word	0x080026d8
 80015b4:	40021000 	.word	0x40021000
 80015b8:	007a1200 	.word	0x007a1200

080015bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015c0:	4b02      	ldr	r3, [pc, #8]	; (80015cc <HAL_RCC_GetHCLKFreq+0x10>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	0018      	movs	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	20000000 	.word	0x20000000

080015d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80015d4:	f7ff fff2 	bl	80015bc <HAL_RCC_GetHCLKFreq>
 80015d8:	0001      	movs	r1, r0
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	0a1b      	lsrs	r3, r3, #8
 80015e0:	2207      	movs	r2, #7
 80015e2:	4013      	ands	r3, r2
 80015e4:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80015e6:	5cd3      	ldrb	r3, [r2, r3]
 80015e8:	40d9      	lsrs	r1, r3
 80015ea:	000b      	movs	r3, r1
}    
 80015ec:	0018      	movs	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	40021000 	.word	0x40021000
 80015f8:	080026f8 	.word	0x080026f8

080015fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e044      	b.n	8001698 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001612:	2b00      	cmp	r3, #0
 8001614:	d107      	bne.n	8001626 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2274      	movs	r2, #116	; 0x74
 800161a:	2100      	movs	r1, #0
 800161c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	0018      	movs	r0, r3
 8001622:	f7fe ff4b 	bl	80004bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2224      	movs	r2, #36	; 0x24
 800162a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2101      	movs	r1, #1
 8001638:	438a      	bics	r2, r1
 800163a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	0018      	movs	r0, r3
 8001640:	f000 fb9c 	bl	8001d7c <UART_SetConfig>
 8001644:	0003      	movs	r3, r0
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e024      	b.n	8001698 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	0018      	movs	r0, r3
 800165a:	f000 fccf 	bl	8001ffc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	490d      	ldr	r1, [pc, #52]	; (80016a0 <HAL_UART_Init+0xa4>)
 800166a:	400a      	ands	r2, r1
 800166c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	212a      	movs	r1, #42	; 0x2a
 800167a:	438a      	bics	r2, r1
 800167c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	430a      	orrs	r2, r1
 800168c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	0018      	movs	r0, r3
 8001692:	f000 fd67 	bl	8002164 <UART_CheckIdleState>
 8001696:	0003      	movs	r3, r0
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b002      	add	sp, #8
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	ffffb7ff 	.word	0xffffb7ff

080016a4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	1dbb      	adds	r3, r7, #6
 80016b0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80016b6:	2b20      	cmp	r3, #32
 80016b8:	d000      	beq.n	80016bc <HAL_UART_Transmit_IT+0x18>
 80016ba:	e06a      	b.n	8001792 <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_UART_Transmit_IT+0x26>
 80016c2:	1dbb      	adds	r3, r7, #6
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e062      	b.n	8001794 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	015b      	lsls	r3, r3, #5
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d109      	bne.n	80016ee <HAL_UART_Transmit_IT+0x4a>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d105      	bne.n	80016ee <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	2201      	movs	r2, #1
 80016e6:	4013      	ands	r3, r2
 80016e8:	d001      	beq.n	80016ee <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e052      	b.n	8001794 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2274      	movs	r2, #116	; 0x74
 80016f2:	5c9b      	ldrb	r3, [r3, r2]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <HAL_UART_Transmit_IT+0x58>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e04b      	b.n	8001794 <HAL_UART_Transmit_IT+0xf0>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2274      	movs	r2, #116	; 0x74
 8001700:	2101      	movs	r1, #1
 8001702:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1dba      	adds	r2, r7, #6
 800170e:	2150      	movs	r1, #80	; 0x50
 8001710:	8812      	ldrh	r2, [r2, #0]
 8001712:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	1dba      	adds	r2, r7, #6
 8001718:	2152      	movs	r1, #82	; 0x52
 800171a:	8812      	ldrh	r2, [r2, #0]
 800171c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2280      	movs	r2, #128	; 0x80
 8001728:	2100      	movs	r1, #0
 800172a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2221      	movs	r2, #33	; 0x21
 8001730:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	015b      	lsls	r3, r3, #5
 800173a:	429a      	cmp	r2, r3
 800173c:	d107      	bne.n	800174e <HAL_UART_Transmit_IT+0xaa>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d103      	bne.n	800174e <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4a14      	ldr	r2, [pc, #80]	; (800179c <HAL_UART_Transmit_IT+0xf8>)
 800174a:	669a      	str	r2, [r3, #104]	; 0x68
 800174c:	e002      	b.n	8001754 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <HAL_UART_Transmit_IT+0xfc>)
 8001752:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2274      	movs	r2, #116	; 0x74
 8001758:	2100      	movs	r1, #0
 800175a:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800175c:	f3ef 8310 	mrs	r3, PRIMASK
 8001760:	613b      	str	r3, [r7, #16]
  return(result);
 8001762:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001764:	61fb      	str	r3, [r7, #28]
 8001766:	2301      	movs	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f383 8810 	msr	PRIMASK, r3
}
 8001770:	46c0      	nop			; (mov r8, r8)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2180      	movs	r1, #128	; 0x80
 800177e:	430a      	orrs	r2, r1
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	f383 8810 	msr	PRIMASK, r3
}
 800178c:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e000      	b.n	8001794 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8001792:	2302      	movs	r3, #2
  }
}
 8001794:	0018      	movs	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	b008      	add	sp, #32
 800179a:	bd80      	pop	{r7, pc}
 800179c:	08002523 	.word	0x08002523
 80017a0:	0800246f 	.word	0x0800246f

080017a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b0ab      	sub	sp, #172	; 0xac
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	22a4      	movs	r2, #164	; 0xa4
 80017b4:	18b9      	adds	r1, r7, r2
 80017b6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	20a0      	movs	r0, #160	; 0xa0
 80017c0:	1839      	adds	r1, r7, r0
 80017c2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	219c      	movs	r1, #156	; 0x9c
 80017cc:	1879      	adds	r1, r7, r1
 80017ce:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80017d0:	0011      	movs	r1, r2
 80017d2:	18bb      	adds	r3, r7, r2
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a99      	ldr	r2, [pc, #612]	; (8001a3c <HAL_UART_IRQHandler+0x298>)
 80017d8:	4013      	ands	r3, r2
 80017da:	2298      	movs	r2, #152	; 0x98
 80017dc:	18bc      	adds	r4, r7, r2
 80017de:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80017e0:	18bb      	adds	r3, r7, r2
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d114      	bne.n	8001812 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80017e8:	187b      	adds	r3, r7, r1
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2220      	movs	r2, #32
 80017ee:	4013      	ands	r3, r2
 80017f0:	d00f      	beq.n	8001812 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80017f2:	183b      	adds	r3, r7, r0
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2220      	movs	r2, #32
 80017f8:	4013      	ands	r3, r2
 80017fa:	d00a      	beq.n	8001812 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001800:	2b00      	cmp	r3, #0
 8001802:	d100      	bne.n	8001806 <HAL_UART_IRQHandler+0x62>
 8001804:	e296      	b.n	8001d34 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	0010      	movs	r0, r2
 800180e:	4798      	blx	r3
      }
      return;
 8001810:	e290      	b.n	8001d34 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001812:	2398      	movs	r3, #152	; 0x98
 8001814:	18fb      	adds	r3, r7, r3
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d100      	bne.n	800181e <HAL_UART_IRQHandler+0x7a>
 800181c:	e114      	b.n	8001a48 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800181e:	239c      	movs	r3, #156	; 0x9c
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2201      	movs	r2, #1
 8001826:	4013      	ands	r3, r2
 8001828:	d106      	bne.n	8001838 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800182a:	23a0      	movs	r3, #160	; 0xa0
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a83      	ldr	r2, [pc, #524]	; (8001a40 <HAL_UART_IRQHandler+0x29c>)
 8001832:	4013      	ands	r3, r2
 8001834:	d100      	bne.n	8001838 <HAL_UART_IRQHandler+0x94>
 8001836:	e107      	b.n	8001a48 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001838:	23a4      	movs	r3, #164	; 0xa4
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2201      	movs	r2, #1
 8001840:	4013      	ands	r3, r2
 8001842:	d012      	beq.n	800186a <HAL_UART_IRQHandler+0xc6>
 8001844:	23a0      	movs	r3, #160	; 0xa0
 8001846:	18fb      	adds	r3, r7, r3
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4013      	ands	r3, r2
 8001850:	d00b      	beq.n	800186a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2201      	movs	r2, #1
 8001858:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2280      	movs	r2, #128	; 0x80
 800185e:	589b      	ldr	r3, [r3, r2]
 8001860:	2201      	movs	r2, #1
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800186a:	23a4      	movs	r3, #164	; 0xa4
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2202      	movs	r2, #2
 8001872:	4013      	ands	r3, r2
 8001874:	d011      	beq.n	800189a <HAL_UART_IRQHandler+0xf6>
 8001876:	239c      	movs	r3, #156	; 0x9c
 8001878:	18fb      	adds	r3, r7, r3
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2201      	movs	r2, #1
 800187e:	4013      	ands	r3, r2
 8001880:	d00b      	beq.n	800189a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2202      	movs	r2, #2
 8001888:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2280      	movs	r2, #128	; 0x80
 800188e:	589b      	ldr	r3, [r3, r2]
 8001890:	2204      	movs	r2, #4
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800189a:	23a4      	movs	r3, #164	; 0xa4
 800189c:	18fb      	adds	r3, r7, r3
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2204      	movs	r2, #4
 80018a2:	4013      	ands	r3, r2
 80018a4:	d011      	beq.n	80018ca <HAL_UART_IRQHandler+0x126>
 80018a6:	239c      	movs	r3, #156	; 0x9c
 80018a8:	18fb      	adds	r3, r7, r3
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2201      	movs	r2, #1
 80018ae:	4013      	ands	r3, r2
 80018b0:	d00b      	beq.n	80018ca <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2204      	movs	r2, #4
 80018b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2280      	movs	r2, #128	; 0x80
 80018be:	589b      	ldr	r3, [r3, r2]
 80018c0:	2202      	movs	r2, #2
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2180      	movs	r1, #128	; 0x80
 80018c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80018ca:	23a4      	movs	r3, #164	; 0xa4
 80018cc:	18fb      	adds	r3, r7, r3
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2208      	movs	r2, #8
 80018d2:	4013      	ands	r3, r2
 80018d4:	d017      	beq.n	8001906 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80018d6:	23a0      	movs	r3, #160	; 0xa0
 80018d8:	18fb      	adds	r3, r7, r3
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2220      	movs	r2, #32
 80018de:	4013      	ands	r3, r2
 80018e0:	d105      	bne.n	80018ee <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80018e2:	239c      	movs	r3, #156	; 0x9c
 80018e4:	18fb      	adds	r3, r7, r3
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2201      	movs	r2, #1
 80018ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80018ec:	d00b      	beq.n	8001906 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2208      	movs	r2, #8
 80018f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2280      	movs	r2, #128	; 0x80
 80018fa:	589b      	ldr	r3, [r3, r2]
 80018fc:	2208      	movs	r2, #8
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2180      	movs	r1, #128	; 0x80
 8001904:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001906:	23a4      	movs	r3, #164	; 0xa4
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	4013      	ands	r3, r2
 8001912:	d013      	beq.n	800193c <HAL_UART_IRQHandler+0x198>
 8001914:	23a0      	movs	r3, #160	; 0xa0
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	04db      	lsls	r3, r3, #19
 800191e:	4013      	ands	r3, r2
 8001920:	d00c      	beq.n	800193c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	589b      	ldr	r3, [r3, r2]
 8001932:	2220      	movs	r2, #32
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2280      	movs	r2, #128	; 0x80
 8001940:	589b      	ldr	r3, [r3, r2]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d100      	bne.n	8001948 <HAL_UART_IRQHandler+0x1a4>
 8001946:	e1f7      	b.n	8001d38 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001948:	23a4      	movs	r3, #164	; 0xa4
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2220      	movs	r2, #32
 8001950:	4013      	ands	r3, r2
 8001952:	d00e      	beq.n	8001972 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001954:	23a0      	movs	r3, #160	; 0xa0
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2220      	movs	r2, #32
 800195c:	4013      	ands	r3, r2
 800195e:	d008      	beq.n	8001972 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001964:	2b00      	cmp	r3, #0
 8001966:	d004      	beq.n	8001972 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	0010      	movs	r0, r2
 8001970:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2280      	movs	r2, #128	; 0x80
 8001976:	589b      	ldr	r3, [r3, r2]
 8001978:	2194      	movs	r1, #148	; 0x94
 800197a:	187a      	adds	r2, r7, r1
 800197c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2240      	movs	r2, #64	; 0x40
 8001986:	4013      	ands	r3, r2
 8001988:	2b40      	cmp	r3, #64	; 0x40
 800198a:	d004      	beq.n	8001996 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800198c:	187b      	adds	r3, r7, r1
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2228      	movs	r2, #40	; 0x28
 8001992:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001994:	d047      	beq.n	8001a26 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	0018      	movs	r0, r3
 800199a:	f000 fcef 	bl	800237c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2240      	movs	r2, #64	; 0x40
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b40      	cmp	r3, #64	; 0x40
 80019aa:	d137      	bne.n	8001a1c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019ac:	f3ef 8310 	mrs	r3, PRIMASK
 80019b0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80019b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80019b4:	2090      	movs	r0, #144	; 0x90
 80019b6:	183a      	adds	r2, r7, r0
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	2301      	movs	r3, #1
 80019bc:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019c0:	f383 8810 	msr	PRIMASK, r3
}
 80019c4:	46c0      	nop			; (mov r8, r8)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2140      	movs	r1, #64	; 0x40
 80019d2:	438a      	bics	r2, r1
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	183b      	adds	r3, r7, r0
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019de:	f383 8810 	msr	PRIMASK, r3
}
 80019e2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d012      	beq.n	8001a12 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <HAL_UART_IRQHandler+0x2a0>)
 80019f2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	0018      	movs	r0, r3
 80019fa:	f7fe ffa5 	bl	8000948 <HAL_DMA_Abort_IT>
 80019fe:	1e03      	subs	r3, r0, #0
 8001a00:	d01a      	beq.n	8001a38 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a10:	e012      	b.n	8001a38 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	0018      	movs	r0, r3
 8001a16:	f000 f99d 	bl	8001d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a1a:	e00d      	b.n	8001a38 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f000 f998 	bl	8001d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a24:	e008      	b.n	8001a38 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f000 f993 	bl	8001d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	2100      	movs	r1, #0
 8001a34:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001a36:	e17f      	b.n	8001d38 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a38:	46c0      	nop			; (mov r8, r8)
    return;
 8001a3a:	e17d      	b.n	8001d38 <HAL_UART_IRQHandler+0x594>
 8001a3c:	0000080f 	.word	0x0000080f
 8001a40:	04000120 	.word	0x04000120
 8001a44:	08002441 	.word	0x08002441

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d000      	beq.n	8001a52 <HAL_UART_IRQHandler+0x2ae>
 8001a50:	e131      	b.n	8001cb6 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001a52:	23a4      	movs	r3, #164	; 0xa4
 8001a54:	18fb      	adds	r3, r7, r3
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2210      	movs	r2, #16
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d100      	bne.n	8001a60 <HAL_UART_IRQHandler+0x2bc>
 8001a5e:	e12a      	b.n	8001cb6 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001a60:	23a0      	movs	r3, #160	; 0xa0
 8001a62:	18fb      	adds	r3, r7, r3
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2210      	movs	r2, #16
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d100      	bne.n	8001a6e <HAL_UART_IRQHandler+0x2ca>
 8001a6c:	e123      	b.n	8001cb6 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2210      	movs	r2, #16
 8001a74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2240      	movs	r2, #64	; 0x40
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b40      	cmp	r3, #64	; 0x40
 8001a82:	d000      	beq.n	8001a86 <HAL_UART_IRQHandler+0x2e2>
 8001a84:	e09b      	b.n	8001bbe <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	217e      	movs	r1, #126	; 0x7e
 8001a90:	187b      	adds	r3, r7, r1
 8001a92:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001a94:	187b      	adds	r3, r7, r1
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d100      	bne.n	8001a9e <HAL_UART_IRQHandler+0x2fa>
 8001a9c:	e14e      	b.n	8001d3c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2258      	movs	r2, #88	; 0x58
 8001aa2:	5a9b      	ldrh	r3, [r3, r2]
 8001aa4:	187a      	adds	r2, r7, r1
 8001aa6:	8812      	ldrh	r2, [r2, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d300      	bcc.n	8001aae <HAL_UART_IRQHandler+0x30a>
 8001aac:	e146      	b.n	8001d3c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	187a      	adds	r2, r7, r1
 8001ab2:	215a      	movs	r1, #90	; 0x5a
 8001ab4:	8812      	ldrh	r2, [r2, #0]
 8001ab6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	2b20      	cmp	r3, #32
 8001ac0:	d06e      	beq.n	8001ba0 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8001ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001aca:	67bb      	str	r3, [r7, #120]	; 0x78
 8001acc:	2301      	movs	r3, #1
 8001ace:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad2:	f383 8810 	msr	PRIMASK, r3
}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	499a      	ldr	r1, [pc, #616]	; (8001d4c <HAL_UART_IRQHandler+0x5a8>)
 8001ae4:	400a      	ands	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aee:	f383 8810 	msr	PRIMASK, r3
}
 8001af2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001af4:	f3ef 8310 	mrs	r3, PRIMASK
 8001af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001afc:	677b      	str	r3, [r7, #116]	; 0x74
 8001afe:	2301      	movs	r3, #1
 8001b00:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b04:	f383 8810 	msr	PRIMASK, r3
}
 8001b08:	46c0      	nop			; (mov r8, r8)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2101      	movs	r1, #1
 8001b16:	438a      	bics	r2, r1
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b1c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b20:	f383 8810 	msr	PRIMASK, r3
}
 8001b24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b26:	f3ef 8310 	mrs	r3, PRIMASK
 8001b2a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b2e:	673b      	str	r3, [r7, #112]	; 0x70
 8001b30:	2301      	movs	r3, #1
 8001b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b36:	f383 8810 	msr	PRIMASK, r3
}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2140      	movs	r1, #64	; 0x40
 8001b48:	438a      	bics	r2, r1
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b4e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b52:	f383 8810 	msr	PRIMASK, r3
}
 8001b56:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b64:	f3ef 8310 	mrs	r3, PRIMASK
 8001b68:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8001b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001b6e:	2301      	movs	r3, #1
 8001b70:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b74:	f383 8810 	msr	PRIMASK, r3
}
 8001b78:	46c0      	nop			; (mov r8, r8)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2110      	movs	r1, #16
 8001b86:	438a      	bics	r2, r1
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b90:	f383 8810 	msr	PRIMASK, r3
}
 8001b94:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f7fe fe9c 	bl	80008d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2258      	movs	r2, #88	; 0x58
 8001ba4:	5a9a      	ldrh	r2, [r3, r2]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	215a      	movs	r1, #90	; 0x5a
 8001baa:	5a5b      	ldrh	r3, [r3, r1]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	0011      	movs	r1, r2
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f000 f8d4 	bl	8001d64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001bbc:	e0be      	b.n	8001d3c <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2258      	movs	r2, #88	; 0x58
 8001bc2:	5a99      	ldrh	r1, [r3, r2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	225a      	movs	r2, #90	; 0x5a
 8001bc8:	5a9b      	ldrh	r3, [r3, r2]
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	208e      	movs	r0, #142	; 0x8e
 8001bce:	183b      	adds	r3, r7, r0
 8001bd0:	1a8a      	subs	r2, r1, r2
 8001bd2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	225a      	movs	r2, #90	; 0x5a
 8001bd8:	5a9b      	ldrh	r3, [r3, r2]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d100      	bne.n	8001be2 <HAL_UART_IRQHandler+0x43e>
 8001be0:	e0ae      	b.n	8001d40 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8001be2:	183b      	adds	r3, r7, r0
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d100      	bne.n	8001bec <HAL_UART_IRQHandler+0x448>
 8001bea:	e0a9      	b.n	8001d40 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bec:	f3ef 8310 	mrs	r3, PRIMASK
 8001bf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bf4:	2488      	movs	r4, #136	; 0x88
 8001bf6:	193a      	adds	r2, r7, r4
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	f383 8810 	msr	PRIMASK, r3
}
 8001c04:	46c0      	nop			; (mov r8, r8)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	494f      	ldr	r1, [pc, #316]	; (8001d50 <HAL_UART_IRQHandler+0x5ac>)
 8001c12:	400a      	ands	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	193b      	adds	r3, r7, r4
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f383 8810 	msr	PRIMASK, r3
}
 8001c22:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c24:	f3ef 8310 	mrs	r3, PRIMASK
 8001c28:	61bb      	str	r3, [r7, #24]
  return(result);
 8001c2a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c2c:	2484      	movs	r4, #132	; 0x84
 8001c2e:	193a      	adds	r2, r7, r4
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	2301      	movs	r3, #1
 8001c34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	f383 8810 	msr	PRIMASK, r3
}
 8001c3c:	46c0      	nop			; (mov r8, r8)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2101      	movs	r1, #1
 8001c4a:	438a      	bics	r2, r1
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	193b      	adds	r3, r7, r4
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	f383 8810 	msr	PRIMASK, r3
}
 8001c5a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c76:	2480      	movs	r4, #128	; 0x80
 8001c78:	193a      	adds	r2, r7, r4
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c82:	f383 8810 	msr	PRIMASK, r3
}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2110      	movs	r1, #16
 8001c94:	438a      	bics	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	193b      	adds	r3, r7, r4
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca0:	f383 8810 	msr	PRIMASK, r3
}
 8001ca4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001ca6:	183b      	adds	r3, r7, r0
 8001ca8:	881a      	ldrh	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	0011      	movs	r1, r2
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f000 f858 	bl	8001d64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001cb4:	e044      	b.n	8001d40 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001cb6:	23a4      	movs	r3, #164	; 0xa4
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	035b      	lsls	r3, r3, #13
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d010      	beq.n	8001ce6 <HAL_UART_IRQHandler+0x542>
 8001cc4:	239c      	movs	r3, #156	; 0x9c
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	03db      	lsls	r3, r3, #15
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d009      	beq.n	8001ce6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2280      	movs	r2, #128	; 0x80
 8001cd8:	0352      	lsls	r2, r2, #13
 8001cda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f000 fca8 	bl	8002634 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001ce4:	e02f      	b.n	8001d46 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001ce6:	23a4      	movs	r3, #164	; 0xa4
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2280      	movs	r2, #128	; 0x80
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d00f      	beq.n	8001d12 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001cf2:	23a0      	movs	r3, #160	; 0xa0
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2280      	movs	r2, #128	; 0x80
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d009      	beq.n	8001d12 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d01e      	beq.n	8001d44 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	0010      	movs	r0, r2
 8001d0e:	4798      	blx	r3
    }
    return;
 8001d10:	e018      	b.n	8001d44 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001d12:	23a4      	movs	r3, #164	; 0xa4
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2240      	movs	r2, #64	; 0x40
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d013      	beq.n	8001d46 <HAL_UART_IRQHandler+0x5a2>
 8001d1e:	23a0      	movs	r3, #160	; 0xa0
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2240      	movs	r2, #64	; 0x40
 8001d26:	4013      	ands	r3, r2
 8001d28:	d00d      	beq.n	8001d46 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f000 fc56 	bl	80025de <UART_EndTransmit_IT>
    return;
 8001d32:	e008      	b.n	8001d46 <HAL_UART_IRQHandler+0x5a2>
      return;
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	e006      	b.n	8001d46 <HAL_UART_IRQHandler+0x5a2>
    return;
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	e004      	b.n	8001d46 <HAL_UART_IRQHandler+0x5a2>
      return;
 8001d3c:	46c0      	nop			; (mov r8, r8)
 8001d3e:	e002      	b.n	8001d46 <HAL_UART_IRQHandler+0x5a2>
      return;
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	e000      	b.n	8001d46 <HAL_UART_IRQHandler+0x5a2>
    return;
 8001d44:	46c0      	nop			; (mov r8, r8)
  }

}
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b02b      	add	sp, #172	; 0xac
 8001d4a:	bd90      	pop	{r4, r7, pc}
 8001d4c:	fffffeff 	.word	0xfffffeff
 8001d50:	fffffedf 	.word	0xfffffedf

08001d54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001d5c:	46c0      	nop			; (mov r8, r8)
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b002      	add	sp, #8
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	000a      	movs	r2, r1
 8001d6e:	1cbb      	adds	r3, r7, #2
 8001d70:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b002      	add	sp, #8
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d84:	231e      	movs	r3, #30
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a8d      	ldr	r2, [pc, #564]	; (8001fe0 <UART_SetConfig+0x264>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	0019      	movs	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	4a88      	ldr	r2, [pc, #544]	; (8001fe4 <UART_SetConfig+0x268>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4a7f      	ldr	r2, [pc, #508]	; (8001fe8 <UART_SetConfig+0x26c>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a7b      	ldr	r2, [pc, #492]	; (8001fec <UART_SetConfig+0x270>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d127      	bne.n	8001e52 <UART_SetConfig+0xd6>
 8001e02:	4b7b      	ldr	r3, [pc, #492]	; (8001ff0 <UART_SetConfig+0x274>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	2203      	movs	r2, #3
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d00d      	beq.n	8001e2a <UART_SetConfig+0xae>
 8001e0e:	d81b      	bhi.n	8001e48 <UART_SetConfig+0xcc>
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d014      	beq.n	8001e3e <UART_SetConfig+0xc2>
 8001e14:	d818      	bhi.n	8001e48 <UART_SetConfig+0xcc>
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <UART_SetConfig+0xa4>
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d00a      	beq.n	8001e34 <UART_SetConfig+0xb8>
 8001e1e:	e013      	b.n	8001e48 <UART_SetConfig+0xcc>
 8001e20:	231f      	movs	r3, #31
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	e021      	b.n	8001e6e <UART_SetConfig+0xf2>
 8001e2a:	231f      	movs	r3, #31
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	2202      	movs	r2, #2
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e01c      	b.n	8001e6e <UART_SetConfig+0xf2>
 8001e34:	231f      	movs	r3, #31
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	2204      	movs	r2, #4
 8001e3a:	701a      	strb	r2, [r3, #0]
 8001e3c:	e017      	b.n	8001e6e <UART_SetConfig+0xf2>
 8001e3e:	231f      	movs	r3, #31
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	2208      	movs	r2, #8
 8001e44:	701a      	strb	r2, [r3, #0]
 8001e46:	e012      	b.n	8001e6e <UART_SetConfig+0xf2>
 8001e48:	231f      	movs	r3, #31
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	2210      	movs	r2, #16
 8001e4e:	701a      	strb	r2, [r3, #0]
 8001e50:	e00d      	b.n	8001e6e <UART_SetConfig+0xf2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a67      	ldr	r2, [pc, #412]	; (8001ff4 <UART_SetConfig+0x278>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d104      	bne.n	8001e66 <UART_SetConfig+0xea>
 8001e5c:	231f      	movs	r3, #31
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
 8001e64:	e003      	b.n	8001e6e <UART_SetConfig+0xf2>
 8001e66:	231f      	movs	r3, #31
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	2210      	movs	r2, #16
 8001e6c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69da      	ldr	r2, [r3, #28]
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	021b      	lsls	r3, r3, #8
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d15d      	bne.n	8001f36 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8001e7a:	231f      	movs	r3, #31
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d015      	beq.n	8001eb0 <UART_SetConfig+0x134>
 8001e84:	dc18      	bgt.n	8001eb8 <UART_SetConfig+0x13c>
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d00d      	beq.n	8001ea6 <UART_SetConfig+0x12a>
 8001e8a:	dc15      	bgt.n	8001eb8 <UART_SetConfig+0x13c>
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <UART_SetConfig+0x11a>
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d005      	beq.n	8001ea0 <UART_SetConfig+0x124>
 8001e94:	e010      	b.n	8001eb8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e96:	f7ff fb9b 	bl	80015d0 <HAL_RCC_GetPCLK1Freq>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	61bb      	str	r3, [r7, #24]
        break;
 8001e9e:	e012      	b.n	8001ec6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ea0:	4b55      	ldr	r3, [pc, #340]	; (8001ff8 <UART_SetConfig+0x27c>)
 8001ea2:	61bb      	str	r3, [r7, #24]
        break;
 8001ea4:	e00f      	b.n	8001ec6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ea6:	f7ff fb25 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	61bb      	str	r3, [r7, #24]
        break;
 8001eae:	e00a      	b.n	8001ec6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	61bb      	str	r3, [r7, #24]
        break;
 8001eb6:	e006      	b.n	8001ec6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001ebc:	231e      	movs	r3, #30
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
        break;
 8001ec4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d100      	bne.n	8001ece <UART_SetConfig+0x152>
 8001ecc:	e07b      	b.n	8001fc6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	005a      	lsls	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	085b      	lsrs	r3, r3, #1
 8001ed8:	18d2      	adds	r2, r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	0019      	movs	r1, r3
 8001ee0:	0010      	movs	r0, r2
 8001ee2:	f7fe f919 	bl	8000118 <__udivsi3>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	d91c      	bls.n	8001f2c <UART_SetConfig+0x1b0>
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	025b      	lsls	r3, r3, #9
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d217      	bcs.n	8001f2c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	200e      	movs	r0, #14
 8001f02:	183b      	adds	r3, r7, r0
 8001f04:	210f      	movs	r1, #15
 8001f06:	438a      	bics	r2, r1
 8001f08:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	085b      	lsrs	r3, r3, #1
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	2207      	movs	r2, #7
 8001f12:	4013      	ands	r3, r2
 8001f14:	b299      	uxth	r1, r3
 8001f16:	183b      	adds	r3, r7, r0
 8001f18:	183a      	adds	r2, r7, r0
 8001f1a:	8812      	ldrh	r2, [r2, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	183a      	adds	r2, r7, r0
 8001f26:	8812      	ldrh	r2, [r2, #0]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	e04c      	b.n	8001fc6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001f2c:	231e      	movs	r3, #30
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	e047      	b.n	8001fc6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001f36:	231f      	movs	r3, #31
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d015      	beq.n	8001f6c <UART_SetConfig+0x1f0>
 8001f40:	dc18      	bgt.n	8001f74 <UART_SetConfig+0x1f8>
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d00d      	beq.n	8001f62 <UART_SetConfig+0x1e6>
 8001f46:	dc15      	bgt.n	8001f74 <UART_SetConfig+0x1f8>
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <UART_SetConfig+0x1d6>
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d005      	beq.n	8001f5c <UART_SetConfig+0x1e0>
 8001f50:	e010      	b.n	8001f74 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f52:	f7ff fb3d 	bl	80015d0 <HAL_RCC_GetPCLK1Freq>
 8001f56:	0003      	movs	r3, r0
 8001f58:	61bb      	str	r3, [r7, #24]
        break;
 8001f5a:	e012      	b.n	8001f82 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f5c:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <UART_SetConfig+0x27c>)
 8001f5e:	61bb      	str	r3, [r7, #24]
        break;
 8001f60:	e00f      	b.n	8001f82 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f62:	f7ff fac7 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 8001f66:	0003      	movs	r3, r0
 8001f68:	61bb      	str	r3, [r7, #24]
        break;
 8001f6a:	e00a      	b.n	8001f82 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	61bb      	str	r3, [r7, #24]
        break;
 8001f72:	e006      	b.n	8001f82 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001f78:	231e      	movs	r3, #30
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
        break;
 8001f80:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01e      	beq.n	8001fc6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	085a      	lsrs	r2, r3, #1
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	18d2      	adds	r2, r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	0019      	movs	r1, r3
 8001f98:	0010      	movs	r0, r2
 8001f9a:	f7fe f8bd 	bl	8000118 <__udivsi3>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	2b0f      	cmp	r3, #15
 8001fa8:	d909      	bls.n	8001fbe <UART_SetConfig+0x242>
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	025b      	lsls	r3, r3, #9
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d204      	bcs.n	8001fbe <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	e003      	b.n	8001fc6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001fbe:	231e      	movs	r3, #30
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001fd2:	231e      	movs	r3, #30
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	781b      	ldrb	r3, [r3, #0]
}
 8001fd8:	0018      	movs	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b008      	add	sp, #32
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	ffff69f3 	.word	0xffff69f3
 8001fe4:	ffffcfff 	.word	0xffffcfff
 8001fe8:	fffff4ff 	.word	0xfffff4ff
 8001fec:	40013800 	.word	0x40013800
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40004400 	.word	0x40004400
 8001ff8:	007a1200 	.word	0x007a1200

08001ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	2201      	movs	r2, #1
 800200a:	4013      	ands	r3, r2
 800200c:	d00b      	beq.n	8002026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a4a      	ldr	r2, [pc, #296]	; (8002140 <UART_AdvFeatureConfig+0x144>)
 8002016:	4013      	ands	r3, r2
 8002018:	0019      	movs	r1, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	2202      	movs	r2, #2
 800202c:	4013      	ands	r3, r2
 800202e:	d00b      	beq.n	8002048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4a43      	ldr	r2, [pc, #268]	; (8002144 <UART_AdvFeatureConfig+0x148>)
 8002038:	4013      	ands	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	2204      	movs	r2, #4
 800204e:	4013      	ands	r3, r2
 8002050:	d00b      	beq.n	800206a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4a3b      	ldr	r2, [pc, #236]	; (8002148 <UART_AdvFeatureConfig+0x14c>)
 800205a:	4013      	ands	r3, r2
 800205c:	0019      	movs	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	2208      	movs	r2, #8
 8002070:	4013      	ands	r3, r2
 8002072:	d00b      	beq.n	800208c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4a34      	ldr	r2, [pc, #208]	; (800214c <UART_AdvFeatureConfig+0x150>)
 800207c:	4013      	ands	r3, r2
 800207e:	0019      	movs	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	2210      	movs	r2, #16
 8002092:	4013      	ands	r3, r2
 8002094:	d00b      	beq.n	80020ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4a2c      	ldr	r2, [pc, #176]	; (8002150 <UART_AdvFeatureConfig+0x154>)
 800209e:	4013      	ands	r3, r2
 80020a0:	0019      	movs	r1, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	2220      	movs	r2, #32
 80020b4:	4013      	ands	r3, r2
 80020b6:	d00b      	beq.n	80020d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	4a25      	ldr	r2, [pc, #148]	; (8002154 <UART_AdvFeatureConfig+0x158>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	0019      	movs	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	2240      	movs	r2, #64	; 0x40
 80020d6:	4013      	ands	r3, r2
 80020d8:	d01d      	beq.n	8002116 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4a1d      	ldr	r2, [pc, #116]	; (8002158 <UART_AdvFeatureConfig+0x15c>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	0019      	movs	r1, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	035b      	lsls	r3, r3, #13
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d10b      	bne.n	8002116 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4a15      	ldr	r2, [pc, #84]	; (800215c <UART_AdvFeatureConfig+0x160>)
 8002106:	4013      	ands	r3, r2
 8002108:	0019      	movs	r1, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	2280      	movs	r2, #128	; 0x80
 800211c:	4013      	ands	r3, r2
 800211e:	d00b      	beq.n	8002138 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <UART_AdvFeatureConfig+0x164>)
 8002128:	4013      	ands	r3, r2
 800212a:	0019      	movs	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	605a      	str	r2, [r3, #4]
  }
}
 8002138:	46c0      	nop			; (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	b002      	add	sp, #8
 800213e:	bd80      	pop	{r7, pc}
 8002140:	fffdffff 	.word	0xfffdffff
 8002144:	fffeffff 	.word	0xfffeffff
 8002148:	fffbffff 	.word	0xfffbffff
 800214c:	ffff7fff 	.word	0xffff7fff
 8002150:	ffffefff 	.word	0xffffefff
 8002154:	ffffdfff 	.word	0xffffdfff
 8002158:	ffefffff 	.word	0xffefffff
 800215c:	ff9fffff 	.word	0xff9fffff
 8002160:	fff7ffff 	.word	0xfff7ffff

08002164 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af02      	add	r7, sp, #8
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2280      	movs	r2, #128	; 0x80
 8002170:	2100      	movs	r1, #0
 8002172:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002174:	f7fe faa4 	bl	80006c0 <HAL_GetTick>
 8002178:	0003      	movs	r3, r0
 800217a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2208      	movs	r2, #8
 8002184:	4013      	ands	r3, r2
 8002186:	2b08      	cmp	r3, #8
 8002188:	d10c      	bne.n	80021a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2280      	movs	r2, #128	; 0x80
 800218e:	0391      	lsls	r1, r2, #14
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <UART_CheckIdleState+0x8c>)
 8002194:	9200      	str	r2, [sp, #0]
 8002196:	2200      	movs	r2, #0
 8002198:	f000 f82c 	bl	80021f4 <UART_WaitOnFlagUntilTimeout>
 800219c:	1e03      	subs	r3, r0, #0
 800219e:	d001      	beq.n	80021a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e021      	b.n	80021e8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2204      	movs	r2, #4
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d10c      	bne.n	80021cc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	03d1      	lsls	r1, r2, #15
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4a0d      	ldr	r2, [pc, #52]	; (80021f0 <UART_CheckIdleState+0x8c>)
 80021bc:	9200      	str	r2, [sp, #0]
 80021be:	2200      	movs	r2, #0
 80021c0:	f000 f818 	bl	80021f4 <UART_WaitOnFlagUntilTimeout>
 80021c4:	1e03      	subs	r3, r0, #0
 80021c6:	d001      	beq.n	80021cc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e00d      	b.n	80021e8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2220      	movs	r2, #32
 80021d0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2220      	movs	r2, #32
 80021d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2274      	movs	r2, #116	; 0x74
 80021e2:	2100      	movs	r1, #0
 80021e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	0018      	movs	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b004      	add	sp, #16
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	01ffffff 	.word	0x01ffffff

080021f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b094      	sub	sp, #80	; 0x50
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	1dfb      	adds	r3, r7, #7
 8002202:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002204:	e0a3      	b.n	800234e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002208:	3301      	adds	r3, #1
 800220a:	d100      	bne.n	800220e <UART_WaitOnFlagUntilTimeout+0x1a>
 800220c:	e09f      	b.n	800234e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220e:	f7fe fa57 	bl	80006c0 <HAL_GetTick>
 8002212:	0002      	movs	r2, r0
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800221a:	429a      	cmp	r2, r3
 800221c:	d302      	bcc.n	8002224 <UART_WaitOnFlagUntilTimeout+0x30>
 800221e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002220:	2b00      	cmp	r3, #0
 8002222:	d13d      	bne.n	80022a0 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002224:	f3ef 8310 	mrs	r3, PRIMASK
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800222c:	647b      	str	r3, [r7, #68]	; 0x44
 800222e:	2301      	movs	r3, #1
 8002230:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002234:	f383 8810 	msr	PRIMASK, r3
}
 8002238:	46c0      	nop			; (mov r8, r8)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	494c      	ldr	r1, [pc, #304]	; (8002378 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002246:	400a      	ands	r2, r1
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800224c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800224e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002250:	f383 8810 	msr	PRIMASK, r3
}
 8002254:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002256:	f3ef 8310 	mrs	r3, PRIMASK
 800225a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800225c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800225e:	643b      	str	r3, [r7, #64]	; 0x40
 8002260:	2301      	movs	r3, #1
 8002262:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002266:	f383 8810 	msr	PRIMASK, r3
}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2101      	movs	r1, #1
 8002278:	438a      	bics	r2, r1
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800227e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002282:	f383 8810 	msr	PRIMASK, r3
}
 8002286:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2220      	movs	r2, #32
 800228c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2220      	movs	r2, #32
 8002292:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2274      	movs	r2, #116	; 0x74
 8002298:	2100      	movs	r1, #0
 800229a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e067      	b.n	8002370 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2204      	movs	r2, #4
 80022a8:	4013      	ands	r3, r2
 80022aa:	d050      	beq.n	800234e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	69da      	ldr	r2, [r3, #28]
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	401a      	ands	r2, r3
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	429a      	cmp	r2, r3
 80022be:	d146      	bne.n	800234e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2280      	movs	r2, #128	; 0x80
 80022c6:	0112      	lsls	r2, r2, #4
 80022c8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ca:	f3ef 8310 	mrs	r3, PRIMASK
 80022ce:	613b      	str	r3, [r7, #16]
  return(result);
 80022d0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022d4:	2301      	movs	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f383 8810 	msr	PRIMASK, r3
}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4923      	ldr	r1, [pc, #140]	; (8002378 <UART_WaitOnFlagUntilTimeout+0x184>)
 80022ec:	400a      	ands	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	f383 8810 	msr	PRIMASK, r3
}
 80022fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002300:	61fb      	str	r3, [r7, #28]
  return(result);
 8002302:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002304:	64bb      	str	r3, [r7, #72]	; 0x48
 8002306:	2301      	movs	r3, #1
 8002308:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	f383 8810 	msr	PRIMASK, r3
}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	438a      	bics	r2, r1
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	f383 8810 	msr	PRIMASK, r3
}
 800232c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2280      	movs	r2, #128	; 0x80
 800233e:	2120      	movs	r1, #32
 8002340:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2274      	movs	r2, #116	; 0x74
 8002346:	2100      	movs	r1, #0
 8002348:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e010      	b.n	8002370 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	4013      	ands	r3, r2
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	425a      	negs	r2, r3
 800235e:	4153      	adcs	r3, r2
 8002360:	b2db      	uxtb	r3, r3
 8002362:	001a      	movs	r2, r3
 8002364:	1dfb      	adds	r3, r7, #7
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d100      	bne.n	800236e <UART_WaitOnFlagUntilTimeout+0x17a>
 800236c:	e74b      	b.n	8002206 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	0018      	movs	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	b014      	add	sp, #80	; 0x50
 8002376:	bd80      	pop	{r7, pc}
 8002378:	fffffe5f 	.word	0xfffffe5f

0800237c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08e      	sub	sp, #56	; 0x38
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002384:	f3ef 8310 	mrs	r3, PRIMASK
 8002388:	617b      	str	r3, [r7, #20]
  return(result);
 800238a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800238c:	637b      	str	r3, [r7, #52]	; 0x34
 800238e:	2301      	movs	r3, #1
 8002390:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	f383 8810 	msr	PRIMASK, r3
}
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4925      	ldr	r1, [pc, #148]	; (800243c <UART_EndRxTransfer+0xc0>)
 80023a6:	400a      	ands	r2, r1
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f383 8810 	msr	PRIMASK, r3
}
 80023b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023b6:	f3ef 8310 	mrs	r3, PRIMASK
 80023ba:	623b      	str	r3, [r7, #32]
  return(result);
 80023bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023be:	633b      	str	r3, [r7, #48]	; 0x30
 80023c0:	2301      	movs	r3, #1
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	f383 8810 	msr	PRIMASK, r3
}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2101      	movs	r1, #1
 80023d8:	438a      	bics	r2, r1
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023de:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e2:	f383 8810 	msr	PRIMASK, r3
}
 80023e6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d118      	bne.n	8002422 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023f0:	f3ef 8310 	mrs	r3, PRIMASK
 80023f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80023f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fa:	2301      	movs	r3, #1
 80023fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f383 8810 	msr	PRIMASK, r3
}
 8002404:	46c0      	nop			; (mov r8, r8)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2110      	movs	r1, #16
 8002412:	438a      	bics	r2, r1
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002418:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f383 8810 	msr	PRIMASK, r3
}
 8002420:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2220      	movs	r2, #32
 8002426:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002434:	46c0      	nop			; (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	b00e      	add	sp, #56	; 0x38
 800243a:	bd80      	pop	{r7, pc}
 800243c:	fffffedf 	.word	0xfffffedf

08002440 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	225a      	movs	r2, #90	; 0x5a
 8002452:	2100      	movs	r1, #0
 8002454:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2252      	movs	r2, #82	; 0x52
 800245a:	2100      	movs	r1, #0
 800245c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	0018      	movs	r0, r3
 8002462:	f7ff fc77 	bl	8001d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	46bd      	mov	sp, r7
 800246a:	b004      	add	sp, #16
 800246c:	bd80      	pop	{r7, pc}

0800246e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b08a      	sub	sp, #40	; 0x28
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800247a:	2b21      	cmp	r3, #33	; 0x21
 800247c:	d14d      	bne.n	800251a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2252      	movs	r2, #82	; 0x52
 8002482:	5a9b      	ldrh	r3, [r3, r2]
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d132      	bne.n	80024f0 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800248a:	f3ef 8310 	mrs	r3, PRIMASK
 800248e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002490:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
 8002494:	2301      	movs	r3, #1
 8002496:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f383 8810 	msr	PRIMASK, r3
}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2180      	movs	r1, #128	; 0x80
 80024ac:	438a      	bics	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f383 8810 	msr	PRIMASK, r3
}
 80024ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024bc:	f3ef 8310 	mrs	r3, PRIMASK
 80024c0:	617b      	str	r3, [r7, #20]
  return(result);
 80024c2:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80024c4:	623b      	str	r3, [r7, #32]
 80024c6:	2301      	movs	r3, #1
 80024c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	f383 8810 	msr	PRIMASK, r3
}
 80024d0:	46c0      	nop			; (mov r8, r8)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2140      	movs	r1, #64	; 0x40
 80024de:	430a      	orrs	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	f383 8810 	msr	PRIMASK, r3
}
 80024ec:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80024ee:	e014      	b.n	800251a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f4:	781a      	ldrb	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	b292      	uxth	r2, r2
 80024fc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2252      	movs	r2, #82	; 0x52
 800250c:	5a9b      	ldrh	r3, [r3, r2]
 800250e:	b29b      	uxth	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	b299      	uxth	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2252      	movs	r2, #82	; 0x52
 8002518:	5299      	strh	r1, [r3, r2]
}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	b00a      	add	sp, #40	; 0x28
 8002520:	bd80      	pop	{r7, pc}

08002522 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b08c      	sub	sp, #48	; 0x30
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800252e:	2b21      	cmp	r3, #33	; 0x21
 8002530:	d151      	bne.n	80025d6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2252      	movs	r2, #82	; 0x52
 8002536:	5a9b      	ldrh	r3, [r3, r2]
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d132      	bne.n	80025a4 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800253e:	f3ef 8310 	mrs	r3, PRIMASK
 8002542:	60fb      	str	r3, [r7, #12]
  return(result);
 8002544:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
 8002548:	2301      	movs	r3, #1
 800254a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	f383 8810 	msr	PRIMASK, r3
}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2180      	movs	r1, #128	; 0x80
 8002560:	438a      	bics	r2, r1
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002566:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f383 8810 	msr	PRIMASK, r3
}
 800256e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002570:	f3ef 8310 	mrs	r3, PRIMASK
 8002574:	61bb      	str	r3, [r7, #24]
  return(result);
 8002576:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
 800257a:	2301      	movs	r3, #1
 800257c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f383 8810 	msr	PRIMASK, r3
}
 8002584:	46c0      	nop			; (mov r8, r8)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2140      	movs	r1, #64	; 0x40
 8002592:	430a      	orrs	r2, r1
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	f383 8810 	msr	PRIMASK, r3
}
 80025a0:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80025a2:	e018      	b.n	80025d6 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	881a      	ldrh	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	05d2      	lsls	r2, r2, #23
 80025b4:	0dd2      	lsrs	r2, r2, #23
 80025b6:	b292      	uxth	r2, r2
 80025b8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025be:	1c9a      	adds	r2, r3, #2
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2252      	movs	r2, #82	; 0x52
 80025c8:	5a9b      	ldrh	r3, [r3, r2]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b299      	uxth	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2252      	movs	r2, #82	; 0x52
 80025d4:	5299      	strh	r1, [r3, r2]
}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	b00c      	add	sp, #48	; 0x30
 80025dc:	bd80      	pop	{r7, pc}

080025de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b086      	sub	sp, #24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025e6:	f3ef 8310 	mrs	r3, PRIMASK
 80025ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80025ec:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	2301      	movs	r3, #1
 80025f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f383 8810 	msr	PRIMASK, r3
}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2140      	movs	r1, #64	; 0x40
 8002608:	438a      	bics	r2, r1
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	f383 8810 	msr	PRIMASK, r3
}
 8002616:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2220      	movs	r2, #32
 800261c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	0018      	movs	r0, r3
 8002628:	f7fd fe02 	bl	8000230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800262c:	46c0      	nop			; (mov r8, r8)
 800262e:	46bd      	mov	sp, r7
 8002630:	b006      	add	sp, #24
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800263c:	46c0      	nop			; (mov r8, r8)
 800263e:	46bd      	mov	sp, r7
 8002640:	b002      	add	sp, #8
 8002642:	bd80      	pop	{r7, pc}

08002644 <__libc_init_array>:
 8002644:	b570      	push	{r4, r5, r6, lr}
 8002646:	2600      	movs	r6, #0
 8002648:	4d0c      	ldr	r5, [pc, #48]	; (800267c <__libc_init_array+0x38>)
 800264a:	4c0d      	ldr	r4, [pc, #52]	; (8002680 <__libc_init_array+0x3c>)
 800264c:	1b64      	subs	r4, r4, r5
 800264e:	10a4      	asrs	r4, r4, #2
 8002650:	42a6      	cmp	r6, r4
 8002652:	d109      	bne.n	8002668 <__libc_init_array+0x24>
 8002654:	2600      	movs	r6, #0
 8002656:	f000 f821 	bl	800269c <_init>
 800265a:	4d0a      	ldr	r5, [pc, #40]	; (8002684 <__libc_init_array+0x40>)
 800265c:	4c0a      	ldr	r4, [pc, #40]	; (8002688 <__libc_init_array+0x44>)
 800265e:	1b64      	subs	r4, r4, r5
 8002660:	10a4      	asrs	r4, r4, #2
 8002662:	42a6      	cmp	r6, r4
 8002664:	d105      	bne.n	8002672 <__libc_init_array+0x2e>
 8002666:	bd70      	pop	{r4, r5, r6, pc}
 8002668:	00b3      	lsls	r3, r6, #2
 800266a:	58eb      	ldr	r3, [r5, r3]
 800266c:	4798      	blx	r3
 800266e:	3601      	adds	r6, #1
 8002670:	e7ee      	b.n	8002650 <__libc_init_array+0xc>
 8002672:	00b3      	lsls	r3, r6, #2
 8002674:	58eb      	ldr	r3, [r5, r3]
 8002676:	4798      	blx	r3
 8002678:	3601      	adds	r6, #1
 800267a:	e7f2      	b.n	8002662 <__libc_init_array+0x1e>
 800267c:	08002700 	.word	0x08002700
 8002680:	08002700 	.word	0x08002700
 8002684:	08002700 	.word	0x08002700
 8002688:	08002704 	.word	0x08002704

0800268c <memset>:
 800268c:	0003      	movs	r3, r0
 800268e:	1882      	adds	r2, r0, r2
 8002690:	4293      	cmp	r3, r2
 8002692:	d100      	bne.n	8002696 <memset+0xa>
 8002694:	4770      	bx	lr
 8002696:	7019      	strb	r1, [r3, #0]
 8002698:	3301      	adds	r3, #1
 800269a:	e7f9      	b.n	8002690 <memset+0x4>

0800269c <_init>:
 800269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a2:	bc08      	pop	{r3}
 80026a4:	469e      	mov	lr, r3
 80026a6:	4770      	bx	lr

080026a8 <_fini>:
 80026a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ae:	bc08      	pop	{r3}
 80026b0:	469e      	mov	lr, r3
 80026b2:	4770      	bx	lr
