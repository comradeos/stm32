/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>//бібліотека для роботи з рядками
#include <stdio.h>//бібліотека вводу/виводу
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
char buf[21];// буфер для відправки даних
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define LCD_1602_SLAVE_ADRESS (0x27 << 1)//адреса LCD

#define DS1307_SLAVE_ADRESS 0xD0//адреса годинника реального часу

//службова функція для переводу чисел з 10 в 2-у
uint8_t dec_to_bin(int val)
{
 return (uint8_t)( (val/10*16) + (val % 10) );
}

//службова функція для переводу чисел з 2 в 10-у
int bin_to_dec(uint8_t val)
{
 return (int)( (val/16*10) + (val % 16) );
}

//стуктура часових параметрів
typedef struct{
	uint8_t seconds;
  	uint8_t minutes;
  	uint8_t hours;
  	uint8_t daysofweek;
  	uint8_t daysofmonth;
  	uint8_t months;
  	uint8_t years;
} TIME;

TIME time;// створюємо змінну типу TIME

//Функція для встановлення часу
void set_time(uint8_t sec, uint8_t min, uint8_t hr, uint8_t dow,
	       uint8_t dom, uint8_t mon, uint8_t yr)
{
  uint8_t time_block[7];//масив для даних з часових регістрів RTC

  //звертаємось до кожного елементу масиву time_block
  // значення з переводимо з 10 в 1, оскільки
  time_block[0] = dec_to_bin(sec);
  time_block[1] = dec_to_bin(min);
  time_block[2] = dec_to_bin(hr);
  time_block[3] = dec_to_bin(dow);
  time_block[4] = dec_to_bin(dom);
  time_block[5] = dec_to_bin(mon);
  time_block[6] = dec_to_bin(yr);

  HAL_I2C_Mem_Write(&hi2c1, DS1307_SLAVE_ADRESS, 0x00, 1, time_block, 7, 1000);//функція для запису даних через I2C
}

//функція для получення часу
void get_time(TIME * t)
{
  uint8_t time_block[7];//масив для даних з часових регістрів RTC

  HAL_I2C_Mem_Read(&hi2c1, DS1307_SLAVE_ADRESS, 0x00, 1, time_block, 7, 1000);// функція для читання даних через I2C

  // звертайємось до кожного елемента структури TIME через вказівник ->
  t->seconds = bin_to_dec(time_block[0]);
  t->minutes = bin_to_dec(time_block[1]);
  t->hours = bin_to_dec(time_block[2]);
  t->daysofweek = bin_to_dec(time_block[3]);
  t->daysofmonth = bin_to_dec(time_block[4]);
  t->months = bin_to_dec(time_block[5]);
  t->years = bin_to_dec(time_block[6]);
}


// функція відправки символів
void lcd_send_cmd(uint8_t cmd, I2C_HandleTypeDef * i2c_type)
{
	uint8_t upper_half_byte;
	uint8_t lower_half_byte;
	uint8_t data[4];

	upper_half_byte = cmd & 0xf0; //0xf0 = 11110000
	lower_half_byte = (cmd << 4) & 0xf0;
	data[0] = upper_half_byte | 0x0C; //0x0C = 0000 1100, rs = 0, en = 1
	data[1] = upper_half_byte | 0x08; //0x08 = 0000 1000, rs = 0, en = 0
	data[2] = lower_half_byte | 0x0C; //0x0C = 0000 1100, rs = 0, en = 1
	data[3] = lower_half_byte | 0x08; //0x08 = 0000 1000, rs = 0, en = 0
	HAL_I2C_Master_Transmit(i2c_type, LCD_1602_SLAVE_ADRESS, data, 4, 100);
}

void lcd_send_data(uint8_t dat, I2C_HandleTypeDef * i2c_type)
{
	//dat &= ~0x08; //display off, cursor off
	uint8_t upper_half_byte;
	uint8_t lower_half_byte;
	uint8_t data[4];

	upper_half_byte = dat & 0xf0; //0xf0 = 11110000
	lower_half_byte = (dat << 4) & 0xf0;
	data[0] = upper_half_byte | 0x0D; // rs = 1, en = 1
	data[1] = upper_half_byte | 0x09; // rs = 1, en = 0
	data[2] = lower_half_byte | 0x0D; // rs = 1, en = 1
	data[3] = lower_half_byte | 0x09;  //rs = 1, en = 0
	HAL_I2C_Master_Transmit(i2c_type, LCD_1602_SLAVE_ADRESS, data, 4, 100);
}

//фунція ініціалізації дисплея на лінії I2C
void lcd_init(I2C_HandleTypeDef * i2c_type)
{
	//4-bit initialisation

	HAL_Delay(50); //wait for more than 40 ms
	lcd_send_cmd(0x30, i2c_type);
	HAL_Delay(5);
	lcd_send_cmd(0x30, i2c_type);
	HAL_Delay(1); //wait for 100 us
	lcd_send_cmd(0x30, i2c_type);

	HAL_Delay(1);
	lcd_send_cmd(0x20, i2c_type);
	HAL_Delay(1);
	lcd_send_cmd(0x20, i2c_type);
	HAL_Delay(1);
	lcd_send_cmd(0x80, i2c_type); //function set
	HAL_Delay(1);
	lcd_send_cmd(0x00, i2c_type); //display off
	HAL_Delay(1);
	lcd_send_cmd(0x80, i2c_type); //display clear
	HAL_Delay(1);
	lcd_send_cmd(0x00, i2c_type); //display off
	HAL_Delay(1);
	lcd_send_cmd(0x10, i2c_type);
	HAL_Delay(1);
	lcd_send_cmd(0x00, i2c_type); //display off
	HAL_Delay(1);
	lcd_send_cmd(0xC0, i2c_type);
}

//функція відправки рядка
void lcd_send_string (char *str, I2C_HandleTypeDef * i2c_type)
{
	while (*str) lcd_send_data (*str++, i2c_type);
}

//очищення дисплея
void lcd_clear(I2C_HandleTypeDef * i2c_type)
{
	lcd_send_cmd (0x80, i2c_type);
	for (int i=0; i<70; i++)
	{
		lcd_send_data (' ', i2c_type);
	}

}

//функція встановлення курсора
void lcd_set_cursor(uint8_t row, uint8_t col, I2C_HandleTypeDef * i2c_type)
{
	switch (row)
	{
	case 0:
		col |= 0x80;
		break;
	case 1:
		col |= 0xC0;
		break;
	}
	lcd_send_cmd(col, i2c_type);
}

void lcd_cursor_off(I2C_HandleTypeDef * i2c_type)
{
	lcd_send_cmd(0xE, i2c_type);
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */



  //задаємо час( секунди, хвилини, години, день тижня, день місяця, місяць, рік)
  set_time(0, 03, 20, 2, 3, 1, 23);
  /* USER CODE END 2 */

  lcd_init(&hi2c1);//ініціалізуємо дисплей на 1-ому i2c

    lcd_send_string("HELLO WORLD",&hi2c1);

    HAL_Delay(1000);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  get_time(&time);
	  sprintf(buf, "%02d:%02d:%02d %02d-%02d-%02d-%02d", time.seconds, time.minutes,
														 time.hours, time.daysofweek,
														 time.daysofmonth,time.months,
														 time.years);
	  strcat(buf, "\n");
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, sizeof(buf), 1000);
	  HAL_Delay(500);
    /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x2010091A;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
